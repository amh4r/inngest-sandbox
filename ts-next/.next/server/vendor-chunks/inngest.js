/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/inngest";
exports.ids = ["vendor-chunks/inngest"];
exports.modules = {

/***/ "(rsc)/./node_modules/inngest/api/api.js":
/*!*****************************************!*\
  !*** ./node_modules/inngest/api/api.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InngestApi = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst consts_js_1 = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst devserver_js_1 = __webpack_require__(/*! ../helpers/devserver.js */ \"(rsc)/./node_modules/inngest/helpers/devserver.js\");\nconst errors_js_1 = __webpack_require__(/*! ../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst net_js_1 = __webpack_require__(/*! ../helpers/net.js */ \"(rsc)/./node_modules/inngest/helpers/net.js\");\nconst strings_js_1 = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst schema_js_1 = __webpack_require__(/*! ./schema.js */ \"(rsc)/./node_modules/inngest/api/schema.js\");\nconst realtimeSubscriptionTokenSchema = zod_1.z.object({\n    jwt: zod_1.z.string(),\n});\nconst sendSignalSuccessResponseSchema = zod_1.z.object({\n    data: zod_1.z.object({\n        run_id: zod_1.z.string().min(1),\n    }),\n});\nclass InngestApi {\n    constructor({ baseUrl, signingKey, signingKeyFallback, fetch, mode, }) {\n        this.apiBaseUrl = baseUrl;\n        this.signingKey = signingKey;\n        this.signingKeyFallback = signingKeyFallback;\n        this.fetch = fetch;\n        this.mode = mode;\n    }\n    get hashedKey() {\n        return (0, strings_js_1.hashSigningKey)(this.signingKey);\n    }\n    get hashedFallbackKey() {\n        if (!this.signingKeyFallback) {\n            return;\n        }\n        return (0, strings_js_1.hashSigningKey)(this.signingKeyFallback);\n    }\n    // set the signing key in case it was not instantiated previously\n    setSigningKey(key) {\n        if (typeof key === \"string\" && this.signingKey === \"\") {\n            this.signingKey = key;\n        }\n    }\n    setSigningKeyFallback(key) {\n        if (typeof key === \"string\" && !this.signingKeyFallback) {\n            this.signingKeyFallback = key;\n        }\n    }\n    async getTargetUrl(path) {\n        if (this.apiBaseUrl) {\n            return new URL(path, this.apiBaseUrl);\n        }\n        let url = new URL(path, consts_js_1.defaultInngestApiBaseUrl);\n        if (this.mode.isDev && this.mode.isInferred && !this.apiBaseUrl) {\n            const devAvailable = await (0, devserver_js_1.devServerAvailable)(consts_js_1.defaultDevServerHost, this.fetch);\n            if (devAvailable) {\n                url = new URL(path, consts_js_1.defaultDevServerHost);\n            }\n        }\n        return url;\n    }\n    async getRunSteps(runId, version) {\n        return (0, net_js_1.fetchWithAuthFallback)({\n            authToken: this.hashedKey,\n            authTokenFallback: this.hashedFallbackKey,\n            fetch: this.fetch,\n            url: await this.getTargetUrl(`/v0/runs/${runId}/actions`),\n        })\n            .then(async (resp) => {\n            const data = await resp.json();\n            if (resp.ok) {\n                return (0, types_js_1.ok)(schema_js_1.stepsSchemas[version].parse(data));\n            }\n            else {\n                return (0, types_js_1.err)(schema_js_1.errorSchema.parse(data));\n            }\n        })\n            .catch((error) => {\n            return (0, types_js_1.err)({\n                error: (0, errors_js_1.getErrorMessage)(error, \"Unknown error retrieving step data\"),\n                status: 500,\n            });\n        });\n    }\n    async getRunBatch(runId) {\n        return (0, net_js_1.fetchWithAuthFallback)({\n            authToken: this.hashedKey,\n            authTokenFallback: this.hashedFallbackKey,\n            fetch: this.fetch,\n            url: await this.getTargetUrl(`/v0/runs/${runId}/batch`),\n        })\n            .then(async (resp) => {\n            const data = await resp.json();\n            if (resp.ok) {\n                return (0, types_js_1.ok)(schema_js_1.batchSchema.parse(data));\n            }\n            else {\n                return (0, types_js_1.err)(schema_js_1.errorSchema.parse(data));\n            }\n        })\n            .catch((error) => {\n            return (0, types_js_1.err)({\n                error: (0, errors_js_1.getErrorMessage)(error, \"Unknown error retrieving event batch\"),\n                status: 500,\n            });\n        });\n    }\n    async publish(publishOptions, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data) {\n        // todo it may not be a \"text/stream\"\n        const isStream = data instanceof ReadableStream;\n        const url = await this.getTargetUrl(\"/v1/realtime/publish\");\n        url.searchParams.set(\"channel\", publishOptions.channel || \"\");\n        if (publishOptions.runId) {\n            url.searchParams.set(\"run_id\", publishOptions.runId);\n        }\n        publishOptions.topics.forEach((topic) => {\n            url.searchParams.append(\"topic\", topic);\n        });\n        return (0, net_js_1.fetchWithAuthFallback)({\n            authToken: this.hashedKey,\n            authTokenFallback: this.hashedFallbackKey,\n            fetch: this.fetch,\n            url,\n            options: Object.assign({ method: \"POST\", body: isStream\n                    ? data\n                    : typeof data === \"string\"\n                        ? data\n                        : JSON.stringify(data), headers: {\n                    \"Content-Type\": isStream ? \"text/stream\" : \"application/json\",\n                } }, (isStream ? { duplex: \"half\" } : {})),\n        })\n            .then((res) => {\n            if (!res.ok) {\n                throw new Error(`Failed to publish event: ${res.status} ${res.statusText}`);\n            }\n            return (0, types_js_1.ok)(undefined);\n        })\n            .catch((error) => {\n            return (0, types_js_1.err)({\n                error: (0, errors_js_1.getErrorMessage)(error, \"Unknown error publishing event\"),\n                status: 500,\n            });\n        });\n    }\n    async sendSignal(signalOptions, options) {\n        const url = await this.getTargetUrl(\"/v1/signals\");\n        const body = {\n            signal: signalOptions.signal,\n            data: signalOptions.data,\n        };\n        return (0, net_js_1.fetchWithAuthFallback)({\n            authToken: this.hashedKey,\n            authTokenFallback: this.hashedFallbackKey,\n            fetch: this.fetch,\n            url,\n            options: {\n                method: \"POST\",\n                body: JSON.stringify(body),\n                headers: Object.assign({ \"Content-Type\": \"application/json\" }, options === null || options === void 0 ? void 0 : options.headers),\n            },\n        })\n            .then(async (res) => {\n            // A 404 is valid if the signal was not found.\n            if (res.status === 404) {\n                return (0, types_js_1.ok)({\n                    runId: undefined,\n                });\n            }\n            // Save a clone of the response we can use to get the text of if we fail\n            // to parse the JSON.\n            const resClone = res.clone();\n            // JSON!\n            let json;\n            try {\n                json = await res.json();\n            }\n            catch (error) {\n                // res.json() failed so not a valid JSON response\n                return (0, types_js_1.err)({\n                    error: `Failed to send signal: ${res.status} ${res.statusText} - ${await resClone.text()}`,\n                    status: res.status,\n                });\n            }\n            // If we're not 2xx, something went wrong.\n            if (!res.ok) {\n                try {\n                    return (0, types_js_1.err)(schema_js_1.errorSchema.parse(json));\n                }\n                catch (_a) {\n                    // schema parse failed\n                    return (0, types_js_1.err)({\n                        error: `Failed to send signal: ${res.status} ${res.statusText} - ${await res.text()}`,\n                        status: res.status,\n                    });\n                }\n            }\n            // If we are 2xx, we should have a run_id.\n            const parseRes = sendSignalSuccessResponseSchema.safeParse(json);\n            if (!parseRes.success) {\n                return (0, types_js_1.err)({\n                    error: `Successfully sent signal, but response parsing failed: ${res.status} ${res.statusText} - ${await resClone.text()}`,\n                    status: res.status,\n                });\n            }\n            return (0, types_js_1.ok)({\n                runId: parseRes.data.data.run_id,\n            });\n        })\n            .catch((error) => {\n            // Catch-all if various things go wrong\n            return (0, types_js_1.err)({\n                error: (0, errors_js_1.getErrorMessage)(error, \"Unknown error sending signal\"),\n                status: 500,\n            });\n        });\n    }\n    async getSubscriptionToken(channel, topics) {\n        const url = await this.getTargetUrl(\"/v1/realtime/token\");\n        const body = topics.map((topic) => ({\n            channel,\n            name: topic,\n            kind: \"run\",\n        }));\n        return (0, net_js_1.fetchWithAuthFallback)({\n            authToken: this.hashedKey,\n            authTokenFallback: this.hashedFallbackKey,\n            fetch: this.fetch,\n            url,\n            options: {\n                method: \"POST\",\n                body: JSON.stringify(body),\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n            },\n        })\n            .then(async (res) => {\n            if (!res.ok) {\n                throw new Error(`Failed to get subscription token: ${res.status} ${res.statusText} - ${await res.text()}`);\n            }\n            const data = realtimeSubscriptionTokenSchema.parse(await res.json());\n            return data.jwt;\n        })\n            .catch((error) => {\n            throw new Error((0, errors_js_1.getErrorMessage)(error, \"Unknown error getting subscription token\"));\n        });\n    }\n}\nexports.InngestApi = InngestApi;\n//# sourceMappingURL=api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/api/api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/api/schema.js":
/*!********************************************!*\
  !*** ./node_modules/inngest/api/schema.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.batchSchema = exports.stepsSchemas = exports.errorSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ../components/execution/InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nexports.errorSchema = zod_1.z.object({\n    error: zod_1.z.string(),\n    status: zod_1.z.number(),\n});\nconst v0StepSchema = zod_1.z\n    .record(zod_1.z.any().refine((v) => typeof v !== \"undefined\", {\n    message: \"Values in steps must be defined\",\n}))\n    .optional()\n    .nullable();\nconst v1StepSchema = zod_1.z\n    .record(zod_1.z\n    .object({\n    type: zod_1.z.literal(\"data\").optional().default(\"data\"),\n    data: zod_1.z.any().refine((v) => typeof v !== \"undefined\", {\n        message: \"Data in steps must be defined\",\n    }),\n})\n    .strict()\n    .or(zod_1.z\n    .object({\n    type: zod_1.z.literal(\"error\").optional().default(\"error\"),\n    error: types_js_1.jsonErrorSchema,\n})\n    .strict())\n    .or(zod_1.z\n    .object({\n    type: zod_1.z.literal(\"input\").optional().default(\"input\"),\n    input: zod_1.z.any().refine((v) => typeof v !== \"undefined\", {\n        message: \"If input is present it must not be `undefined`\",\n    }),\n})\n    .strict())\n    /**\n     * If the result isn't a distcint `data` or `error` object, then it's\n     * likely that the executor has set this directly to a value, for example\n     * in the case of `sleep` or `waitForEvent`.\n     *\n     * In this case, pull the entire value through as data.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    .or(zod_1.z.any().transform((v) => ({ type: \"data\", data: v }))))\n    .default({});\nconst v2StepSchema = v1StepSchema;\nexports.stepsSchemas = {\n    [InngestExecution_js_1.ExecutionVersion.V0]: v0StepSchema,\n    [InngestExecution_js_1.ExecutionVersion.V1]: v1StepSchema,\n    [InngestExecution_js_1.ExecutionVersion.V2]: v2StepSchema,\n};\nexports.batchSchema = zod_1.z.array(zod_1.z.record(zod_1.z.any()).transform((v) => v));\n//# sourceMappingURL=schema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9hcGkvc2NoZW1hLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLG9CQUFvQixHQUFHLG1CQUFtQjtBQUNoRSxjQUFjLG1CQUFPLENBQUMsa0RBQUs7QUFDM0IsOEJBQThCLG1CQUFPLENBQUMsMEhBQTZDO0FBQ25GLG1CQUFtQixtQkFBTyxDQUFDLDBEQUFhO0FBQ3hDLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHVCQUF1QjtBQUNqRSxlQUFlO0FBQ2Y7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9haGFycGVyL2lubmdlc3QvaW5uZ2VzdC1zYW5kYm94L3RzLW5leHQvbm9kZV9tb2R1bGVzL2lubmdlc3QvYXBpL3NjaGVtYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYmF0Y2hTY2hlbWEgPSBleHBvcnRzLnN0ZXBzU2NoZW1hcyA9IGV4cG9ydHMuZXJyb3JTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCB6b2RfMSA9IHJlcXVpcmUoXCJ6b2RcIik7XG5jb25zdCBJbm5nZXN0RXhlY3V0aW9uX2pzXzEgPSByZXF1aXJlKFwiLi4vY29tcG9uZW50cy9leGVjdXRpb24vSW5uZ2VzdEV4ZWN1dGlvbi5qc1wiKTtcbmNvbnN0IHR5cGVzX2pzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXMuanNcIik7XG5leHBvcnRzLmVycm9yU2NoZW1hID0gem9kXzEuei5vYmplY3Qoe1xuICAgIGVycm9yOiB6b2RfMS56LnN0cmluZygpLFxuICAgIHN0YXR1czogem9kXzEuei5udW1iZXIoKSxcbn0pO1xuY29uc3QgdjBTdGVwU2NoZW1hID0gem9kXzEuelxuICAgIC5yZWNvcmQoem9kXzEuei5hbnkoKS5yZWZpbmUoKHYpID0+IHR5cGVvZiB2ICE9PSBcInVuZGVmaW5lZFwiLCB7XG4gICAgbWVzc2FnZTogXCJWYWx1ZXMgaW4gc3RlcHMgbXVzdCBiZSBkZWZpbmVkXCIsXG59KSlcbiAgICAub3B0aW9uYWwoKVxuICAgIC5udWxsYWJsZSgpO1xuY29uc3QgdjFTdGVwU2NoZW1hID0gem9kXzEuelxuICAgIC5yZWNvcmQoem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIHR5cGU6IHpvZF8xLnoubGl0ZXJhbChcImRhdGFcIikub3B0aW9uYWwoKS5kZWZhdWx0KFwiZGF0YVwiKSxcbiAgICBkYXRhOiB6b2RfMS56LmFueSgpLnJlZmluZSgodikgPT4gdHlwZW9mIHYgIT09IFwidW5kZWZpbmVkXCIsIHtcbiAgICAgICAgbWVzc2FnZTogXCJEYXRhIGluIHN0ZXBzIG11c3QgYmUgZGVmaW5lZFwiLFxuICAgIH0pLFxufSlcbiAgICAuc3RyaWN0KClcbiAgICAub3Ioem9kXzEuelxuICAgIC5vYmplY3Qoe1xuICAgIHR5cGU6IHpvZF8xLnoubGl0ZXJhbChcImVycm9yXCIpLm9wdGlvbmFsKCkuZGVmYXVsdChcImVycm9yXCIpLFxuICAgIGVycm9yOiB0eXBlc19qc18xLmpzb25FcnJvclNjaGVtYSxcbn0pXG4gICAgLnN0cmljdCgpKVxuICAgIC5vcih6b2RfMS56XG4gICAgLm9iamVjdCh7XG4gICAgdHlwZTogem9kXzEuei5saXRlcmFsKFwiaW5wdXRcIikub3B0aW9uYWwoKS5kZWZhdWx0KFwiaW5wdXRcIiksXG4gICAgaW5wdXQ6IHpvZF8xLnouYW55KCkucmVmaW5lKCh2KSA9PiB0eXBlb2YgdiAhPT0gXCJ1bmRlZmluZWRcIiwge1xuICAgICAgICBtZXNzYWdlOiBcIklmIGlucHV0IGlzIHByZXNlbnQgaXQgbXVzdCBub3QgYmUgYHVuZGVmaW5lZGBcIixcbiAgICB9KSxcbn0pXG4gICAgLnN0cmljdCgpKVxuICAgIC8qKlxuICAgICAqIElmIHRoZSByZXN1bHQgaXNuJ3QgYSBkaXN0Y2ludCBgZGF0YWAgb3IgYGVycm9yYCBvYmplY3QsIHRoZW4gaXQnc1xuICAgICAqIGxpa2VseSB0aGF0IHRoZSBleGVjdXRvciBoYXMgc2V0IHRoaXMgZGlyZWN0bHkgdG8gYSB2YWx1ZSwgZm9yIGV4YW1wbGVcbiAgICAgKiBpbiB0aGUgY2FzZSBvZiBgc2xlZXBgIG9yIGB3YWl0Rm9yRXZlbnRgLlxuICAgICAqXG4gICAgICogSW4gdGhpcyBjYXNlLCBwdWxsIHRoZSBlbnRpcmUgdmFsdWUgdGhyb3VnaCBhcyBkYXRhLlxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcbiAgICAub3Ioem9kXzEuei5hbnkoKS50cmFuc2Zvcm0oKHYpID0+ICh7IHR5cGU6IFwiZGF0YVwiLCBkYXRhOiB2IH0pKSkpXG4gICAgLmRlZmF1bHQoe30pO1xuY29uc3QgdjJTdGVwU2NoZW1hID0gdjFTdGVwU2NoZW1hO1xuZXhwb3J0cy5zdGVwc1NjaGVtYXMgPSB7XG4gICAgW0lubmdlc3RFeGVjdXRpb25fanNfMS5FeGVjdXRpb25WZXJzaW9uLlYwXTogdjBTdGVwU2NoZW1hLFxuICAgIFtJbm5nZXN0RXhlY3V0aW9uX2pzXzEuRXhlY3V0aW9uVmVyc2lvbi5WMV06IHYxU3RlcFNjaGVtYSxcbiAgICBbSW5uZ2VzdEV4ZWN1dGlvbl9qc18xLkV4ZWN1dGlvblZlcnNpb24uVjJdOiB2MlN0ZXBTY2hlbWEsXG59O1xuZXhwb3J0cy5iYXRjaFNjaGVtYSA9IHpvZF8xLnouYXJyYXkoem9kXzEuei5yZWNvcmQoem9kXzEuei5hbnkoKSkudHJhbnNmb3JtKCh2KSA9PiB2KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlbWEuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/api/schema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/EventSchemas.js":
/*!*********************************************************!*\
  !*** ./node_modules/inngest/components/EventSchemas.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EventSchemas = void 0;\n/**\n * Provide an `EventSchemas` class to type events, providing type safety when\n * sending events and running functions via Inngest.\n *\n * You can provide generated Inngest types, custom types, types using Zod, or\n * a combination of the above. See {@link EventSchemas} for more information.\n *\n * @example\n *\n * ```ts\n * export const inngest = new Inngest({\n *   id: \"my-app\",\n *   schemas: new EventSchemas().fromZod({\n *     \"app/user.created\": {\n *       data: z.object({\n *         id: z.string(),\n *         name: z.string(),\n *       }),\n *     },\n *   }),\n * });\n * ```\n *\n * @public\n */\nclass EventSchemas {\n    constructor() {\n        this.runtimeSchemas = {};\n    }\n    addRuntimeSchemas(schemas) {\n        this.runtimeSchemas = Object.assign(Object.assign({}, this.runtimeSchemas), schemas);\n    }\n    /**\n     * Use generated Inngest types to type events.\n     */\n    fromGenerated() {\n        return this;\n    }\n    /**\n     * Use a `Record<>` type to type events.\n     *\n     * @example\n     *\n     * ```ts\n     * export const inngest = new Inngest({\n     *   id: \"my-app\",\n     *   schemas: new EventSchemas().fromRecord<{\n     *     \"app/user.created\": {\n     *       data: {\n     *         id: string;\n     *         name: string;\n     *       };\n     *     };\n     *   }>(),\n     * });\n     * ```\n     */\n    fromRecord(..._args) {\n        return this;\n    }\n    /**\n     * Use a union type to type events.\n     *\n     * @example\n     *\n     * ```ts\n     * type AccountCreated = {\n     *   name: \"app/account.created\";\n     *   data: { org: string };\n     *   user: { id: string };\n     * };\n     *\n     * type AccountDeleted = {\n     *   name: \"app/account.deleted\";\n     *   data: { org: string };\n     *   user: { id: string };\n     * };\n     *\n     * type Events = AccountCreated | AccountDeleted;\n     *\n     * export const inngest = new Inngest({\n     *   id: \"my-app\",\n     *   schemas: new EventSchemas().fromUnion<Events>(),\n     * });\n     * ```\n     */\n    fromUnion() {\n        return this;\n    }\n    /**\n     * Use Zod to type events.\n     *\n     * @example\n     *\n     * ```ts\n     * export const inngest = new Inngest({\n     *   id: \"my-app\",\n     *   schemas: new EventSchemas().fromZod({\n     *     \"app/user.created\": {\n     *       data: z.object({\n     *         id: z.string(),\n     *         name: z.string(),\n     *       }),\n     *     },\n     *   }),\n     * });\n     * ```\n     */\n    fromZod(schemas) {\n        let runtimeSchemas;\n        if (Array.isArray(schemas)) {\n            runtimeSchemas = schemas.reduce((acc, schema) => {\n                const _a = schema.shape, { name: { value: name } } = _a, rest = __rest(_a, [\"name\"]);\n                return Object.assign(Object.assign({}, acc), { [name]: rest });\n            }, {});\n        }\n        else {\n            runtimeSchemas = schemas;\n        }\n        this.addRuntimeSchemas(runtimeSchemas);\n        return this;\n    }\n}\nexports.EventSchemas = EventSchemas;\n//# sourceMappingURL=EventSchemas.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0V2ZW50U2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsY0FBYztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLG9CQUFvQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLFFBQVE7QUFDUixNQUFNO0FBQ04sSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsWUFBWTtBQUNaLFVBQVU7QUFDVixRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFFBQVEsZ0JBQWdCO0FBQ25FLHFEQUFxRCxVQUFVLGNBQWM7QUFDN0UsYUFBYSxJQUFJO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9haGFycGVyL2lubmdlc3QvaW5uZ2VzdC1zYW5kYm94L3RzLW5leHQvbm9kZV9tb2R1bGVzL2lubmdlc3QvY29tcG9uZW50cy9FdmVudFNjaGVtYXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV2ZW50U2NoZW1hcyA9IHZvaWQgMDtcbi8qKlxuICogUHJvdmlkZSBhbiBgRXZlbnRTY2hlbWFzYCBjbGFzcyB0byB0eXBlIGV2ZW50cywgcHJvdmlkaW5nIHR5cGUgc2FmZXR5IHdoZW5cbiAqIHNlbmRpbmcgZXZlbnRzIGFuZCBydW5uaW5nIGZ1bmN0aW9ucyB2aWEgSW5uZ2VzdC5cbiAqXG4gKiBZb3UgY2FuIHByb3ZpZGUgZ2VuZXJhdGVkIElubmdlc3QgdHlwZXMsIGN1c3RvbSB0eXBlcywgdHlwZXMgdXNpbmcgWm9kLCBvclxuICogYSBjb21iaW5hdGlvbiBvZiB0aGUgYWJvdmUuIFNlZSB7QGxpbmsgRXZlbnRTY2hlbWFzfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYHRzXG4gKiBleHBvcnQgY29uc3QgaW5uZ2VzdCA9IG5ldyBJbm5nZXN0KHtcbiAqICAgaWQ6IFwibXktYXBwXCIsXG4gKiAgIHNjaGVtYXM6IG5ldyBFdmVudFNjaGVtYXMoKS5mcm9tWm9kKHtcbiAqICAgICBcImFwcC91c2VyLmNyZWF0ZWRcIjoge1xuICogICAgICAgZGF0YTogei5vYmplY3Qoe1xuICogICAgICAgICBpZDogei5zdHJpbmcoKSxcbiAqICAgICAgICAgbmFtZTogei5zdHJpbmcoKSxcbiAqICAgICAgIH0pLFxuICogICAgIH0sXG4gKiAgIH0pLFxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIEV2ZW50U2NoZW1hcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucnVudGltZVNjaGVtYXMgPSB7fTtcbiAgICB9XG4gICAgYWRkUnVudGltZVNjaGVtYXMoc2NoZW1hcykge1xuICAgICAgICB0aGlzLnJ1bnRpbWVTY2hlbWFzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLnJ1bnRpbWVTY2hlbWFzKSwgc2NoZW1hcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVzZSBnZW5lcmF0ZWQgSW5uZ2VzdCB0eXBlcyB0byB0eXBlIGV2ZW50cy5cbiAgICAgKi9cbiAgICBmcm9tR2VuZXJhdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXNlIGEgYFJlY29yZDw+YCB0eXBlIHRvIHR5cGUgZXZlbnRzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGBgYHRzXG4gICAgICogZXhwb3J0IGNvbnN0IGlubmdlc3QgPSBuZXcgSW5uZ2VzdCh7XG4gICAgICogICBpZDogXCJteS1hcHBcIixcbiAgICAgKiAgIHNjaGVtYXM6IG5ldyBFdmVudFNjaGVtYXMoKS5mcm9tUmVjb3JkPHtcbiAgICAgKiAgICAgXCJhcHAvdXNlci5jcmVhdGVkXCI6IHtcbiAgICAgKiAgICAgICBkYXRhOiB7XG4gICAgICogICAgICAgICBpZDogc3RyaW5nO1xuICAgICAqICAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAqICAgICAgIH07XG4gICAgICogICAgIH07XG4gICAgICogICB9PigpLFxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZyb21SZWNvcmQoLi4uX2FyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVzZSBhIHVuaW9uIHR5cGUgdG8gdHlwZSBldmVudHMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgdHNcbiAgICAgKiB0eXBlIEFjY291bnRDcmVhdGVkID0ge1xuICAgICAqICAgbmFtZTogXCJhcHAvYWNjb3VudC5jcmVhdGVkXCI7XG4gICAgICogICBkYXRhOiB7IG9yZzogc3RyaW5nIH07XG4gICAgICogICB1c2VyOiB7IGlkOiBzdHJpbmcgfTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdHlwZSBBY2NvdW50RGVsZXRlZCA9IHtcbiAgICAgKiAgIG5hbWU6IFwiYXBwL2FjY291bnQuZGVsZXRlZFwiO1xuICAgICAqICAgZGF0YTogeyBvcmc6IHN0cmluZyB9O1xuICAgICAqICAgdXNlcjogeyBpZDogc3RyaW5nIH07XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHR5cGUgRXZlbnRzID0gQWNjb3VudENyZWF0ZWQgfCBBY2NvdW50RGVsZXRlZDtcbiAgICAgKlxuICAgICAqIGV4cG9ydCBjb25zdCBpbm5nZXN0ID0gbmV3IElubmdlc3Qoe1xuICAgICAqICAgaWQ6IFwibXktYXBwXCIsXG4gICAgICogICBzY2hlbWFzOiBuZXcgRXZlbnRTY2hlbWFzKCkuZnJvbVVuaW9uPEV2ZW50cz4oKSxcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBmcm9tVW5pb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVc2UgWm9kIHRvIHR5cGUgZXZlbnRzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGBgYHRzXG4gICAgICogZXhwb3J0IGNvbnN0IGlubmdlc3QgPSBuZXcgSW5uZ2VzdCh7XG4gICAgICogICBpZDogXCJteS1hcHBcIixcbiAgICAgKiAgIHNjaGVtYXM6IG5ldyBFdmVudFNjaGVtYXMoKS5mcm9tWm9kKHtcbiAgICAgKiAgICAgXCJhcHAvdXNlci5jcmVhdGVkXCI6IHtcbiAgICAgKiAgICAgICBkYXRhOiB6Lm9iamVjdCh7XG4gICAgICogICAgICAgICBpZDogei5zdHJpbmcoKSxcbiAgICAgKiAgICAgICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgICogICAgICAgfSksXG4gICAgICogICAgIH0sXG4gICAgICogICB9KSxcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBmcm9tWm9kKHNjaGVtYXMpIHtcbiAgICAgICAgbGV0IHJ1bnRpbWVTY2hlbWFzO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWFzKSkge1xuICAgICAgICAgICAgcnVudGltZVNjaGVtYXMgPSBzY2hlbWFzLnJlZHVjZSgoYWNjLCBzY2hlbWEpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBfYSA9IHNjaGVtYS5zaGFwZSwgeyBuYW1lOiB7IHZhbHVlOiBuYW1lIH0gfSA9IF9hLCByZXN0ID0gX19yZXN0KF9hLCBbXCJuYW1lXCJdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhY2MpLCB7IFtuYW1lXTogcmVzdCB9KTtcbiAgICAgICAgICAgIH0sIHt9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJ1bnRpbWVTY2hlbWFzID0gc2NoZW1hcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZFJ1bnRpbWVTY2hlbWFzKHJ1bnRpbWVTY2hlbWFzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5FdmVudFNjaGVtYXMgPSBFdmVudFNjaGVtYXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FdmVudFNjaGVtYXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/EventSchemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/Fetch.js":
/*!**************************************************!*\
  !*** ./node_modules/inngest/components/Fetch.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetch = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/inngest/node_modules/debug/src/index.js\"));\nconst als_js_1 = __webpack_require__(/*! ./execution/als.js */ \"(rsc)/./node_modules/inngest/components/execution/als.js\");\nconst InngestStepTools_js_1 = __webpack_require__(/*! ./InngestStepTools.js */ \"(rsc)/./node_modules/inngest/components/InngestStepTools.js\");\nconst globalFetch = globalThis.fetch;\nconst debug = (0, debug_1.default)(\"inngest:fetch\");\nconst createFetchShim = () => {\n    // eslint-disable-next-line prefer-const\n    let stepFetch;\n    const fetch = async (input, init) => {\n        const ctx = await (0, als_js_1.getAsyncCtx)();\n        if (!ctx) {\n            // Not in a function run\n            if (!stepFetch.fallback) {\n                // TODO Tell the user how to solve\n                throw new Error(\"step.fetch() called outside of a function and had no fallback set\");\n            }\n            debug(\"step.fetch() called outside of a function; falling back to global fetch\");\n            return stepFetch.fallback(input, init);\n        }\n        // In a function run\n        if (ctx.executingStep) {\n            // Inside a step\n            if (!stepFetch.fallback) {\n                // TODO Tell the user how to solve\n                throw new Error(`step.fetch() called inside step \"${ctx.executingStep.id}\" and had no fallback set`);\n            }\n            debug(`step.fetch() called inside step \"${ctx.executingStep.id}\"; falling back to global fetch`);\n            return stepFetch.fallback(input, init);\n        }\n        const targetUrl = new URL(input instanceof Request ? input.url : input.toString());\n        debug(\"step.fetch() shimming request to\", targetUrl.hostname);\n        // Purposefully do not try/cacth this; if it throws then we treat that as a\n        // regular `fetch()` throw, which also would not return a `Response`.\n        const jsonRes = await ctx.ctx.step[InngestStepTools_js_1.gatewaySymbol](`step.fetch: ${targetUrl.hostname}`, input, init);\n        return new Response(jsonRes.body, {\n            headers: jsonRes.headers,\n            status: jsonRes.status,\n        });\n    };\n    const optionsRef = {\n        fallback: globalFetch,\n    };\n    const extras = Object.assign({ config: (options) => {\n            Object.assign(optionsRef, options);\n            Object.assign(stepFetch, optionsRef);\n            return stepFetch;\n        } }, optionsRef);\n    stepFetch = Object.assign(fetch, extras);\n    return stepFetch;\n};\n/**\n * `fetch` is a Fetch API-compatible function that can be used to make any HTTP\n * code durable if it's called within an Inngest function.\n *\n * It will gracefully fall back to the global `fetch` if called outside of this\n * context, and a custom fallback can be set using the `config` method.\n *\n * @example Basic usage\n * ```ts\n * import { fetch } from \"inngest\";\n *\n * const api = new MyProductApi({ fetch });\n * ```\n *\n * @example Setting a custom fallback\n * ```ts\n * import { fetch } from \"inngest\";\n *\n * const api = new MyProductApi({\n *            fetch: fetch.config({ fallback: myCustomFetch }),\n * });\n * ```\n *\n * @example Do not allow fallback\n * ```ts\n * import { fetch } from \"inngest\";\n *\n * const api = new MyProductApi({\n *            fetch: fetch.config({ fallback: undefined }),\n * });\n * ```\n */\nexports.fetch = createFetchShim();\n//# sourceMappingURL=Fetch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0ZldGNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLGdDQUFnQyxtQkFBTyxDQUFDLDJFQUFPO0FBQy9DLGlCQUFpQixtQkFBTyxDQUFDLG9GQUFvQjtBQUM3Qyw4QkFBOEIsbUJBQU8sQ0FBQywwRkFBdUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0UscUJBQXFCO0FBQ3pGO0FBQ0Esc0RBQXNELHFCQUFxQixHQUFHO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0EsK0ZBQStGLG1CQUFtQjtBQUNsSDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBLGtDQUFrQyxPQUFPO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQSxvQ0FBb0MseUJBQXlCO0FBQzdELElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0Esb0NBQW9DLHFCQUFxQjtBQUN6RCxJQUFJO0FBQ0o7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsiL1VzZXJzL2FoYXJwZXIvaW5uZ2VzdC9pbm5nZXN0LXNhbmRib3gvdHMtbmV4dC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0ZldGNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mZXRjaCA9IHZvaWQgMDtcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IGFsc19qc18xID0gcmVxdWlyZShcIi4vZXhlY3V0aW9uL2Fscy5qc1wiKTtcbmNvbnN0IElubmdlc3RTdGVwVG9vbHNfanNfMSA9IHJlcXVpcmUoXCIuL0lubmdlc3RTdGVwVG9vbHMuanNcIik7XG5jb25zdCBnbG9iYWxGZXRjaCA9IGdsb2JhbFRoaXMuZmV0Y2g7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKFwiaW5uZ2VzdDpmZXRjaFwiKTtcbmNvbnN0IGNyZWF0ZUZldGNoU2hpbSA9ICgpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWNvbnN0XG4gICAgbGV0IHN0ZXBGZXRjaDtcbiAgICBjb25zdCBmZXRjaCA9IGFzeW5jIChpbnB1dCwgaW5pdCkgPT4ge1xuICAgICAgICBjb25zdCBjdHggPSBhd2FpdCAoMCwgYWxzX2pzXzEuZ2V0QXN5bmNDdHgpKCk7XG4gICAgICAgIGlmICghY3R4KSB7XG4gICAgICAgICAgICAvLyBOb3QgaW4gYSBmdW5jdGlvbiBydW5cbiAgICAgICAgICAgIGlmICghc3RlcEZldGNoLmZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyBUZWxsIHRoZSB1c2VyIGhvdyB0byBzb2x2ZVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInN0ZXAuZmV0Y2goKSBjYWxsZWQgb3V0c2lkZSBvZiBhIGZ1bmN0aW9uIGFuZCBoYWQgbm8gZmFsbGJhY2sgc2V0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVidWcoXCJzdGVwLmZldGNoKCkgY2FsbGVkIG91dHNpZGUgb2YgYSBmdW5jdGlvbjsgZmFsbGluZyBiYWNrIHRvIGdsb2JhbCBmZXRjaFwiKTtcbiAgICAgICAgICAgIHJldHVybiBzdGVwRmV0Y2guZmFsbGJhY2soaW5wdXQsIGluaXQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEluIGEgZnVuY3Rpb24gcnVuXG4gICAgICAgIGlmIChjdHguZXhlY3V0aW5nU3RlcCkge1xuICAgICAgICAgICAgLy8gSW5zaWRlIGEgc3RlcFxuICAgICAgICAgICAgaWYgKCFzdGVwRmV0Y2guZmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPIFRlbGwgdGhlIHVzZXIgaG93IHRvIHNvbHZlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzdGVwLmZldGNoKCkgY2FsbGVkIGluc2lkZSBzdGVwIFwiJHtjdHguZXhlY3V0aW5nU3RlcC5pZH1cIiBhbmQgaGFkIG5vIGZhbGxiYWNrIHNldGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVidWcoYHN0ZXAuZmV0Y2goKSBjYWxsZWQgaW5zaWRlIHN0ZXAgXCIke2N0eC5leGVjdXRpbmdTdGVwLmlkfVwiOyBmYWxsaW5nIGJhY2sgdG8gZ2xvYmFsIGZldGNoYCk7XG4gICAgICAgICAgICByZXR1cm4gc3RlcEZldGNoLmZhbGxiYWNrKGlucHV0LCBpbml0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YXJnZXRVcmwgPSBuZXcgVVJMKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCA/IGlucHV0LnVybCA6IGlucHV0LnRvU3RyaW5nKCkpO1xuICAgICAgICBkZWJ1ZyhcInN0ZXAuZmV0Y2goKSBzaGltbWluZyByZXF1ZXN0IHRvXCIsIHRhcmdldFVybC5ob3N0bmFtZSk7XG4gICAgICAgIC8vIFB1cnBvc2VmdWxseSBkbyBub3QgdHJ5L2NhY3RoIHRoaXM7IGlmIGl0IHRocm93cyB0aGVuIHdlIHRyZWF0IHRoYXQgYXMgYVxuICAgICAgICAvLyByZWd1bGFyIGBmZXRjaCgpYCB0aHJvdywgd2hpY2ggYWxzbyB3b3VsZCBub3QgcmV0dXJuIGEgYFJlc3BvbnNlYC5cbiAgICAgICAgY29uc3QganNvblJlcyA9IGF3YWl0IGN0eC5jdHguc3RlcFtJbm5nZXN0U3RlcFRvb2xzX2pzXzEuZ2F0ZXdheVN5bWJvbF0oYHN0ZXAuZmV0Y2g6ICR7dGFyZ2V0VXJsLmhvc3RuYW1lfWAsIGlucHV0LCBpbml0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZShqc29uUmVzLmJvZHksIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IGpzb25SZXMuaGVhZGVycyxcbiAgICAgICAgICAgIHN0YXR1czoganNvblJlcy5zdGF0dXMsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3Qgb3B0aW9uc1JlZiA9IHtcbiAgICAgICAgZmFsbGJhY2s6IGdsb2JhbEZldGNoLFxuICAgIH07XG4gICAgY29uc3QgZXh0cmFzID0gT2JqZWN0LmFzc2lnbih7IGNvbmZpZzogKG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob3B0aW9uc1JlZiwgb3B0aW9ucyk7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHN0ZXBGZXRjaCwgb3B0aW9uc1JlZik7XG4gICAgICAgICAgICByZXR1cm4gc3RlcEZldGNoO1xuICAgICAgICB9IH0sIG9wdGlvbnNSZWYpO1xuICAgIHN0ZXBGZXRjaCA9IE9iamVjdC5hc3NpZ24oZmV0Y2gsIGV4dHJhcyk7XG4gICAgcmV0dXJuIHN0ZXBGZXRjaDtcbn07XG4vKipcbiAqIGBmZXRjaGAgaXMgYSBGZXRjaCBBUEktY29tcGF0aWJsZSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIG1ha2UgYW55IEhUVFBcbiAqIGNvZGUgZHVyYWJsZSBpZiBpdCdzIGNhbGxlZCB3aXRoaW4gYW4gSW5uZ2VzdCBmdW5jdGlvbi5cbiAqXG4gKiBJdCB3aWxsIGdyYWNlZnVsbHkgZmFsbCBiYWNrIHRvIHRoZSBnbG9iYWwgYGZldGNoYCBpZiBjYWxsZWQgb3V0c2lkZSBvZiB0aGlzXG4gKiBjb250ZXh0LCBhbmQgYSBjdXN0b20gZmFsbGJhY2sgY2FuIGJlIHNldCB1c2luZyB0aGUgYGNvbmZpZ2AgbWV0aG9kLlxuICpcbiAqIEBleGFtcGxlIEJhc2ljIHVzYWdlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZmV0Y2ggfSBmcm9tIFwiaW5uZ2VzdFwiO1xuICpcbiAqIGNvbnN0IGFwaSA9IG5ldyBNeVByb2R1Y3RBcGkoeyBmZXRjaCB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIFNldHRpbmcgYSBjdXN0b20gZmFsbGJhY2tcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBmZXRjaCB9IGZyb20gXCJpbm5nZXN0XCI7XG4gKlxuICogY29uc3QgYXBpID0gbmV3IE15UHJvZHVjdEFwaSh7XG4gKiAgICAgICAgICAgIGZldGNoOiBmZXRjaC5jb25maWcoeyBmYWxsYmFjazogbXlDdXN0b21GZXRjaCB9KSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGUgRG8gbm90IGFsbG93IGZhbGxiYWNrXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZmV0Y2ggfSBmcm9tIFwiaW5uZ2VzdFwiO1xuICpcbiAqIGNvbnN0IGFwaSA9IG5ldyBNeVByb2R1Y3RBcGkoe1xuICogICAgICAgICAgICBmZXRjaDogZmV0Y2guY29uZmlnKHsgZmFsbGJhY2s6IHVuZGVmaW5lZCB9KSxcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydHMuZmV0Y2ggPSBjcmVhdGVGZXRjaFNoaW0oKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZldGNoLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/Fetch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/Inngest.js":
/*!****************************************************!*\
  !*** ./node_modules/inngest/components/Inngest.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.builtInMiddleware = exports.Inngest = void 0;\nconst api_js_1 = __webpack_require__(/*! ../api/api.js */ \"(rsc)/./node_modules/inngest/api/api.js\");\nconst consts_js_1 = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst crypto_js_1 = __webpack_require__(/*! ../helpers/crypto.js */ \"(rsc)/./node_modules/inngest/helpers/crypto.js\");\nconst devserver_js_1 = __webpack_require__(/*! ../helpers/devserver.js */ \"(rsc)/./node_modules/inngest/helpers/devserver.js\");\nconst env_js_1 = __webpack_require__(/*! ../helpers/env.js */ \"(rsc)/./node_modules/inngest/helpers/env.js\");\nconst errors_js_1 = __webpack_require__(/*! ../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst promises_js_1 = __webpack_require__(/*! ../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\nconst strings_js_1 = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\nconst logger_js_1 = __webpack_require__(/*! ../middleware/logger.js */ \"(rsc)/./node_modules/inngest/middleware/logger.js\");\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst InngestFunction_js_1 = __webpack_require__(/*! ./InngestFunction.js */ \"(rsc)/./node_modules/inngest/components/InngestFunction.js\");\nconst InngestMiddleware_js_1 = __webpack_require__(/*! ./InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\n/**\n * A client used to interact with the Inngest API by sending or reacting to\n * events.\n *\n * To provide event typing, see {@link EventSchemas}.\n *\n * ```ts\n * const inngest = new Inngest({ id: \"my-app\" });\n *\n * // or to provide event typing too\n * const inngest = new Inngest({\n *   id: \"my-app\",\n *   schemas: new EventSchemas().fromRecord<{\n *     \"app/user.created\": {\n *       data: { userId: string };\n *     };\n *   }>(),\n * });\n * ```\n *\n * @public\n */\nclass Inngest {\n    get apiBaseUrl() {\n        return this._apiBaseUrl;\n    }\n    get eventBaseUrl() {\n        return this._eventBaseUrl;\n    }\n    get env() {\n        var _a;\n        return (_a = this.headers[consts_js_1.headerKeys.Environment]) !== null && _a !== void 0 ? _a : null;\n    }\n    get appVersion() {\n        return this._appVersion;\n    }\n    /**\n     * A client used to interact with the Inngest API by sending or reacting to\n     * events.\n     *\n     * To provide event typing, see {@link EventSchemas}.\n     *\n     * ```ts\n     * const inngest = new Inngest({ name: \"My App\" });\n     *\n     * // or to provide event typing too\n     * const inngest = new Inngest({\n     *   name: \"My App\",\n     *   schemas: new EventSchemas().fromRecord<{\n     *     \"app/user.created\": {\n     *       data: { userId: string };\n     *     };\n     *   }>(),\n     * });\n     * ```\n     */\n    constructor(options) {\n        /**\n         * Inngest event key, used to send events to Inngest Cloud.\n         */\n        this.eventKey = \"\";\n        /**\n         * The absolute URL of the Inngest Cloud API.\n         */\n        this.sendEventUrl = new URL(`e/${this.eventKey}`, consts_js_1.defaultInngestEventBaseUrl);\n        this.localFns = [];\n        this.createFunction = (rawOptions, rawTrigger, handler) => {\n            const fn = this._createFunction(rawOptions, rawTrigger, handler);\n            this.localFns.push(fn);\n            return fn;\n        };\n        this._createFunction = (rawOptions, rawTrigger, handler) => {\n            const options = this.sanitizeOptions(rawOptions);\n            const triggers = this.sanitizeTriggers(rawTrigger);\n            return new InngestFunction_js_1.InngestFunction(this, Object.assign(Object.assign({}, options), { triggers }), handler);\n        };\n        this.options = options;\n        const { id, fetch, logger = new logger_js_1.DefaultLogger(), middleware, isDev, schemas, appVersion, } = this.options;\n        if (!id) {\n            // TODO PrettyError\n            throw new Error(\"An `id` must be passed to create an Inngest instance.\");\n        }\n        this.id = id;\n        this._mode = (0, env_js_1.getMode)({\n            explicitMode: typeof isDev === \"boolean\" ? (isDev ? \"dev\" : \"cloud\") : undefined,\n        });\n        this.fetch = (0, env_js_1.getFetch)(fetch);\n        this.inngestApi = new api_js_1.InngestApi({\n            baseUrl: this.apiBaseUrl,\n            signingKey: (0, env_js_1.processEnv)(consts_js_1.envKeys.InngestSigningKey) || \"\",\n            signingKeyFallback: (0, env_js_1.processEnv)(consts_js_1.envKeys.InngestSigningKeyFallback),\n            fetch: this.fetch,\n            mode: this.mode,\n        });\n        this.schemas = schemas;\n        this.loadModeEnvVars();\n        this.logger = logger;\n        this.middleware = this.initializeMiddleware([\n            ...exports.builtInMiddleware,\n            ...(middleware || []),\n        ]);\n        this._appVersion = appVersion;\n    }\n    /**\n     * Returns a `Promise` that resolves when the app is ready and all middleware\n     * has been initialized.\n     */\n    get ready() {\n        return this.middleware.then(() => { });\n    }\n    /**\n     * Set the environment variables for this client. This is useful if you are\n     * passed environment variables at runtime instead of as globals and need to\n     * update the client with those values as requests come in.\n     */\n    setEnvVars(env = (0, env_js_1.allProcessEnv)()) {\n        this.mode = (0, env_js_1.getMode)({ env, client: this });\n        return this;\n    }\n    loadModeEnvVars() {\n        this._apiBaseUrl =\n            this.options.baseUrl ||\n                this.mode[\"env\"][consts_js_1.envKeys.InngestApiBaseUrl] ||\n                this.mode[\"env\"][consts_js_1.envKeys.InngestBaseUrl] ||\n                this.mode.getExplicitUrl(consts_js_1.defaultInngestApiBaseUrl);\n        this._eventBaseUrl =\n            this.options.baseUrl ||\n                this.mode[\"env\"][consts_js_1.envKeys.InngestEventApiBaseUrl] ||\n                this.mode[\"env\"][consts_js_1.envKeys.InngestBaseUrl] ||\n                this.mode.getExplicitUrl(consts_js_1.defaultInngestEventBaseUrl);\n        this.setEventKey(this.options.eventKey || this.mode[\"env\"][consts_js_1.envKeys.InngestEventKey] || \"\");\n        this.headers = (0, env_js_1.inngestHeaders)({\n            inngestEnv: this.options.env,\n            env: this.mode[\"env\"],\n        });\n        this.inngestApi[\"mode\"] = this.mode;\n        this.inngestApi[\"apiBaseUrl\"] = this._apiBaseUrl;\n    }\n    /**\n     * Initialize all passed middleware, running the `register` function on each\n     * in sequence and returning the requested hook registrations.\n     */\n    async initializeMiddleware(middleware = [], opts) {\n        var _a;\n        /**\n         * Wait for the prefix stack to run first; do not trigger ours before this\n         * is complete.\n         */\n        const prefix = await ((_a = opts === null || opts === void 0 ? void 0 : opts.prefixStack) !== null && _a !== void 0 ? _a : []);\n        const stack = middleware.reduce(async (acc, m) => {\n            // Be explicit about waiting for the previous middleware to finish\n            const prev = await acc;\n            const next = await m.init(Object.assign({ client: this }, opts === null || opts === void 0 ? void 0 : opts.registerInput));\n            return [...prev, next];\n        }, Promise.resolve([]));\n        return [...prefix, ...(await stack)];\n    }\n    get mode() {\n        return this._mode;\n    }\n    set mode(m) {\n        this._mode = m;\n        this.loadModeEnvVars();\n    }\n    /**\n     * Given a response from Inngest, relay the error to the caller.\n     */\n    async getResponseError(response, rawBody, foundErr = \"Unknown error\") {\n        let errorMessage = foundErr;\n        if (errorMessage === \"Unknown error\") {\n            switch (response.status) {\n                case 401:\n                    errorMessage = \"Event key Not Found\";\n                    break;\n                case 400:\n                    errorMessage = \"Cannot process event payload\";\n                    break;\n                case 403:\n                    errorMessage = \"Forbidden\";\n                    break;\n                case 404:\n                    errorMessage = \"Event key not found\";\n                    break;\n                case 406:\n                    errorMessage = `${JSON.stringify(await rawBody)}`;\n                    break;\n                case 409:\n                case 412:\n                    errorMessage = \"Event transformation failed\";\n                    break;\n                case 413:\n                    errorMessage = \"Event payload too large\";\n                    break;\n                case 500:\n                    errorMessage = \"Internal server error\";\n                    break;\n                default:\n                    try {\n                        errorMessage = await response.text();\n                    }\n                    catch (err) {\n                        errorMessage = `${JSON.stringify(await rawBody)}`;\n                    }\n                    break;\n            }\n        }\n        return new Error(`Inngest API Error: ${response.status} ${errorMessage}`);\n    }\n    /**\n     * Set the event key for this instance of Inngest. This is useful if for some\n     * reason the key is not available at time of instantiation or present in the\n     * `INNGEST_EVENT_KEY` environment variable.\n     */\n    setEventKey(\n    /**\n     * Inngest event key, used to send events to Inngest Cloud. Use this is your\n     * key is for some reason not available at time of instantiation or present\n     * in the `INNGEST_EVENT_KEY` environment variable.\n     */\n    eventKey) {\n        this.eventKey = eventKey || consts_js_1.dummyEventKey;\n        this.sendEventUrl = new URL(`e/${this.eventKey}`, this.eventBaseUrl || consts_js_1.defaultInngestEventBaseUrl);\n    }\n    eventKeySet() {\n        return Boolean(this.eventKey) && this.eventKey !== consts_js_1.dummyEventKey;\n    }\n    /**\n     * EXPERIMENTAL: This API is not yet stable and may change in the future\n     * without a major version bump.\n     *\n     * Send a Signal to Inngest.\n     */\n    async sendSignal({ signal, data, env, }) {\n        const headers = Object.assign({}, (env ? { [consts_js_1.headerKeys.Environment]: env } : {}));\n        return this._sendSignal({ signal, data, headers });\n    }\n    async _sendSignal({ signal, data, headers, }) {\n        var _a;\n        const res = await this.inngestApi.sendSignal({ signal, data }, Object.assign(Object.assign({}, this.headers), headers));\n        if (res.ok) {\n            return res.value;\n        }\n        throw new Error(`Failed to send signal: ${((_a = res.error) === null || _a === void 0 ? void 0 : _a.error) || \"Unknown error\"}`);\n    }\n    /**\n     * Send one or many events to Inngest. Takes an entire payload (including\n     * name) as each input.\n     *\n     * ```ts\n     * await inngest.send({ name: \"app/user.created\", data: { id: 123 } });\n     * ```\n     *\n     * Returns a promise that will resolve if the event(s) were sent successfully,\n     * else throws with an error explaining what went wrong.\n     *\n     * If you wish to send an event with custom types (i.e. one that hasn't been\n     * generated), make sure to add it when creating your Inngest instance, like\n     * so:\n     *\n     * ```ts\n     * const inngest = new Inngest({\n     *   name: \"My App\",\n     *   schemas: new EventSchemas().fromRecord<{\n     *     \"my/event\": {\n     *       name: \"my/event\";\n     *       data: { bar: string };\n     *     };\n     *   }>(),\n     * });\n     * ```\n     */\n    async send(payload, options) {\n        const headers = Object.assign({}, ((options === null || options === void 0 ? void 0 : options.env) ? { [consts_js_1.headerKeys.Environment]: options.env } : {}));\n        return this._send({ payload, headers });\n    }\n    /**\n     * Internal method for sending an event, used to allow Inngest internals to\n     * further customize the request sent to an Inngest Server.\n     */\n    async _send({ payload, headers, }) {\n        var _a;\n        const nowMillis = new Date().getTime();\n        let maxAttempts = 5;\n        // Attempt to set the event ID seed header. If it fails then disable retries\n        // (but we still want to send the event).\n        try {\n            const entropy = (0, crypto_js_1.createEntropy)(10);\n            const entropyBase64 = Buffer.from(entropy).toString(\"base64\");\n            headers = Object.assign(Object.assign({}, headers), { [consts_js_1.headerKeys.EventIdSeed]: `${nowMillis},${entropyBase64}` });\n        }\n        catch (err) {\n            let message = \"Event-sending retries disabled\";\n            if (err instanceof Error) {\n                message += `: ${err.message}`;\n            }\n            console.debug(message);\n            // Disable retries.\n            maxAttempts = 1;\n        }\n        const hooks = await (0, InngestMiddleware_js_1.getHookStack)(this.middleware, \"onSendEvent\", undefined, {\n            transformInput: (prev, output) => {\n                return Object.assign(Object.assign({}, prev), output);\n            },\n            transformOutput(prev, output) {\n                return {\n                    result: Object.assign(Object.assign({}, prev.result), output === null || output === void 0 ? void 0 : output.result),\n                };\n            },\n        });\n        let payloads = Array.isArray(payload)\n            ? payload\n            : payload\n                ? [payload]\n                : [];\n        const inputChanges = await ((_a = hooks.transformInput) === null || _a === void 0 ? void 0 : _a.call(hooks, {\n            payloads: [...payloads],\n        }));\n        if (inputChanges === null || inputChanges === void 0 ? void 0 : inputChanges.payloads) {\n            payloads = [...inputChanges.payloads];\n        }\n        // Ensure that we always add \"ts\" and \"data\" fields to events. \"ts\" is auto-\n        // filled by the event server so is safe, and adding here fixes Next.js\n        // server action cache issues.\n        payloads = payloads.map((p) => {\n            return Object.assign(Object.assign({}, p), { \n                // Always generate an idempotency ID for an event for retries\n                id: p.id, ts: p.ts || nowMillis, \n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                data: p.data || {} });\n        });\n        const applyHookToOutput = async (arg) => {\n            var _a;\n            const hookOutput = await ((_a = hooks.transformOutput) === null || _a === void 0 ? void 0 : _a.call(hooks, arg));\n            return Object.assign(Object.assign({}, arg.result), hookOutput === null || hookOutput === void 0 ? void 0 : hookOutput.result);\n        };\n        /**\n         * It can be valid for a user to send an empty list of events; if this\n         * happens, show a warning that this may not be intended, but don't throw.\n         */\n        if (!payloads.length) {\n            console.warn((0, errors_js_1.prettyError)({\n                type: \"warn\",\n                whatHappened: \"`inngest.send()` called with no events\",\n                reassurance: \"This is not an error, but you may not have intended to do this.\",\n                consequences: \"The returned promise will resolve, but no events have been sent to Inngest.\",\n                stack: true,\n            }));\n            return await applyHookToOutput({ result: { ids: [] } });\n        }\n        // When sending events, check if the dev server is available.  If so, use the\n        // dev server.\n        let url = this.sendEventUrl.href;\n        /**\n         * If in prod mode and key is not present, fail now.\n         */\n        if (this.mode.isCloud && !this.eventKeySet()) {\n            throw new Error((0, errors_js_1.prettyError)({\n                whatHappened: \"Failed to send event\",\n                consequences: \"Your event or events were not sent to Inngest.\",\n                why: \"We couldn't find an event key to use to send events to Inngest.\",\n                toFixNow: errors_js_1.fixEventKeyMissingSteps,\n            }));\n        }\n        /**\n         * If dev mode has been inferred, try to hit the dev server first to see if\n         * it exists. If it does, use it, otherwise fall back to whatever server we\n         * have configured.\n         *\n         * `INNGEST_BASE_URL` is used to set both dev server and prod URLs, so if a\n         * user has set this it means they have already chosen a URL to hit.\n         */\n        if (this.mode.isDev && this.mode.isInferred && !this.eventBaseUrl) {\n            const devAvailable = await (0, devserver_js_1.devServerAvailable)(consts_js_1.defaultDevServerHost, this.fetch);\n            if (devAvailable) {\n                url = (0, devserver_js_1.devServerUrl)(consts_js_1.defaultDevServerHost, `e/${this.eventKey}`).href;\n            }\n        }\n        const body = await (0, promises_js_1.retryWithBackoff)(async () => {\n            let rawBody;\n            let body;\n            // We don't need to do fallback auth here because this uses event keys and\n            // not signing keys\n            const response = await this.fetch(url, {\n                method: \"POST\",\n                body: (0, strings_js_1.stringify)(payloads),\n                headers: Object.assign(Object.assign({}, this.headers), headers),\n            });\n            try {\n                rawBody = await response.json();\n                body = await types_js_1.sendEventResponseSchema.parseAsync(rawBody);\n            }\n            catch (err) {\n                throw await this.getResponseError(response, rawBody);\n            }\n            if (body.status !== 200 || body.error) {\n                throw await this.getResponseError(response, rawBody, body.error);\n            }\n            return body;\n        }, {\n            maxAttempts,\n            baseDelay: 100,\n        });\n        return await applyHookToOutput({ result: { ids: body.ids } });\n    }\n    get funcs() {\n        return this.localFns;\n    }\n    /**\n     * Runtime-only validation.\n     */\n    sanitizeOptions(options) {\n        if (Object.prototype.hasOwnProperty.call(options, \"fns\")) {\n            // v2 -> v3 migration warning\n            console.warn(`${consts_js_1.logPrefix} InngestFunction: \\`fns\\` option has been deprecated in v3; use \\`middleware\\` instead. See https://www.inngest.com/docs/sdk/migration`);\n        }\n        if (typeof options === \"string\") {\n            // v2 -> v3 runtime migraton warning\n            console.warn(`${consts_js_1.logPrefix} InngestFunction: Creating a function with a string as the first argument has been deprecated in v3; pass an object instead. See https://www.inngest.com/docs/sdk/migration`);\n            return { id: options };\n        }\n        return options;\n    }\n    /**\n     * Runtime-only validation.\n     */\n    sanitizeTriggers(triggers) {\n        if (typeof triggers === \"string\") {\n            // v2 -> v3 migration warning\n            console.warn(`${consts_js_1.logPrefix} InngestFunction: Creating a function with a string as the second argument has been deprecated in v3; pass an object instead. See https://www.inngest.com/docs/sdk/migration`);\n            return [{ event: triggers }];\n        }\n        if (!Array.isArray(triggers)) {\n            return [triggers];\n        }\n        return triggers;\n    }\n}\nexports.Inngest = Inngest;\n/**\n * Default middleware that is included in every client, placed after the user's\n * middleware on the client but before function-level middleware.\n *\n * It is defined here to ensure that comments are included in the generated TS\n * definitions. Without this, we infer the stack of built-in middleware without\n * comments, losing a lot of value.\n *\n * If this is moved, please ensure that using this package in another project\n * can correctly access comments on mutated input and output.\n *\n * This return pattern mimics the output of a `satisfies` suffix; it's used as\n * we support versions of TypeScript prior to the introduction of `satisfies`.\n */\nexports.builtInMiddleware = ((m) => m)([\n    new InngestMiddleware_js_1.InngestMiddleware({\n        name: \"Inngest: Logger\",\n        init({ client }) {\n            return {\n                onFunctionRun(arg) {\n                    const { ctx } = arg;\n                    const metadata = {\n                        runID: ctx.runId,\n                        eventName: ctx.event.name,\n                        functionName: arg.fn.name,\n                    };\n                    let providedLogger = client[\"logger\"];\n                    // create a child logger if the provided logger has child logger implementation\n                    try {\n                        if (\"child\" in providedLogger) {\n                            providedLogger = providedLogger.child(metadata);\n                        }\n                    }\n                    catch (err) {\n                        console.error('failed to create \"childLogger\" with error: ', err);\n                        // no-op\n                    }\n                    const logger = new logger_js_1.ProxyLogger(providedLogger);\n                    return {\n                        transformInput() {\n                            return {\n                                ctx: {\n                                    /**\n                                     * The passed in logger from the user.\n                                     * Defaults to a console logger if not provided.\n                                     */\n                                    logger: logger,\n                                },\n                            };\n                        },\n                        beforeExecution() {\n                            logger.enable();\n                        },\n                        transformOutput({ result: { error } }) {\n                            if (error) {\n                                logger.error(error);\n                            }\n                        },\n                        async beforeResponse() {\n                            await logger.flush();\n                        },\n                    };\n                },\n            };\n        },\n    }),\n]);\n//# sourceMappingURL=Inngest.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/Inngest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestCommHandler.js":
/*!***************************************************************!*\
  !*** ./node_modules/inngest/components/InngestCommHandler.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _RequestSignature_instances, _RequestSignature_verifySignature;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InngestCommHandler = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/inngest/node_modules/debug/src/index.js\"));\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst ServerTiming_js_1 = __webpack_require__(/*! ../helpers/ServerTiming.js */ \"(rsc)/./node_modules/inngest/helpers/ServerTiming.js\");\nconst consts_js_1 = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst devserver_js_1 = __webpack_require__(/*! ../helpers/devserver.js */ \"(rsc)/./node_modules/inngest/helpers/devserver.js\");\nconst enum_js_1 = __webpack_require__(/*! ../helpers/enum.js */ \"(rsc)/./node_modules/inngest/helpers/enum.js\");\nconst env_js_1 = __webpack_require__(/*! ../helpers/env.js */ \"(rsc)/./node_modules/inngest/helpers/env.js\");\nconst errors_js_1 = __webpack_require__(/*! ../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst functions_js_1 = __webpack_require__(/*! ../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\nconst net_js_1 = __webpack_require__(/*! ../helpers/net.js */ \"(rsc)/./node_modules/inngest/helpers/net.js\");\nconst promises_js_1 = __webpack_require__(/*! ../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\nconst stream_js_1 = __webpack_require__(/*! ../helpers/stream.js */ \"(rsc)/./node_modules/inngest/helpers/stream.js\");\nconst strings_js_1 = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst version_js_1 = __webpack_require__(/*! ../version.js */ \"(rsc)/./node_modules/inngest/version.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ./execution/InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\n/**\n * A schema for the response from Inngest when registering.\n */\nconst registerResSchema = zod_1.z.object({\n    status: zod_1.z.number().default(200),\n    skipped: zod_1.z.boolean().optional().default(false),\n    modified: zod_1.z.boolean().optional().default(false),\n    error: zod_1.z.string().default(\"Successfully registered\"),\n});\n/**\n * `InngestCommHandler` is a class for handling incoming requests from Inngest (or\n * Inngest's tooling such as the dev server or CLI) and taking appropriate\n * action for any served functions.\n *\n * All handlers (Next.js, RedwoodJS, Remix, Deno Fresh, etc.) are created using\n * this class; the exposed `serve` function will - most commonly - create an\n * instance of `InngestCommHandler` and then return `instance.createHandler()`.\n *\n * See individual parameter details for more information, or see the\n * source code for an existing handler, e.g.\n * {@link https://github.com/inngest/inngest-js/blob/main/src/next.ts}\n *\n * @example\n * ```\n * // my-custom-handler.ts\n * import {\n *   InngestCommHandler,\n *   type ServeHandlerOptions,\n * } from \"./components/InngestCommHandler\";\n *\n * export const serve = (options: ServeHandlerOptions) => {\n *   const handler = new InngestCommHandler({\n *     frameworkName: \"my-custom-handler\",\n *     ...options,\n *     handler: (req: Request) => {\n *       return {\n *         body: () => req.json(),\n *         headers: (key) => req.headers.get(key),\n *         method: () => req.method,\n *         url: () => new URL(req.url, `https://${req.headers.get(\"host\") || \"\"}`),\n *         transformResponse: ({ body, status, headers }) => {\n *           return new Response(body, { status, headers });\n *         },\n *       };\n *     },\n *   });\n *\n *   return handler.createHandler();\n * };\n * ```\n *\n * @public\n */\nclass InngestCommHandler {\n    constructor(options) {\n        var _a;\n        /**\n         * A private collection of functions that are being served. This map is used\n         * to find and register functions when interacting with Inngest Cloud.\n         */\n        this.fns = {};\n        this.env = (0, env_js_1.allProcessEnv)();\n        // Set input options directly so we can reference them later\n        this._options = options;\n        /**\n         * v2 -> v3 migration error.\n         *\n         * If a serve handler is passed a client as the first argument, it'll be\n         * spread in to these options. We should be able to detect this by picking\n         * up a unique property on the object.\n         */\n        if (Object.prototype.hasOwnProperty.call(options, \"eventKey\")) {\n            throw new Error(`${consts_js_1.logPrefix} You've passed an Inngest client as the first argument to your serve handler. This is no longer supported in v3; please pass the Inngest client as the \\`client\\` property of an options object instead. See https://www.inngest.com/docs/sdk/migration`);\n        }\n        this.frameworkName = options.frameworkName;\n        this.client = options.client;\n        if (options.id) {\n            console.warn(`${consts_js_1.logPrefix} The \\`id\\` serve option is deprecated and will be removed in v4`);\n        }\n        this.id = options.id || this.client.id;\n        this.handler = options.handler;\n        /**\n         * Provide a hidden option to allow expired signatures to be accepted during\n         * testing.\n         */\n        this.allowExpiredSignatures = Boolean(\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, prefer-rest-params\n        (_a = arguments[\"0\"]) === null || _a === void 0 ? void 0 : _a.__testingAllowExpiredSignatures);\n        // Ensure we filter any undefined functions in case of missing imports.\n        this.rawFns = options.functions.filter(Boolean);\n        if (this.rawFns.length !== options.functions.length) {\n            // TODO PrettyError\n            console.warn(`Some functions passed to serve() are undefined and misconfigured.  Please check your imports.`);\n        }\n        this.fns = this.rawFns.reduce((acc, fn) => {\n            const configs = fn[\"getConfig\"]({\n                baseUrl: new URL(\"https://example.com\"),\n                appPrefix: this.id,\n            });\n            const fns = configs.reduce((acc, { id }, index) => {\n                return Object.assign(Object.assign({}, acc), { [id]: { fn, onFailure: Boolean(index) } });\n            }, {});\n            configs.forEach(({ id }) => {\n                if (acc[id]) {\n                    // TODO PrettyError\n                    throw new Error(`Duplicate function ID \"${id}\"; please change a function's name or provide an explicit ID to avoid conflicts.`);\n                }\n            });\n            return Object.assign(Object.assign({}, acc), fns);\n        }, {});\n        this.inngestRegisterUrl = new URL(\"/fn/register\", this.apiBaseUrl);\n        this.signingKey = options.signingKey;\n        this.signingKeyFallback = options.signingKeyFallback;\n        this._serveHost = options.serveHost || this.env[consts_js_1.envKeys.InngestServeHost];\n        this._servePath = options.servePath || this.env[consts_js_1.envKeys.InngestServePath];\n        this.skipSignatureValidation = options.skipSignatureValidation || false;\n        const defaultLogLevel = \"info\";\n        this.logLevel = zod_1.z\n            .enum(types_js_1.logLevels)\n            .default(defaultLogLevel)\n            .catch((ctx) => {\n            this.log(\"warn\", `Unknown log level passed: ${String(ctx.input)}; defaulting to ${defaultLogLevel}`);\n            return defaultLogLevel;\n        })\n            .parse(options.logLevel || this.env[consts_js_1.envKeys.InngestLogLevel]);\n        if (this.logLevel === \"debug\") {\n            /**\n             * `debug` is an old library; sometimes its runtime detection doesn't work\n             * for newer pairings of framework/runtime.\n             *\n             * One silly symptom of this is that `Debug()` returns an anonymous\n             * function with no extra properties instead of a `Debugger` instance if\n             * the wrong code is consumed following a bad detection. This results in\n             * the following `.enable()` call failing, so we just try carefully to\n             * enable it here.\n             */\n            if (debug_1.default.enable && typeof debug_1.default.enable === \"function\") {\n                debug_1.default.enable(`${consts_js_1.debugPrefix}:*`);\n            }\n        }\n        const defaultStreamingOption = false;\n        this.streaming = zod_1.z\n            .union([zod_1.z.enum([\"allow\", \"force\"]), zod_1.z.literal(false)])\n            .default(defaultStreamingOption)\n            .catch((ctx) => {\n            this.log(\"warn\", `Unknown streaming option passed: ${String(ctx.input)}; defaulting to ${String(defaultStreamingOption)}`);\n            return defaultStreamingOption;\n        })\n            .parse(options.streaming || this.env[consts_js_1.envKeys.InngestStreaming]);\n        this.fetch = options.fetch ? (0, env_js_1.getFetch)(options.fetch) : this.client[\"fetch\"];\n    }\n    /**\n     * Get the API base URL for the Inngest API.\n     *\n     * This is a getter to encourage checking the environment for the API base URL\n     * each time it's accessed, as it may change during execution.\n     */\n    get apiBaseUrl() {\n        return (this._options.baseUrl ||\n            this.env[consts_js_1.envKeys.InngestApiBaseUrl] ||\n            this.env[consts_js_1.envKeys.InngestBaseUrl] ||\n            this.client.apiBaseUrl ||\n            consts_js_1.defaultInngestApiBaseUrl);\n    }\n    /**\n     * Get the event API base URL for the Inngest API.\n     *\n     * This is a getter to encourage checking the environment for the event API\n     * base URL each time it's accessed, as it may change during execution.\n     */\n    get eventApiBaseUrl() {\n        return (this._options.baseUrl ||\n            this.env[consts_js_1.envKeys.InngestEventApiBaseUrl] ||\n            this.env[consts_js_1.envKeys.InngestBaseUrl] ||\n            this.client.eventBaseUrl ||\n            consts_js_1.defaultInngestEventBaseUrl);\n    }\n    /**\n     * The host used to access the Inngest serve endpoint, e.g.:\n     *\n     *     \"https://myapp.com\"\n     *\n     * By default, the library will try to infer this using request details such\n     * as the \"Host\" header and request path, but sometimes this isn't possible\n     * (e.g. when running in a more controlled environments such as AWS Lambda or\n     * when dealing with proxies/redirects).\n     *\n     * Provide the custom hostname here to ensure that the path is reported\n     * correctly when registering functions with Inngest.\n     *\n     * To also provide a custom path, use `servePath`.\n     */\n    get serveHost() {\n        return this._serveHost || this.env[consts_js_1.envKeys.InngestServeHost];\n    }\n    /**\n     * The path to the Inngest serve endpoint. e.g.:\n     *\n     *     \"/some/long/path/to/inngest/endpoint\"\n     *\n     * By default, the library will try to infer this using request details such\n     * as the \"Host\" header and request path, but sometimes this isn't possible\n     * (e.g. when running in a more controlled environments such as AWS Lambda or\n     * when dealing with proxies/redirects).\n     *\n     * Provide the custom path (excluding the hostname) here to ensure that the\n     * path is reported correctly when registering functions with Inngest.\n     *\n     * To also provide a custom hostname, use `serveHost`.\n     *\n     * This is a getter to encourage checking the environment for the serve path\n     * each time it's accessed, as it may change during execution.\n     */\n    get servePath() {\n        return this._servePath || this.env[consts_js_1.envKeys.InngestServePath];\n    }\n    get hashedEventKey() {\n        if (!this.client[\"eventKey\"] || this.client[\"eventKey\"] === consts_js_1.dummyEventKey) {\n            return undefined;\n        }\n        return (0, strings_js_1.hashEventKey)(this.client[\"eventKey\"]);\n    }\n    // hashedSigningKey creates a sha256 checksum of the signing key with the\n    // same signing key prefix.\n    get hashedSigningKey() {\n        if (!this.signingKey) {\n            return undefined;\n        }\n        return (0, strings_js_1.hashSigningKey)(this.signingKey);\n    }\n    get hashedSigningKeyFallback() {\n        if (!this.signingKeyFallback) {\n            return undefined;\n        }\n        return (0, strings_js_1.hashSigningKey)(this.signingKeyFallback);\n    }\n    /**\n     * Returns a `boolean` representing whether this handler will stream responses\n     * or not. Takes into account the user's preference and the platform's\n     * capabilities.\n     */\n    async shouldStream(actions) {\n        const rawProbe = await actions.queryStringWithDefaults(\"testing for probe\", consts_js_1.queryKeys.Probe);\n        if (rawProbe !== undefined) {\n            return false;\n        }\n        // We must be able to stream responses to continue.\n        if (!actions.transformStreamingResponse) {\n            return false;\n        }\n        // If the user has forced streaming, we should always stream.\n        if (this.streaming === \"force\") {\n            return true;\n        }\n        // If the user has allowed streaming, we should stream if the platform\n        // supports it.\n        return (this.streaming === \"allow\" &&\n            (0, env_js_1.platformSupportsStreaming)(this.frameworkName, this.env));\n    }\n    /**\n     * `createHandler` should be used to return a type-equivalent version of the\n     * `handler` specified during instantiation.\n     *\n     * @example\n     * ```\n     * // my-custom-handler.ts\n     * import {\n     *   InngestCommHandler,\n     *   type ServeHandlerOptions,\n     * } from \"./components/InngestCommHandler\";\n     *\n     * export const serve = (options: ServeHandlerOptions) => {\n     *   const handler = new InngestCommHandler({\n     *     frameworkName: \"my-custom-handler\",\n     *     ...options,\n     *     handler: (req: Request) => {\n     *       return {\n     *         body: () => req.json(),\n     *         headers: (key) => req.headers.get(key),\n     *         method: () => req.method,\n     *         url: () => new URL(req.url, `https://${req.headers.get(\"host\") || \"\"}`),\n     *         transformResponse: ({ body, status, headers }) => {\n     *           return new Response(body, { status, headers });\n     *         },\n     *       };\n     *     },\n     *   });\n     *\n     *   return handler.createHandler();\n     * };\n     * ```\n     */\n    createHandler() {\n        const handler = async (...args) => {\n            var _a, _b;\n            const timer = new ServerTiming_js_1.ServerTiming();\n            /**\n             * Used for testing, allow setting action overrides externally when\n             * calling the handler. Always search the final argument.\n             */\n            const lastArg = args[args.length - 1];\n            const actionOverrides = typeof lastArg === \"object\" &&\n                lastArg !== null &&\n                \"actionOverrides\" in lastArg &&\n                typeof lastArg[\"actionOverrides\"] === \"object\" &&\n                lastArg[\"actionOverrides\"] !== null\n                ? lastArg[\"actionOverrides\"]\n                : {};\n            /**\n             * We purposefully `await` the handler, as it could be either sync or\n             * async.\n             */\n            const rawActions = Object.assign(Object.assign({}, (await timer\n                .wrap(\"handler\", () => this.handler(...args))\n                .catch((0, errors_js_1.rethrowError)(\"Serve handler failed to run\")))), actionOverrides);\n            /**\n             * Map over every `action` in `rawActions` and create a new `actions`\n             * object where each function is safely promisified with each access\n             * requiring a reason.\n             *\n             * This helps us provide high quality errors about what's going wrong for\n             * each access without having to wrap every access in a try/catch.\n             */\n            const promisifiedActions = Object.entries(rawActions).reduce((acc, [key, value]) => {\n                if (typeof value !== \"function\") {\n                    return acc;\n                }\n                return Object.assign(Object.assign({}, acc), { [key]: (reason, ...args) => {\n                        const errMessage = [\n                            `Failed calling \\`${key}\\` from serve handler`,\n                            reason,\n                        ]\n                            .filter(Boolean)\n                            .join(\" when \");\n                        const fn = () => value(...args);\n                        return (0, promises_js_1.runAsPromise)(fn)\n                            .catch((0, errors_js_1.rethrowError)(errMessage))\n                            .catch((err) => {\n                            this.log(\"error\", err);\n                            throw err;\n                        });\n                    } });\n            }, {});\n            /**\n             * Mapped promisified handlers from userland `serve()` function mixed in\n             * with some helpers.\n             */\n            const actions = Object.assign(Object.assign(Object.assign({}, promisifiedActions), { queryStringWithDefaults: async (reason, key) => {\n                    var _a;\n                    const url = await actions.url(reason);\n                    const ret = (await ((_a = actions.queryString) === null || _a === void 0 ? void 0 : _a.call(actions, reason, key, url))) ||\n                        url.searchParams.get(key) ||\n                        undefined;\n                    return ret;\n                } }), actionOverrides);\n            const [env, expectedServerKind] = await Promise.all([\n                (_a = actions.env) === null || _a === void 0 ? void 0 : _a.call(actions, \"starting to handle request\"),\n                actions.headers(\"checking expected server kind\", consts_js_1.headerKeys.InngestServerKind),\n            ]);\n            // Always make sure to merge whatever env we've been given with\n            // `process.env`; some platforms may not provide all the necessary\n            // environment variables or may use two sources.\n            this.env = Object.assign(Object.assign({}, (0, env_js_1.allProcessEnv)()), env);\n            const getInngestHeaders = () => (0, env_js_1.inngestHeaders)({\n                env: this.env,\n                framework: this.frameworkName,\n                client: this.client,\n                expectedServerKind: expectedServerKind || undefined,\n                extras: {\n                    \"Server-Timing\": timer.getHeader(),\n                },\n            });\n            const assumedMode = (0, env_js_1.getMode)({ env: this.env, client: this.client });\n            if (assumedMode.isExplicit) {\n                this._mode = assumedMode;\n            }\n            else {\n                const serveIsProd = await ((_b = actions.isProduction) === null || _b === void 0 ? void 0 : _b.call(actions, \"starting to handle request\"));\n                if (typeof serveIsProd === \"boolean\") {\n                    this._mode = new env_js_1.Mode({\n                        type: serveIsProd ? \"cloud\" : \"dev\",\n                        isExplicit: false,\n                    });\n                }\n                else {\n                    this._mode = assumedMode;\n                }\n            }\n            this.upsertKeysFromEnv();\n            const methodP = actions.method(\"starting to handle request\");\n            const headerPromises = [\n                consts_js_1.headerKeys.TraceParent,\n                consts_js_1.headerKeys.TraceState,\n            ].map(async (header) => {\n                const value = await actions.headers(`fetching ${header} for forwarding`, header);\n                return { header, value };\n            });\n            const contentLength = await actions\n                .headers(\"checking signature for request\", consts_js_1.headerKeys.ContentLength)\n                .then((value) => {\n                if (!value) {\n                    return undefined;\n                }\n                return parseInt(value, 10);\n            });\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const [signature, method, body] = await Promise.all([\n                actions\n                    .headers(\"checking signature for request\", consts_js_1.headerKeys.Signature)\n                    .then((headerSignature) => {\n                    return headerSignature !== null && headerSignature !== void 0 ? headerSignature : undefined;\n                }),\n                methodP,\n                methodP.then((method) => {\n                    if (method === \"POST\" || method === \"PUT\") {\n                        if (!contentLength) {\n                            // Return empty string because req.json() will throw an error.\n                            return \"\";\n                        }\n                        return actions.body(`checking body for request signing as method is ${method}`);\n                    }\n                    return \"\";\n                }),\n            ]);\n            const signatureValidation = this.validateSignature(signature, body);\n            const headersToForwardP = Promise.all(headerPromises).then((fetchedHeaders) => {\n                return fetchedHeaders.reduce((acc, { header, value }) => {\n                    if (value) {\n                        acc[header] = value;\n                    }\n                    return acc;\n                }, {});\n            });\n            const actionRes = timer.wrap(\"action\", () => this.handleAction({\n                actions,\n                timer,\n                getInngestHeaders,\n                reqArgs: args,\n                signatureValidation,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                body,\n                method,\n                headers: headersToForwardP,\n            }));\n            /**\n             * Prepares an action response by merging returned data to provide\n             * trailing information such as `Server-Timing` headers.\n             *\n             * It should always prioritize the headers returned by the action, as they\n             * may contain important information such as `Content-Type`.\n             */\n            const prepareActionRes = async (res) => {\n                var _a;\n                const headers = Object.assign(Object.assign(Object.assign(Object.assign({}, getInngestHeaders()), (await headersToForwardP)), res.headers), (res.version === null\n                    ? {}\n                    : {\n                        [consts_js_1.headerKeys.RequestVersion]: ((_a = res.version) !== null && _a !== void 0 ? _a : InngestExecution_js_1.PREFERRED_EXECUTION_VERSION).toString(),\n                    }));\n                let signature;\n                try {\n                    signature = await signatureValidation.then((result) => {\n                        if (!result.success || !result.keyUsed) {\n                            return undefined;\n                        }\n                        return this.getResponseSignature(result.keyUsed, res.body);\n                    });\n                }\n                catch (err) {\n                    // If we fail to sign, retun a 500 with the error.\n                    return Object.assign(Object.assign({}, res), { headers, body: (0, strings_js_1.stringify)((0, errors_js_1.serializeError)(err)), status: 500 });\n                }\n                if (signature) {\n                    headers[consts_js_1.headerKeys.Signature] = signature;\n                }\n                return Object.assign(Object.assign({}, res), { headers });\n            };\n            if (await this.shouldStream(actions)) {\n                const method = await actions.method(\"starting streaming response\");\n                if (method === \"POST\") {\n                    const { stream, finalize } = await (0, stream_js_1.createStream)();\n                    /**\n                     * Errors are handled by `handleAction` here to ensure that an\n                     * appropriate response is always given.\n                     */\n                    void actionRes.then((res) => {\n                        return finalize(prepareActionRes(res));\n                    });\n                    return timer.wrap(\"res\", () => {\n                        var _a;\n                        return (_a = actions.transformStreamingResponse) === null || _a === void 0 ? void 0 : _a.call(actions, \"starting streaming response\", {\n                            status: 201,\n                            headers: getInngestHeaders(),\n                            body: stream,\n                            version: null,\n                        });\n                    });\n                }\n            }\n            return timer.wrap(\"res\", async () => {\n                return actionRes.then(prepareActionRes).then((actionRes) => {\n                    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                    return actions.transformResponse(\"sending back response\", actionRes);\n                });\n            });\n        };\n        /**\n         * Some platforms check (at runtime) the length of the function being used\n         * to handle an endpoint. If this is a variadic function, it will fail that\n         * check.\n         *\n         * Therefore, we expect the arguments accepted to be the same length as the\n         * `handler` function passed internally.\n         *\n         * We also set a name to avoid a common useless name in tracing such as\n         * `\"anonymous\"` or `\"bound function\"`.\n         *\n         * https://github.com/getsentry/sentry-javascript/issues/3284\n         */\n        Object.defineProperties(handler, {\n            name: {\n                value: \"InngestHandler\",\n            },\n            length: {\n                value: this.handler.length,\n            },\n        });\n        return handler;\n    }\n    get mode() {\n        return this._mode;\n    }\n    set mode(m) {\n        this._mode = m;\n        if (m) {\n            this.client[\"mode\"] = m;\n        }\n    }\n    /**\n     * Given a set of functions to check if an action is available from the\n     * instance's handler, enact any action that is found.\n     *\n     * This method can fetch varying payloads of data, but ultimately is the place\n     * where _decisions_ are made regarding functionality.\n     *\n     * For example, if we find that we should be viewing the UI, this function\n     * will decide whether the UI should be visible based on the payload it has\n     * found (e.g. env vars, options, etc).\n     */\n    async handleAction({ actions, timer, getInngestHeaders, reqArgs, signatureValidation, body, method, headers, }) {\n        var _a;\n        // This is when the request body is completely missing; it does not\n        // include an empty body. This commonly happens when the HTTP framework\n        // doesn't have body parsing middleware.\n        const isMissingBody = body === undefined;\n        try {\n            let url = await actions.url(\"starting to handle request\");\n            if (method === \"POST\") {\n                if (isMissingBody) {\n                    this.log(\"error\", \"Missing body when executing, possibly due to missing request body middleware\");\n                    return {\n                        status: 500,\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        },\n                        body: (0, strings_js_1.stringify)((0, errors_js_1.serializeError)(new Error(\"Missing request body when executing, possibly due to missing request body middleware\"))),\n                        version: undefined,\n                    };\n                }\n                const validationResult = await signatureValidation;\n                if (!validationResult.success) {\n                    return {\n                        status: 401,\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        },\n                        body: (0, strings_js_1.stringify)((0, errors_js_1.serializeError)(validationResult.err)),\n                        version: undefined,\n                    };\n                }\n                const rawProbe = await actions.queryStringWithDefaults(\"testing for probe\", consts_js_1.queryKeys.Probe);\n                if (rawProbe) {\n                    const probe = (0, enum_js_1.enumFromValue)(consts_js_1.probe, rawProbe);\n                    if (!probe) {\n                        // If we're here, we've received a probe that we don't recognize.\n                        // Fail.\n                        return {\n                            status: 400,\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: (0, strings_js_1.stringify)((0, errors_js_1.serializeError)(new Error(`Unknown probe \"${rawProbe}\"`))),\n                            version: undefined,\n                        };\n                    }\n                    // Provide actions for every probe available.\n                    const probeActions = {\n                        [consts_js_1.probe.Trust]: () => ({\n                            status: 200,\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: \"\",\n                            version: undefined,\n                        }),\n                    };\n                    return probeActions[probe]();\n                }\n                const fnId = await actions.queryStringWithDefaults(\"processing run request\", consts_js_1.queryKeys.FnId);\n                if (!fnId) {\n                    // TODO PrettyError\n                    throw new Error(\"No function ID found in request\");\n                }\n                const stepId = (await actions.queryStringWithDefaults(\"processing run request\", consts_js_1.queryKeys.StepId)) || null;\n                const { version, result } = this.runStep({\n                    functionId: fnId,\n                    data: body,\n                    stepId,\n                    timer,\n                    reqArgs,\n                    headers: await headers,\n                });\n                const stepOutput = await result;\n                /**\n                 * Functions can return `undefined`, but we'll always convert this to\n                 * `null`, as this is appropriately serializable by JSON.\n                 */\n                const opDataUndefinedToNull = (op) => {\n                    op.data = (0, functions_js_1.undefinedToNull)(op.data);\n                    return op;\n                };\n                const resultHandlers = {\n                    \"function-rejected\": (result) => {\n                        return {\n                            status: result.retriable ? 500 : 400,\n                            headers: Object.assign({ \"Content-Type\": \"application/json\", [consts_js_1.headerKeys.NoRetry]: result.retriable ? \"false\" : \"true\" }, (typeof result.retriable === \"string\"\n                                ? { [consts_js_1.headerKeys.RetryAfter]: result.retriable }\n                                : {})),\n                            body: (0, strings_js_1.stringify)((0, functions_js_1.undefinedToNull)(result.error)),\n                            version,\n                        };\n                    },\n                    \"function-resolved\": (result) => {\n                        return {\n                            status: 200,\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: (0, strings_js_1.stringify)((0, functions_js_1.undefinedToNull)(result.data)),\n                            version,\n                        };\n                    },\n                    \"step-not-found\": (result) => {\n                        return {\n                            status: 500,\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                                [consts_js_1.headerKeys.NoRetry]: \"false\",\n                            },\n                            body: (0, strings_js_1.stringify)({\n                                error: `Could not find step \"${result.step.displayName || result.step.id}\" to run; timed out`,\n                            }),\n                            version,\n                        };\n                    },\n                    \"step-ran\": (result) => {\n                        const step = opDataUndefinedToNull(result.step);\n                        return {\n                            status: 206,\n                            headers: Object.assign({ \"Content-Type\": \"application/json\" }, (typeof result.retriable !== \"undefined\"\n                                ? Object.assign({ [consts_js_1.headerKeys.NoRetry]: result.retriable ? \"false\" : \"true\" }, (typeof result.retriable === \"string\"\n                                    ? { [consts_js_1.headerKeys.RetryAfter]: result.retriable }\n                                    : {})) : {})),\n                            body: (0, strings_js_1.stringify)([step]),\n                            version,\n                        };\n                    },\n                    \"steps-found\": (result) => {\n                        const steps = result.steps.map(opDataUndefinedToNull);\n                        return {\n                            status: 206,\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: (0, strings_js_1.stringify)(steps),\n                            version,\n                        };\n                    },\n                };\n                const handler = resultHandlers[stepOutput.type];\n                try {\n                    return await handler(stepOutput);\n                }\n                catch (err) {\n                    this.log(\"error\", \"Error handling execution result\", err);\n                    throw err;\n                }\n            }\n            // TODO: This feels hacky, so we should probably make it not hacky.\n            const env = (_a = getInngestHeaders()[consts_js_1.headerKeys.Environment]) !== null && _a !== void 0 ? _a : null;\n            if (method === \"GET\") {\n                return {\n                    status: 200,\n                    body: (0, strings_js_1.stringify)(await this.introspectionBody({\n                        actions,\n                        env,\n                        signatureValidation,\n                        url,\n                    })),\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    version: undefined,\n                };\n            }\n            if (method === \"PUT\") {\n                const [deployId, inBandSyncRequested] = await Promise.all([\n                    actions\n                        .queryStringWithDefaults(\"processing deployment request\", consts_js_1.queryKeys.DeployId)\n                        .then((deployId) => {\n                        return deployId === \"undefined\" ? undefined : deployId;\n                    }),\n                    Promise.resolve((0, env_js_1.parseAsBoolean)(this.env[consts_js_1.envKeys.InngestAllowInBandSync]))\n                        .then((allowInBandSync) => {\n                        if (allowInBandSync !== undefined && !allowInBandSync) {\n                            return consts_js_1.syncKind.OutOfBand;\n                        }\n                        return actions.headers(\"processing deployment request\", consts_js_1.headerKeys.InngestSyncKind);\n                    })\n                        .then((kind) => {\n                        return kind === consts_js_1.syncKind.InBand;\n                    }),\n                ]);\n                if (inBandSyncRequested) {\n                    if (isMissingBody) {\n                        this.log(\"error\", \"Missing body when syncing, possibly due to missing request body middleware\");\n                        return {\n                            status: 500,\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            body: (0, strings_js_1.stringify)((0, errors_js_1.serializeError)(new Error(\"Missing request body when syncing, possibly due to missing request body middleware\"))),\n                            version: undefined,\n                        };\n                    }\n                    // Validation can be successful if we're in dev mode and did not\n                    // actually validate a key. In this case, also check that we did indeed\n                    // use a particular key to validate.\n                    const sigCheck = await signatureValidation;\n                    if (!sigCheck.success) {\n                        return {\n                            status: 401,\n                            body: (0, strings_js_1.stringify)({\n                                code: \"sig_verification_failed\",\n                            }),\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            version: undefined,\n                        };\n                    }\n                    const res = types_js_1.inBandSyncRequestBodySchema.safeParse(body);\n                    if (!res.success) {\n                        return {\n                            status: 400,\n                            body: (0, strings_js_1.stringify)({\n                                code: \"invalid_request\",\n                                message: res.error.message,\n                            }),\n                            headers: {\n                                \"Content-Type\": \"application/json\",\n                            },\n                            version: undefined,\n                        };\n                    }\n                    // We can trust the URL here because it's coming from\n                    // signature-verified request.\n                    url = this.reqUrl(new URL(res.data.url));\n                    // This should be an in-band sync\n                    const respBody = await this.inBandRegisterBody({\n                        actions,\n                        deployId,\n                        env,\n                        signatureValidation,\n                        url,\n                    });\n                    return {\n                        status: 200,\n                        body: (0, strings_js_1.stringify)(respBody),\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                            [consts_js_1.headerKeys.InngestSyncKind]: consts_js_1.syncKind.InBand,\n                        },\n                        version: undefined,\n                    };\n                }\n                // If we're here, this is a legacy out-of-band sync\n                const { status, message, modified } = await this.register(this.reqUrl(url), deployId, getInngestHeaders);\n                return {\n                    status,\n                    body: (0, strings_js_1.stringify)({ message, modified }),\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        [consts_js_1.headerKeys.InngestSyncKind]: consts_js_1.syncKind.OutOfBand,\n                    },\n                    version: undefined,\n                };\n            }\n        }\n        catch (err) {\n            return {\n                status: 500,\n                body: (0, strings_js_1.stringify)(Object.assign({ type: \"internal\" }, (0, errors_js_1.serializeError)(err))),\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                version: undefined,\n            };\n        }\n        return {\n            status: 405,\n            body: JSON.stringify({\n                message: \"No action found; request was likely not POST, PUT, or GET\",\n                mode: this._mode,\n            }),\n            headers: {},\n            version: undefined,\n        };\n    }\n    runStep({ functionId, stepId, data, timer, reqArgs, headers, }) {\n        var _a, _b;\n        const fn = this.fns[functionId];\n        if (!fn) {\n            // TODO PrettyError\n            throw new Error(`Could not find function with ID \"${functionId}\"`);\n        }\n        const immediateFnData = (0, functions_js_1.parseFnData)(data);\n        let { version } = immediateFnData;\n        // Handle opting in to optimized parallelism in v3.\n        if (version === InngestExecution_js_1.ExecutionVersion.V1 &&\n            ((_b = (_a = fn.fn)[\"shouldOptimizeParallelism\"]) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n            version = InngestExecution_js_1.ExecutionVersion.V2;\n        }\n        const result = (0, promises_js_1.runAsPromise)(async () => {\n            const anyFnData = await (0, functions_js_1.fetchAllFnData)({\n                data: immediateFnData,\n                api: this.client[\"inngestApi\"],\n                version,\n            });\n            if (!anyFnData.ok) {\n                throw new Error(anyFnData.error);\n            }\n            const executionStarters = ((s) => s)({\n                [InngestExecution_js_1.ExecutionVersion.V0]: ({ event, events, steps, ctx, version }) => {\n                    var _a, _b, _c;\n                    const stepState = Object.entries(steps !== null && steps !== void 0 ? steps : {}).reduce((acc, [id, data]) => {\n                        return Object.assign(Object.assign({}, acc), { \n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            [id]: { id, data } });\n                    }, {});\n                    return {\n                        version,\n                        partialOptions: {\n                            client: this.client,\n                            runId: (ctx === null || ctx === void 0 ? void 0 : ctx.run_id) || \"\",\n                            data: {\n                                event: event,\n                                events: events,\n                                runId: (ctx === null || ctx === void 0 ? void 0 : ctx.run_id) || \"\",\n                                attempt: (_a = ctx === null || ctx === void 0 ? void 0 : ctx.attempt) !== null && _a !== void 0 ? _a : 0,\n                            },\n                            stepState,\n                            requestedRunStep: stepId === \"step\" ? undefined : stepId || undefined,\n                            timer,\n                            isFailureHandler: fn.onFailure,\n                            stepCompletionOrder: (_c = (_b = ctx === null || ctx === void 0 ? void 0 : ctx.stack) === null || _b === void 0 ? void 0 : _b.stack) !== null && _c !== void 0 ? _c : [],\n                            reqArgs,\n                            headers,\n                        },\n                    };\n                },\n                [InngestExecution_js_1.ExecutionVersion.V1]: ({ event, events, steps, ctx, version }) => {\n                    var _a, _b, _c;\n                    const stepState = Object.entries(steps !== null && steps !== void 0 ? steps : {}).reduce((acc, [id, result]) => {\n                        return Object.assign(Object.assign({}, acc), { [id]: result.type === \"data\"\n                                ? // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                                    { id, data: result.data }\n                                : result.type === \"input\"\n                                    ? // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                                        { id, input: result.input }\n                                    : { id, error: result.error } });\n                    }, {});\n                    return {\n                        version,\n                        partialOptions: {\n                            client: this.client,\n                            runId: (ctx === null || ctx === void 0 ? void 0 : ctx.run_id) || \"\",\n                            data: {\n                                event: event,\n                                events: events,\n                                runId: (ctx === null || ctx === void 0 ? void 0 : ctx.run_id) || \"\",\n                                attempt: (_a = ctx === null || ctx === void 0 ? void 0 : ctx.attempt) !== null && _a !== void 0 ? _a : 0,\n                            },\n                            stepState,\n                            requestedRunStep: stepId === \"step\" ? undefined : stepId || undefined,\n                            timer,\n                            isFailureHandler: fn.onFailure,\n                            disableImmediateExecution: ctx === null || ctx === void 0 ? void 0 : ctx.disable_immediate_execution,\n                            stepCompletionOrder: (_c = (_b = ctx === null || ctx === void 0 ? void 0 : ctx.stack) === null || _b === void 0 ? void 0 : _b.stack) !== null && _c !== void 0 ? _c : [],\n                            reqArgs,\n                            headers,\n                        },\n                    };\n                },\n                [InngestExecution_js_1.ExecutionVersion.V2]: ({ event, events, steps, ctx, version }) => {\n                    var _a, _b, _c;\n                    const stepState = Object.entries(steps !== null && steps !== void 0 ? steps : {}).reduce((acc, [id, result]) => {\n                        return Object.assign(Object.assign({}, acc), { [id]: result.type === \"data\"\n                                ? // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                                    { id, data: result.data }\n                                : result.type === \"input\"\n                                    ? // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                                        { id, input: result.input }\n                                    : { id, error: result.error } });\n                    }, {});\n                    return {\n                        version,\n                        partialOptions: {\n                            client: this.client,\n                            runId: (ctx === null || ctx === void 0 ? void 0 : ctx.run_id) || \"\",\n                            data: {\n                                event: event,\n                                events: events,\n                                runId: (ctx === null || ctx === void 0 ? void 0 : ctx.run_id) || \"\",\n                                attempt: (_a = ctx === null || ctx === void 0 ? void 0 : ctx.attempt) !== null && _a !== void 0 ? _a : 0,\n                            },\n                            stepState,\n                            requestedRunStep: stepId === \"step\" ? undefined : stepId || undefined,\n                            timer,\n                            isFailureHandler: fn.onFailure,\n                            disableImmediateExecution: ctx === null || ctx === void 0 ? void 0 : ctx.disable_immediate_execution,\n                            stepCompletionOrder: (_c = (_b = ctx === null || ctx === void 0 ? void 0 : ctx.stack) === null || _b === void 0 ? void 0 : _b.stack) !== null && _c !== void 0 ? _c : [],\n                            reqArgs,\n                            headers,\n                        },\n                    };\n                },\n            });\n            const executionOptions = await executionStarters[version](anyFnData.value);\n            return fn.fn[\"createExecution\"](executionOptions).start();\n        });\n        return { version, result };\n    }\n    configs(url) {\n        const configs = Object.values(this.rawFns).reduce((acc, fn) => [\n            ...acc,\n            ...fn[\"getConfig\"]({ baseUrl: url, appPrefix: this.id }),\n        ], []);\n        for (const config of configs) {\n            const check = types_js_1.functionConfigSchema.safeParse(config);\n            if (!check.success) {\n                const errors = check.error.errors.map((err) => err.message).join(\"; \");\n                this.log(\"warn\", `Config invalid for function \"${config.id}\" : ${errors}`);\n            }\n        }\n        return configs;\n    }\n    /**\n     * Return an Inngest serve endpoint URL given a potential `path` and `host`.\n     *\n     * Will automatically use the `serveHost` and `servePath` if they have been\n     * set when registering.\n     */\n    reqUrl(url) {\n        let ret = new URL(url);\n        const serveHost = this.serveHost || this.env[consts_js_1.envKeys.InngestServeHost];\n        const servePath = this.servePath || this.env[consts_js_1.envKeys.InngestServePath];\n        if (servePath) {\n            ret.pathname = servePath;\n        }\n        if (serveHost) {\n            ret = new URL(ret.pathname + ret.search, serveHost);\n        }\n        return ret;\n    }\n    registerBody({ url, deployId, }) {\n        const body = {\n            url: url.href,\n            deployType: \"ping\",\n            framework: this.frameworkName,\n            appName: this.id,\n            functions: this.configs(url),\n            sdk: `js:v${version_js_1.version}`,\n            v: \"0.1\",\n            deployId: deployId || undefined,\n            capabilities: {\n                trust_probe: \"v1\",\n                connect: \"v1\",\n            },\n            appVersion: this.client.appVersion,\n        };\n        return body;\n    }\n    async inBandRegisterBody({ actions, deployId, env, signatureValidation, url, }) {\n        const registerBody = this.registerBody({ deployId, url });\n        const introspectionBody = await this.introspectionBody({\n            actions,\n            env,\n            signatureValidation,\n            url,\n        });\n        const body = {\n            app_id: this.id,\n            appVersion: this.client.appVersion,\n            capabilities: registerBody.capabilities,\n            env,\n            framework: registerBody.framework,\n            functions: registerBody.functions,\n            inspection: introspectionBody,\n            platform: (0, env_js_1.getPlatformName)(Object.assign(Object.assign({}, (0, env_js_1.allProcessEnv)()), this.env)),\n            sdk_author: \"inngest\",\n            sdk_language: \"\",\n            sdk_version: \"\",\n            sdk: registerBody.sdk,\n            url: registerBody.url,\n        };\n        if (introspectionBody.authentication_succeeded) {\n            body.sdk_language = introspectionBody.sdk_language;\n            body.sdk_version = introspectionBody.sdk_version;\n        }\n        return body;\n    }\n    async introspectionBody({ actions, env, signatureValidation, url, }) {\n        var _a, _b, _c, _d, _e;\n        const registerBody = this.registerBody({\n            url: this.reqUrl(url),\n            deployId: null,\n        });\n        if (!this._mode) {\n            throw new Error(\"No mode set; cannot introspect without mode\");\n        }\n        let introspection = {\n            authentication_succeeded: null,\n            extra: {\n                is_mode_explicit: this._mode.isExplicit,\n            },\n            has_event_key: this.client[\"eventKeySet\"](),\n            has_signing_key: Boolean(this.signingKey),\n            function_count: registerBody.functions.length,\n            mode: this._mode.type,\n            schema_version: \"2024-05-24\",\n        };\n        // Only allow authenticated introspection in Cloud mode, since Dev mode skips\n        // signature validation\n        if (this._mode.type === \"cloud\") {\n            try {\n                const validationResult = await signatureValidation;\n                if (!validationResult.success) {\n                    throw new Error(\"Signature validation failed\");\n                }\n                introspection = Object.assign(Object.assign({}, introspection), { authentication_succeeded: true, api_origin: this.apiBaseUrl, app_id: this.id, capabilities: {\n                        trust_probe: \"v1\",\n                        connect: \"v1\",\n                    }, env, event_api_origin: this.eventApiBaseUrl, event_key_hash: (_a = this.hashedEventKey) !== null && _a !== void 0 ? _a : null, extra: Object.assign(Object.assign({}, introspection.extra), { is_streaming: await this.shouldStream(actions) }), framework: this.frameworkName, sdk_language: \"js\", sdk_version: version_js_1.version, serve_origin: (_b = this.serveHost) !== null && _b !== void 0 ? _b : null, serve_path: (_c = this.servePath) !== null && _c !== void 0 ? _c : null, signing_key_fallback_hash: (_d = this.hashedSigningKeyFallback) !== null && _d !== void 0 ? _d : null, signing_key_hash: (_e = this.hashedSigningKey) !== null && _e !== void 0 ? _e : null });\n            }\n            catch (_f) {\n                // Swallow signature validation error since we'll just return the\n                // unauthenticated introspection\n                introspection = Object.assign(Object.assign({}, introspection), { authentication_succeeded: false });\n            }\n        }\n        return introspection;\n    }\n    async register(url, deployId, getHeaders) {\n        var _a;\n        const body = this.registerBody({ url, deployId });\n        let res;\n        // Whenever we register, we check to see if the dev server is up.  This\n        // is a noop and returns false in production. Clone the URL object to avoid\n        // mutating the property between requests.\n        let registerURL = new URL(this.inngestRegisterUrl.href);\n        const inferredDevMode = this._mode && this._mode.isInferred && this._mode.isDev;\n        if (inferredDevMode) {\n            const host = (0, env_js_1.devServerHost)(this.env);\n            const hasDevServer = await (0, devserver_js_1.devServerAvailable)(host, this.fetch);\n            if (hasDevServer) {\n                registerURL = (0, devserver_js_1.devServerUrl)(host, \"/fn/register\");\n            }\n        }\n        else if ((_a = this._mode) === null || _a === void 0 ? void 0 : _a.explicitDevUrl) {\n            registerURL = (0, devserver_js_1.devServerUrl)(this._mode.explicitDevUrl.href, \"/fn/register\");\n        }\n        if (deployId) {\n            registerURL.searchParams.set(consts_js_1.queryKeys.DeployId, deployId);\n        }\n        try {\n            res = await (0, net_js_1.fetchWithAuthFallback)({\n                authToken: this.hashedSigningKey,\n                authTokenFallback: this.hashedSigningKeyFallback,\n                fetch: this.fetch,\n                url: registerURL.href,\n                options: {\n                    method: \"POST\",\n                    body: (0, strings_js_1.stringify)(body),\n                    headers: Object.assign(Object.assign({}, getHeaders()), { [consts_js_1.headerKeys.InngestSyncKind]: consts_js_1.syncKind.OutOfBand }),\n                    redirect: \"follow\",\n                },\n            });\n        }\n        catch (err) {\n            this.log(\"error\", err);\n            return {\n                status: 500,\n                message: `Failed to register${err instanceof Error ? `; ${err.message}` : \"\"}`,\n                modified: false,\n            };\n        }\n        const raw = await res.text();\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        let data = {};\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            data = JSON.parse(raw);\n        }\n        catch (err) {\n            this.log(\"warn\", \"Couldn't unpack register response:\", err);\n            let message = \"Failed to register\";\n            if (err instanceof Error) {\n                message += `; ${err.message}`;\n            }\n            message += `; status code: ${res.status}`;\n            return {\n                status: 500,\n                message,\n                modified: false,\n            };\n        }\n        let status;\n        let error;\n        let skipped;\n        let modified;\n        try {\n            ({ status, error, skipped, modified } = registerResSchema.parse(data));\n        }\n        catch (err) {\n            this.log(\"warn\", \"Invalid register response schema:\", err);\n            let message = \"Failed to register\";\n            if (err instanceof Error) {\n                message += `; ${err.message}`;\n            }\n            message += `; status code: ${res.status}`;\n            return {\n                status: 500,\n                message,\n                modified: false,\n            };\n        }\n        // The dev server polls this endpoint to register functions every few\n        // seconds, but we only want to log that we've registered functions if\n        // the function definitions change.  Therefore, we compare the body sent\n        // during registration with the body of the current functions and refuse\n        // to register if the functions are the same.\n        if (!skipped) {\n            this.log(\"debug\", \"registered inngest functions:\", res.status, res.statusText, data);\n        }\n        return { status, message: error, modified };\n    }\n    /**\n     * Given an environment, upsert any missing keys. This is useful in\n     * situations where environment variables are passed directly to handlers or\n     * are otherwise difficult to access during initialization.\n     */\n    upsertKeysFromEnv() {\n        if (this.env[consts_js_1.envKeys.InngestSigningKey]) {\n            if (!this.signingKey) {\n                this.signingKey = String(this.env[consts_js_1.envKeys.InngestSigningKey]);\n            }\n            this.client[\"inngestApi\"].setSigningKey(this.signingKey);\n        }\n        if (this.env[consts_js_1.envKeys.InngestSigningKeyFallback]) {\n            if (!this.signingKeyFallback) {\n                this.signingKeyFallback = String(this.env[consts_js_1.envKeys.InngestSigningKeyFallback]);\n            }\n            this.client[\"inngestApi\"].setSigningKeyFallback(this.signingKeyFallback);\n        }\n        if (!this.client[\"eventKeySet\"]() && this.env[consts_js_1.envKeys.InngestEventKey]) {\n            this.client.setEventKey(String(this.env[consts_js_1.envKeys.InngestEventKey]));\n        }\n        // v2 -> v3 migration warnings\n        if (this.env[consts_js_1.envKeys.InngestDevServerUrl]) {\n            this.log(\"warn\", `Use of ${consts_js_1.envKeys.InngestDevServerUrl} has been deprecated in v3; please use ${consts_js_1.envKeys.InngestBaseUrl} instead. See https://www.inngest.com/docs/sdk/migration`);\n        }\n    }\n    /**\n     * Validate the signature of a request and return the signing key used to\n     * validate it.\n     */\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async validateSignature(sig, body) {\n        try {\n            // Skip signature validation if requested (used by connect)\n            if (this.skipSignatureValidation) {\n                return { success: true, keyUsed: \"\" };\n            }\n            // Never validate signatures outside of prod. Make sure to check the mode\n            // exists here instead of using nullish coalescing to confirm that the check\n            // has been completed.\n            if (this._mode && !this._mode.isCloud) {\n                return { success: true, keyUsed: \"\" };\n            }\n            // If we're here, we're in production; lack of a signing key is an error.\n            if (!this.signingKey) {\n                // TODO PrettyError\n                throw new Error(`No signing key found in client options or ${consts_js_1.envKeys.InngestSigningKey} env var. Find your keys at https://app.inngest.com/secrets`);\n            }\n            // If we're here, we're in production; lack of a req signature is an error.\n            if (!sig) {\n                // TODO PrettyError\n                throw new Error(`No ${consts_js_1.headerKeys.Signature} provided`);\n            }\n            // Validate the signature\n            return {\n                success: true,\n                keyUsed: new RequestSignature(sig).verifySignature({\n                    body,\n                    allowExpiredSignatures: this.allowExpiredSignatures,\n                    signingKey: this.signingKey,\n                    signingKeyFallback: this.signingKeyFallback,\n                }),\n            };\n        }\n        catch (err) {\n            return { success: false, err: err };\n        }\n    }\n    getResponseSignature(key, body) {\n        const now = Date.now();\n        const mac = (0, net_js_1.signDataWithKey)(body, key, now.toString());\n        return `t=${now}&s=${mac}`;\n    }\n    /**\n     * Log to stdout/stderr if the log level is set to include the given level.\n     * The default log level is `\"info\"`.\n     *\n     * This is an abstraction over `console.log` and will try to use the correct\n     * method for the given log level.  For example, `log(\"error\", \"foo\")` will\n     * call `console.error(\"foo\")`.\n     */\n    log(level, ...args) {\n        const logLevels = [\n            \"debug\",\n            \"info\",\n            \"warn\",\n            \"error\",\n            \"fatal\",\n            \"silent\",\n        ];\n        const logLevelSetting = logLevels.indexOf(this.logLevel);\n        const currentLevel = logLevels.indexOf(level);\n        if (currentLevel >= logLevelSetting) {\n            let logger = console.log;\n            if (Object.prototype.hasOwnProperty.call(console, level)) {\n                logger = console[level];\n            }\n            logger(`${consts_js_1.logPrefix} ${level} -`, ...args);\n        }\n    }\n}\nexports.InngestCommHandler = InngestCommHandler;\nclass RequestSignature {\n    constructor(sig) {\n        _RequestSignature_instances.add(this);\n        const params = new URLSearchParams(sig);\n        this.timestamp = params.get(\"t\") || \"\";\n        this.signature = params.get(\"s\") || \"\";\n        if (!this.timestamp || !this.signature) {\n            // TODO PrettyError\n            throw new Error(`Invalid ${consts_js_1.headerKeys.Signature} provided`);\n        }\n    }\n    hasExpired(allowExpiredSignatures) {\n        if (allowExpiredSignatures) {\n            return false;\n        }\n        const delta = Date.now() - new Date(parseInt(this.timestamp) * 1000).valueOf();\n        return delta > 1000 * 60 * 5;\n    }\n    verifySignature({ body, signingKey, signingKeyFallback, allowExpiredSignatures, }) {\n        try {\n            __classPrivateFieldGet(this, _RequestSignature_instances, \"m\", _RequestSignature_verifySignature).call(this, { body, signingKey, allowExpiredSignatures });\n            return signingKey;\n        }\n        catch (err) {\n            if (!signingKeyFallback) {\n                throw err;\n            }\n            __classPrivateFieldGet(this, _RequestSignature_instances, \"m\", _RequestSignature_verifySignature).call(this, {\n                body,\n                signingKey: signingKeyFallback,\n                allowExpiredSignatures,\n            });\n            return signingKeyFallback;\n        }\n    }\n}\n_RequestSignature_instances = new WeakSet(), _RequestSignature_verifySignature = function _RequestSignature_verifySignature({ body, signingKey, allowExpiredSignatures, }) {\n    if (this.hasExpired(allowExpiredSignatures)) {\n        // TODO PrettyError\n        throw new Error(\"Signature has expired\");\n    }\n    const mac = (0, net_js_1.signDataWithKey)(body, signingKey, this.timestamp);\n    if (mac !== this.signature) {\n        // TODO PrettyError\n        throw new Error(\"Invalid signature\");\n    }\n};\n//# sourceMappingURL=InngestCommHandler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestCommHandler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestFunction.js":
/*!************************************************************!*\
  !*** ./node_modules/inngest/components/InngestFunction.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InngestFunction = void 0;\nconst consts_js_1 = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst strings_js_1 = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ./execution/InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\nconst v0_js_1 = __webpack_require__(/*! ./execution/v0.js */ \"(rsc)/./node_modules/inngest/components/execution/v0.js\");\nconst v1_js_1 = __webpack_require__(/*! ./execution/v1.js */ \"(rsc)/./node_modules/inngest/components/execution/v1.js\");\nconst v2_js_1 = __webpack_require__(/*! ./execution/v2.js */ \"(rsc)/./node_modules/inngest/components/execution/v2.js\");\n/**\n * A stateless Inngest function, wrapping up function configuration and any\n * in-memory steps to run when triggered.\n *\n * This function can be \"registered\" to create a handler that Inngest can\n * trigger remotely.\n *\n * @public\n */\nclass InngestFunction {\n    /**\n     * A stateless Inngest function, wrapping up function configuration and any\n     * in-memory steps to run when triggered.\n     *\n     * This function can be \"registered\" to create a handler that Inngest can\n     * trigger remotely.\n     */\n    constructor(client, \n    /**\n     * Options\n     */\n    opts, fn) {\n        this.client = client;\n        this.opts = opts;\n        this.fn = fn;\n        this.onFailureFn = this.opts.onFailure;\n        this.middleware = this.client[\"initializeMiddleware\"](this.opts.middleware, { registerInput: { fn: this }, prefixStack: this.client[\"middleware\"] });\n    }\n    /**\n     * The generated or given ID for this function.\n     */\n    id(prefix) {\n        return [prefix, this.opts.id].filter(Boolean).join(\"-\");\n    }\n    /**\n     * The generated or given ID for this function, prefixed with the app ID. This\n     * is used for routing invokes and identifying the function across apps.\n     */\n    get absoluteId() {\n        return this.id(this.client.id);\n    }\n    /**\n     * The name of this function as it will appear in the Inngest Cloud UI.\n     */\n    get name() {\n        return this.opts.name || this.id();\n    }\n    /**\n     * The description of this function.\n     */\n    get description() {\n        return this.opts.description;\n    }\n    /**\n     * Retrieve the Inngest config for this function.\n     */\n    getConfig({ baseUrl, appPrefix, isConnect, }) {\n        var _a, _b;\n        const fnId = this.id(appPrefix);\n        const stepUrl = new URL(baseUrl.href);\n        stepUrl.searchParams.set(consts_js_1.queryKeys.FnId, fnId);\n        stepUrl.searchParams.set(consts_js_1.queryKeys.StepId, InngestFunction.stepId);\n        const { retries: attempts, cancelOn, idempotency, batchEvents, rateLimit, throttle, concurrency, debounce, timeouts, priority, singleton, } = this.opts;\n        /**\n         * Convert retries into the format required when defining function\n         * configuration.\n         */\n        const retries = typeof attempts === \"undefined\" ? undefined : { attempts };\n        const fn = {\n            id: fnId,\n            name: this.name,\n            triggers: ((_a = this.opts.triggers) !== null && _a !== void 0 ? _a : []).map((trigger) => {\n                if (\"event\" in trigger) {\n                    return {\n                        event: trigger.event,\n                        expression: trigger.if,\n                    };\n                }\n                return {\n                    cron: trigger.cron,\n                };\n            }),\n            steps: {\n                [InngestFunction.stepId]: {\n                    id: InngestFunction.stepId,\n                    name: InngestFunction.stepId,\n                    runtime: {\n                        type: isConnect ? \"ws\" : \"http\",\n                        url: stepUrl.href,\n                    },\n                    retries,\n                },\n            },\n            idempotency,\n            batchEvents,\n            rateLimit,\n            throttle,\n            concurrency,\n            debounce,\n            priority,\n            timeouts,\n            singleton,\n        };\n        if (cancelOn) {\n            fn.cancel = cancelOn.map(({ event, timeout, if: ifStr, match }) => {\n                const ret = {\n                    event,\n                };\n                if (timeout) {\n                    ret.timeout = (0, strings_js_1.timeStr)(timeout);\n                }\n                if (match) {\n                    ret.if = `event.${match} == async.${match}`;\n                }\n                else if (ifStr) {\n                    ret.if = ifStr;\n                }\n                return ret;\n            }, []);\n        }\n        const config = [fn];\n        if (this.onFailureFn) {\n            const id = `${fn.id}${InngestFunction.failureSuffix}`;\n            const name = `${(_b = fn.name) !== null && _b !== void 0 ? _b : fn.id} (failure)`;\n            const failureStepUrl = new URL(stepUrl.href);\n            failureStepUrl.searchParams.set(consts_js_1.queryKeys.FnId, id);\n            config.push({\n                id,\n                name,\n                triggers: [\n                    {\n                        event: consts_js_1.internalEvents.FunctionFailed,\n                        expression: `event.data.function_id == '${fnId}'`,\n                    },\n                ],\n                steps: {\n                    [InngestFunction.stepId]: {\n                        id: InngestFunction.stepId,\n                        name: InngestFunction.stepId,\n                        runtime: {\n                            type: \"http\",\n                            url: failureStepUrl.href,\n                        },\n                        retries: { attempts: 1 },\n                    },\n                },\n            });\n        }\n        return config;\n    }\n    createExecution(opts) {\n        const options = Object.assign({ fn: this }, opts.partialOptions);\n        const versionHandlers = {\n            [InngestExecution_js_1.ExecutionVersion.V2]: () => (0, v2_js_1.createV2InngestExecution)(options),\n            [InngestExecution_js_1.ExecutionVersion.V1]: () => (0, v1_js_1.createV1InngestExecution)(options),\n            [InngestExecution_js_1.ExecutionVersion.V0]: () => (0, v0_js_1.createV0InngestExecution)(options),\n        };\n        return versionHandlers[opts.version]();\n    }\n    shouldOptimizeParallelism() {\n        var _a, _b;\n        // TODO We should check the commhandler's client instead of this one?\n        return ((_b = (_a = this.opts.optimizeParallelism) !== null && _a !== void 0 ? _a : this.client[\"options\"].optimizeParallelism) !== null && _b !== void 0 ? _b : false);\n    }\n}\nexports.InngestFunction = InngestFunction;\nInngestFunction.stepId = \"step\";\nInngestFunction.failureSuffix = \"-failure\";\n//# sourceMappingURL=InngestFunction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestFunction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestFunctionReference.js":
/*!*********************************************************************!*\
  !*** ./node_modules/inngest/components/InngestFunctionReference.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.referenceFunction = exports.InngestFunctionReference = void 0;\n/**\n * A reference to an `InngestFunction` that can be used to represent both local\n * and remote functions without pulling in the full function definition (i.e.\n * dependencies).\n *\n * These references can be invoked in the same manner as a regular\n * `InngestFunction`.\n *\n * To create a reference function, use the {@link referenceFunction} helper.\n *\n * @public\n */\nclass InngestFunctionReference {\n    constructor(opts) {\n        this.opts = opts;\n    }\n}\nexports.InngestFunctionReference = InngestFunctionReference;\n/**\n * Create a reference to an `InngestFunction` that can be used to represent both\n * local and remote functions without pulling in the full function definition\n * (i.e. dependencies).\n *\n * These references can be invoked in the same manner as a regular\n * `InngestFunction`.\n *\n * @public\n */\nconst referenceFunction = ({ functionId, appId, }) => {\n    return new InngestFunctionReference({\n        functionId,\n        appId,\n    });\n};\nexports.referenceFunction = referenceFunction;\n//# sourceMappingURL=InngestFunctionReference.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0lubmdlc3RGdW5jdGlvblJlZmVyZW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUIsR0FBRyxnQ0FBZ0M7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0Qyx5QkFBeUI7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixvQkFBb0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvYWhhcnBlci9pbm5nZXN0L2lubmdlc3Qtc2FuZGJveC90cy1uZXh0L25vZGVfbW9kdWxlcy9pbm5nZXN0L2NvbXBvbmVudHMvSW5uZ2VzdEZ1bmN0aW9uUmVmZXJlbmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWZlcmVuY2VGdW5jdGlvbiA9IGV4cG9ydHMuSW5uZ2VzdEZ1bmN0aW9uUmVmZXJlbmNlID0gdm9pZCAwO1xuLyoqXG4gKiBBIHJlZmVyZW5jZSB0byBhbiBgSW5uZ2VzdEZ1bmN0aW9uYCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCBib3RoIGxvY2FsXG4gKiBhbmQgcmVtb3RlIGZ1bmN0aW9ucyB3aXRob3V0IHB1bGxpbmcgaW4gdGhlIGZ1bGwgZnVuY3Rpb24gZGVmaW5pdGlvbiAoaS5lLlxuICogZGVwZW5kZW5jaWVzKS5cbiAqXG4gKiBUaGVzZSByZWZlcmVuY2VzIGNhbiBiZSBpbnZva2VkIGluIHRoZSBzYW1lIG1hbm5lciBhcyBhIHJlZ3VsYXJcbiAqIGBJbm5nZXN0RnVuY3Rpb25gLlxuICpcbiAqIFRvIGNyZWF0ZSBhIHJlZmVyZW5jZSBmdW5jdGlvbiwgdXNlIHRoZSB7QGxpbmsgcmVmZXJlbmNlRnVuY3Rpb259IGhlbHBlci5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIElubmdlc3RGdW5jdGlvblJlZmVyZW5jZSB7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIH1cbn1cbmV4cG9ydHMuSW5uZ2VzdEZ1bmN0aW9uUmVmZXJlbmNlID0gSW5uZ2VzdEZ1bmN0aW9uUmVmZXJlbmNlO1xuLyoqXG4gKiBDcmVhdGUgYSByZWZlcmVuY2UgdG8gYW4gYElubmdlc3RGdW5jdGlvbmAgdGhhdCBjYW4gYmUgdXNlZCB0byByZXByZXNlbnQgYm90aFxuICogbG9jYWwgYW5kIHJlbW90ZSBmdW5jdGlvbnMgd2l0aG91dCBwdWxsaW5nIGluIHRoZSBmdWxsIGZ1bmN0aW9uIGRlZmluaXRpb25cbiAqIChpLmUuIGRlcGVuZGVuY2llcykuXG4gKlxuICogVGhlc2UgcmVmZXJlbmNlcyBjYW4gYmUgaW52b2tlZCBpbiB0aGUgc2FtZSBtYW5uZXIgYXMgYSByZWd1bGFyXG4gKiBgSW5uZ2VzdEZ1bmN0aW9uYC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNvbnN0IHJlZmVyZW5jZUZ1bmN0aW9uID0gKHsgZnVuY3Rpb25JZCwgYXBwSWQsIH0pID0+IHtcbiAgICByZXR1cm4gbmV3IElubmdlc3RGdW5jdGlvblJlZmVyZW5jZSh7XG4gICAgICAgIGZ1bmN0aW9uSWQsXG4gICAgICAgIGFwcElkLFxuICAgIH0pO1xufTtcbmV4cG9ydHMucmVmZXJlbmNlRnVuY3Rpb24gPSByZWZlcmVuY2VGdW5jdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUlubmdlc3RGdW5jdGlvblJlZmVyZW5jZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestFunctionReference.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestMiddleware.js":
/*!**************************************************************!*\
  !*** ./node_modules/inngest/components/InngestMiddleware.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getHookStack = exports.InngestMiddleware = void 0;\nconst functions_js_1 = __webpack_require__(/*! ../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\n/**\n * A middleware that can be registered with Inngest to hook into various\n * lifecycles of the SDK and affect input and output of Inngest functionality.\n *\n * See {@link https://innge.st/middleware}\n *\n * @example\n *\n * ```ts\n * export const inngest = new Inngest({\n *   middleware: [\n *     new InngestMiddleware({\n *       name: \"My Middleware\",\n *       init: () => {\n *         // ...\n *       }\n *     })\n *   ]\n * });\n * ```\n *\n * @public\n */\nclass InngestMiddleware {\n    constructor({ name, init }) {\n        this.name = name;\n        this.init = init;\n    }\n}\nexports.InngestMiddleware = InngestMiddleware;\n/**\n * Given some middleware and an entrypoint, runs the initializer for the given\n * `key` and returns functions that will pass arguments through a stack of each\n * given hook in a middleware's lifecycle.\n *\n * Lets the middleware initialize before starting.\n */\nconst getHookStack = async (\n/**\n * The stack of middleware that will be used to run hooks.\n */\nmiddleware, \n/**\n * The hook type to initialize.\n */\nkey, \n/**\n * Arguments for the initial hook.\n */\narg, transforms) => {\n    // Wait for middleware to initialize\n    const mwStack = await middleware;\n    // Step through each middleware and get the hook for the given key\n    const keyFns = mwStack.reduce((acc, mw) => {\n        const fn = mw[key];\n        if (fn) {\n            return [...acc, fn];\n        }\n        return acc;\n    }, []);\n    // Run each hook found in sequence and collect the results\n    const hooksRegistered = await keyFns.reduce(async (acc, fn) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return [...(await acc), await fn(arg)];\n    }, Promise.resolve([]));\n    // Prepare the return object - mutating this instead of using reduce as it\n    // results in cleaner code.\n    const ret = {};\n    // Step through each hook result and create a waterfall joining each key\n    for (const hook of hooksRegistered) {\n        const hookKeys = Object.keys(hook);\n        for (const key of hookKeys) {\n            let fns = [hook[key]];\n            const existingWaterfall = ret[key];\n            if (existingWaterfall) {\n                fns = [existingWaterfall, hook[key]];\n            }\n            const transform = transforms[key];\n            ret[key] = (0, functions_js_1.waterfall)(fns, transform);\n        }\n    }\n    // Cache each function in the stack to ensure each can only be called once\n    for (const k of Object.keys(ret)) {\n        const key = k;\n        ret[key] = (0, functions_js_1.cacheFn)(ret[key]);\n    }\n    return ret;\n};\nexports.getHookStack = getHookStack;\n//# sourceMappingURL=InngestMiddleware.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0lubmdlc3RNaWRkbGV3YXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLHlCQUF5QjtBQUNoRCx1QkFBdUIsbUJBQU8sQ0FBQyxrRkFBeUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyIvVXNlcnMvYWhhcnBlci9pbm5nZXN0L2lubmdlc3Qtc2FuZGJveC90cy1uZXh0L25vZGVfbW9kdWxlcy9pbm5nZXN0L2NvbXBvbmVudHMvSW5uZ2VzdE1pZGRsZXdhcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEhvb2tTdGFjayA9IGV4cG9ydHMuSW5uZ2VzdE1pZGRsZXdhcmUgPSB2b2lkIDA7XG5jb25zdCBmdW5jdGlvbnNfanNfMSA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL2Z1bmN0aW9ucy5qc1wiKTtcbi8qKlxuICogQSBtaWRkbGV3YXJlIHRoYXQgY2FuIGJlIHJlZ2lzdGVyZWQgd2l0aCBJbm5nZXN0IHRvIGhvb2sgaW50byB2YXJpb3VzXG4gKiBsaWZlY3ljbGVzIG9mIHRoZSBTREsgYW5kIGFmZmVjdCBpbnB1dCBhbmQgb3V0cHV0IG9mIElubmdlc3QgZnVuY3Rpb25hbGl0eS5cbiAqXG4gKiBTZWUge0BsaW5rIGh0dHBzOi8vaW5uZ2Uuc3QvbWlkZGxld2FyZX1cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYHRzXG4gKiBleHBvcnQgY29uc3QgaW5uZ2VzdCA9IG5ldyBJbm5nZXN0KHtcbiAqICAgbWlkZGxld2FyZTogW1xuICogICAgIG5ldyBJbm5nZXN0TWlkZGxld2FyZSh7XG4gKiAgICAgICBuYW1lOiBcIk15IE1pZGRsZXdhcmVcIixcbiAqICAgICAgIGluaXQ6ICgpID0+IHtcbiAqICAgICAgICAgLy8gLi4uXG4gKiAgICAgICB9XG4gKiAgICAgfSlcbiAqICAgXVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIElubmdlc3RNaWRkbGV3YXJlIHtcbiAgICBjb25zdHJ1Y3Rvcih7IG5hbWUsIGluaXQgfSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmluaXQgPSBpbml0O1xuICAgIH1cbn1cbmV4cG9ydHMuSW5uZ2VzdE1pZGRsZXdhcmUgPSBJbm5nZXN0TWlkZGxld2FyZTtcbi8qKlxuICogR2l2ZW4gc29tZSBtaWRkbGV3YXJlIGFuZCBhbiBlbnRyeXBvaW50LCBydW5zIHRoZSBpbml0aWFsaXplciBmb3IgdGhlIGdpdmVuXG4gKiBga2V5YCBhbmQgcmV0dXJucyBmdW5jdGlvbnMgdGhhdCB3aWxsIHBhc3MgYXJndW1lbnRzIHRocm91Z2ggYSBzdGFjayBvZiBlYWNoXG4gKiBnaXZlbiBob29rIGluIGEgbWlkZGxld2FyZSdzIGxpZmVjeWNsZS5cbiAqXG4gKiBMZXRzIHRoZSBtaWRkbGV3YXJlIGluaXRpYWxpemUgYmVmb3JlIHN0YXJ0aW5nLlxuICovXG5jb25zdCBnZXRIb29rU3RhY2sgPSBhc3luYyAoXG4vKipcbiAqIFRoZSBzdGFjayBvZiBtaWRkbGV3YXJlIHRoYXQgd2lsbCBiZSB1c2VkIHRvIHJ1biBob29rcy5cbiAqL1xubWlkZGxld2FyZSwgXG4vKipcbiAqIFRoZSBob29rIHR5cGUgdG8gaW5pdGlhbGl6ZS5cbiAqL1xua2V5LCBcbi8qKlxuICogQXJndW1lbnRzIGZvciB0aGUgaW5pdGlhbCBob29rLlxuICovXG5hcmcsIHRyYW5zZm9ybXMpID0+IHtcbiAgICAvLyBXYWl0IGZvciBtaWRkbGV3YXJlIHRvIGluaXRpYWxpemVcbiAgICBjb25zdCBtd1N0YWNrID0gYXdhaXQgbWlkZGxld2FyZTtcbiAgICAvLyBTdGVwIHRocm91Z2ggZWFjaCBtaWRkbGV3YXJlIGFuZCBnZXQgdGhlIGhvb2sgZm9yIHRoZSBnaXZlbiBrZXlcbiAgICBjb25zdCBrZXlGbnMgPSBtd1N0YWNrLnJlZHVjZSgoYWNjLCBtdykgPT4ge1xuICAgICAgICBjb25zdCBmbiA9IG13W2tleV07XG4gICAgICAgIGlmIChmbikge1xuICAgICAgICAgICAgcmV0dXJuIFsuLi5hY2MsIGZuXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKTtcbiAgICAvLyBSdW4gZWFjaCBob29rIGZvdW5kIGluIHNlcXVlbmNlIGFuZCBjb2xsZWN0IHRoZSByZXN1bHRzXG4gICAgY29uc3QgaG9va3NSZWdpc3RlcmVkID0gYXdhaXQga2V5Rm5zLnJlZHVjZShhc3luYyAoYWNjLCBmbikgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1yZXR1cm5cbiAgICAgICAgcmV0dXJuIFsuLi4oYXdhaXQgYWNjKSwgYXdhaXQgZm4oYXJnKV07XG4gICAgfSwgUHJvbWlzZS5yZXNvbHZlKFtdKSk7XG4gICAgLy8gUHJlcGFyZSB0aGUgcmV0dXJuIG9iamVjdCAtIG11dGF0aW5nIHRoaXMgaW5zdGVhZCBvZiB1c2luZyByZWR1Y2UgYXMgaXRcbiAgICAvLyByZXN1bHRzIGluIGNsZWFuZXIgY29kZS5cbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICAvLyBTdGVwIHRocm91Z2ggZWFjaCBob29rIHJlc3VsdCBhbmQgY3JlYXRlIGEgd2F0ZXJmYWxsIGpvaW5pbmcgZWFjaCBrZXlcbiAgICBmb3IgKGNvbnN0IGhvb2sgb2YgaG9va3NSZWdpc3RlcmVkKSB7XG4gICAgICAgIGNvbnN0IGhvb2tLZXlzID0gT2JqZWN0LmtleXMoaG9vayk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGhvb2tLZXlzKSB7XG4gICAgICAgICAgICBsZXQgZm5zID0gW2hvb2tba2V5XV07XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ1dhdGVyZmFsbCA9IHJldFtrZXldO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nV2F0ZXJmYWxsKSB7XG4gICAgICAgICAgICAgICAgZm5zID0gW2V4aXN0aW5nV2F0ZXJmYWxsLCBob29rW2tleV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gdHJhbnNmb3Jtc1trZXldO1xuICAgICAgICAgICAgcmV0W2tleV0gPSAoMCwgZnVuY3Rpb25zX2pzXzEud2F0ZXJmYWxsKShmbnMsIHRyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ2FjaGUgZWFjaCBmdW5jdGlvbiBpbiB0aGUgc3RhY2sgdG8gZW5zdXJlIGVhY2ggY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2VcbiAgICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXMocmV0KSkge1xuICAgICAgICBjb25zdCBrZXkgPSBrO1xuICAgICAgICByZXRba2V5XSA9ICgwLCBmdW5jdGlvbnNfanNfMS5jYWNoZUZuKShyZXRba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuZXhwb3J0cy5nZXRIb29rU3RhY2sgPSBnZXRIb29rU3RhY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Jbm5nZXN0TWlkZGxld2FyZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestMiddleware.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/InngestStepTools.js":
/*!*************************************************************!*\
  !*** ./node_modules/inngest/components/InngestStepTools.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.invokePayloadSchema = exports.gatewaySymbol = exports.createStepTools = exports.STEP_INDEXING_SUFFIX = exports.getStepOptions = void 0;\nconst ai_1 = __webpack_require__(/*! @inngest/ai */ \"(rsc)/./node_modules/@inngest/ai/dist/index.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst consts_js_1 = __webpack_require__(/*! ../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst strings_js_1 = __webpack_require__(/*! ../helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\nconst Temporal = __importStar(__webpack_require__(/*! ../helpers/temporal.js */ \"(rsc)/./node_modules/inngest/helpers/temporal.js\"));\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst Fetch_js_1 = __webpack_require__(/*! ./Fetch.js */ \"(rsc)/./node_modules/inngest/components/Fetch.js\");\nconst InngestFunction_js_1 = __webpack_require__(/*! ./InngestFunction.js */ \"(rsc)/./node_modules/inngest/components/InngestFunction.js\");\nconst InngestFunctionReference_js_1 = __webpack_require__(/*! ./InngestFunctionReference.js */ \"(rsc)/./node_modules/inngest/components/InngestFunctionReference.js\");\nconst getStepOptions = (options) => {\n    if (typeof options === \"string\") {\n        return { id: options };\n    }\n    return options;\n};\nexports.getStepOptions = getStepOptions;\n/**\n * Suffix used to namespace steps that are automatically indexed.\n */\nexports.STEP_INDEXING_SUFFIX = \":\";\n/**\n * Create a new set of step function tools ready to be used in a step function.\n * This function should be run and a fresh set of tools provided every time a\n * function is run.\n *\n * An op stack (function state) is passed in as well as some mutable properties\n * that the tools can use to submit a new op.\n */\nconst createStepTools = (client, execution, stepHandler) => {\n    /**\n     * A local helper used to create tools that can be used to submit an op.\n     *\n     * When using this function, a generic type should be provided which is the\n     * function signature exposed to the user.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const createTool = (\n    /**\n     * A function that returns an ID for this op. This is used to ensure that\n     * the op stack is correctly filled, submitted, and retrieved with the same\n     * ID.\n     *\n     * It is passed the arguments passed by the user.\n     *\n     * Most simple tools will likely only need to define this.\n     */\n    matchOp, opts) => {\n        return (async (...args) => {\n            const parsedArgs = args;\n            return stepHandler({ args: parsedArgs, matchOp, opts });\n        });\n    };\n    /**\n     * Create a new step run tool that can be used to run a step function using\n     * `step.run()` as a shim.\n     */\n    const createStepRun = (\n    /**\n     * The sub-type of this step tool, exposed via `opts.type` when the op is\n     * reported.\n     */\n    type) => {\n        return createTool(({ id, name }, _fn, ...input) => {\n            const opts = Object.assign(Object.assign({}, (input.length ? { input } : {})), (type ? { type } : {}));\n            return Object.assign({ id, op: types_js_1.StepOpCode.StepPlanned, name: id, displayName: name !== null && name !== void 0 ? name : id }, (Object.keys(opts).length ? { opts } : {}));\n        }, {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            fn: (_, fn, ...input) => fn(...input),\n        });\n    };\n    /**\n     * Define the set of tools the user has access to for their step functions.\n     *\n     * Each key is the function name and is expected to run `createTool` and pass\n     * a generic type for that function as it will appear in the user's code.\n     */\n    const tools = {\n        /**\n         * Send one or many events to Inngest. Should always be used in place of\n         * `inngest.send()` to ensure that the event send is successfully retried\n         * and not sent multiple times due to memoisation.\n         *\n         * @example\n         * ```ts\n         * await step.sendEvent(\"emit-user-creation\", {\n         *   name: \"app/user.created\",\n         *   data: { id: 123 },\n         * });\n         *\n         * await step.sendEvent(\"emit-user-updates\", [\n         *   {\n         *     name: \"app/user.created\",\n         *     data: { id: 123 },\n         *   },\n         *   {\n         *     name: \"app/user.feed.created\",\n         *     data: { id: 123 },\n         *   },\n         * ]);\n         * ```\n         *\n         * Returns a promise that will resolve once the event has been sent.\n         */\n        sendEvent: createTool(({ id, name }) => {\n            return {\n                id,\n                op: types_js_1.StepOpCode.StepPlanned,\n                name: \"sendEvent\",\n                displayName: name !== null && name !== void 0 ? name : id,\n            };\n        }, {\n            fn: (idOrOptions, payload) => {\n                return client[\"_send\"]({\n                    payload,\n                    headers: execution[\"options\"][\"headers\"],\n                });\n            },\n        }),\n        /**\n         * EXPERIMENTAL: This API is not yet stable and may change in the future\n         * without a major version bump.\n         *\n         * Wait for a particular signal to be received before continuing. When the\n         * signal is received, its data will be returned.\n         */\n        waitForSignal: createTool(({ id, name }, opts) => {\n            // TODO Should support Temporal.DurationLike, Temporal.InstantLike,\n            // Temporal.ZonedDateTimeLike\n            return {\n                id,\n                op: types_js_1.StepOpCode.WaitForSignal,\n                name: opts.signal,\n                displayName: name !== null && name !== void 0 ? name : id,\n                opts: {\n                    signal: opts.signal,\n                    timeout: (0, strings_js_1.timeStr)(opts.timeout),\n                    conflict: opts.onConflict,\n                },\n            };\n        }),\n        /**\n         * Send a Signal to Inngest.\n         */\n        sendSignal: createTool(({ id, name }, opts) => {\n            return {\n                id,\n                op: types_js_1.StepOpCode.StepPlanned,\n                name: \"sendSignal\",\n                displayName: name !== null && name !== void 0 ? name : id,\n                opts: {\n                    type: \"step.sendSignal\",\n                    signal: opts.signal,\n                },\n            };\n        }, {\n            fn: (_idOrOptions, opts) => {\n                return client[\"_sendSignal\"]({\n                    signal: opts.signal,\n                    data: opts.data,\n                    headers: execution[\"options\"][\"headers\"],\n                });\n            },\n        }),\n        /**\n         * Wait for a particular event to be received before continuing. When the\n         * event is received, it will be returned.\n         *\n         * You can also provide options to control the particular event that is\n         * received, for example to ensure that a user ID matches between two\n         * events, or to only wait a maximum amount of time before giving up and\n         * returning `null` instead of any event data.\n         */\n        waitForEvent: createTool(({ id, name }, \n        /**\n         * Options to control the event we're waiting for.\n         */\n        opts) => {\n            const matchOpts = {\n                timeout: (0, strings_js_1.timeStr)(typeof opts === \"string\" ? opts : opts.timeout),\n            };\n            if (typeof opts !== \"string\") {\n                if (opts === null || opts === void 0 ? void 0 : opts.match) {\n                    matchOpts.if = `event.${opts.match} == async.${opts.match}`;\n                }\n                else if (opts === null || opts === void 0 ? void 0 : opts.if) {\n                    matchOpts.if = opts.if;\n                }\n            }\n            return {\n                id,\n                op: types_js_1.StepOpCode.WaitForEvent,\n                name: opts.event,\n                opts: matchOpts,\n                displayName: name !== null && name !== void 0 ? name : id,\n            };\n        }),\n        /**\n         * Use this tool to run business logic. Each call to `run` will be retried\n         * individually, meaning you can compose complex workflows that safely\n         * retry dependent asynchronous actions.\n         *\n         * The function you pass to `run` will be called only when this \"step\" is to\n         * be executed and can be synchronous or asynchronous.\n         *\n         * In either case, the return value of the function will be the return value\n         * of the `run` tool, meaning you can return and reason about return data\n         * for next steps.\n         */\n        run: createStepRun(),\n        /**\n         * AI tooling for running AI models and other AI-related tasks.\n         */\n        ai: {\n            /**\n             * Use this tool to have Inngest make your AI calls. Useful for agentic workflows.\n             *\n             * Input is also tracked for this tool, meaning you can pass input to the\n             * function and it will be displayed and editable in the UI.\n             */\n            infer: createTool(({ id, name }, options) => {\n                var _a, _b;\n                const modelCopy = Object.assign({}, options.model);\n                // Allow the model to mutate options and body for this call\n                (_b = (_a = options.model).onCall) === null || _b === void 0 ? void 0 : _b.call(_a, modelCopy, options.body);\n                return {\n                    id,\n                    op: types_js_1.StepOpCode.AiGateway,\n                    displayName: name !== null && name !== void 0 ? name : id,\n                    opts: {\n                        type: \"step.ai.infer\",\n                        url: modelCopy.url,\n                        headers: modelCopy.headers,\n                        auth_key: modelCopy.authKey,\n                        format: modelCopy.format,\n                        body: options.body,\n                    },\n                };\n            }),\n            /**\n             * Use this tool to wrap AI models and other AI-related tasks. Each call\n             * to `wrap` will be retried individually, meaning you can compose complex\n             * workflows that safely retry dependent asynchronous actions.\n             *\n             * Input is also tracked for this tool, meaning you can pass input to the\n             * function and it will be displayed and editable in the UI.\n             */\n            wrap: createStepRun(\"step.ai.wrap\"),\n            /**\n             * Models for AI inference and other AI-related tasks.\n             */\n            models: Object.assign({}, ai_1.models),\n        },\n        /**\n         * Wait a specified amount of time before continuing.\n         *\n         * The time to wait can be specified using a `number` of milliseconds or an\n         * `ms`-compatible time string like `\"1 hour\"`, `\"30 mins\"`, or `\"2.5d\"`.\n         *\n         * {@link https://npm.im/ms}\n         *\n         * To wait until a particular date, use `sleepUntil` instead.\n         */\n        sleep: createTool(({ id, name }, time) => {\n            /**\n             * The presence of this operation in the returned stack indicates that the\n             * sleep is over and we should continue execution.\n             */\n            const msTimeStr = (0, strings_js_1.timeStr)(Temporal.isTemporalDuration(time)\n                ? time.total({ unit: \"milliseconds\" })\n                : time);\n            return {\n                id,\n                op: types_js_1.StepOpCode.Sleep,\n                name: msTimeStr,\n                displayName: name !== null && name !== void 0 ? name : id,\n            };\n        }),\n        /**\n         * Wait until a particular date before continuing by passing a `Date`.\n         *\n         * To wait for a particular amount of time from now, always use `sleep`\n         * instead.\n         */\n        sleepUntil: createTool(({ id, name }, time) => {\n            try {\n                const iso = Temporal.getISOString(time);\n                /**\n                 * The presence of this operation in the returned stack indicates that the\n                 * sleep is over and we should continue execution.\n                 */\n                return {\n                    id,\n                    op: types_js_1.StepOpCode.Sleep,\n                    name: iso,\n                    displayName: name !== null && name !== void 0 ? name : id,\n                };\n            }\n            catch (err) {\n                /**\n                 * If we're here, it's because the date is invalid. We'll throw a custom\n                 * error here to standardise this response.\n                 */\n                // TODO PrettyError\n                console.warn(\"Invalid `Date`, date string, `Temporal.Instant`, or `Temporal.ZonedDateTime` passed to sleepUntil;\", err);\n                // TODO PrettyError\n                throw new Error(`Invalid \\`Date\\`, date string, \\`Temporal.Instant\\`, or \\`Temporal.ZonedDateTime\\` passed to sleepUntil: ${\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                time}`);\n            }\n        }),\n        /**\n         * Invoke a passed Inngest `function` with the given `data`. Returns the\n         * result of the returned value of the function or `null` if the function\n         * does not return a value.\n         *\n         * A string ID can also be passed to reference functions outside of the\n         * current app.\n         */\n        invoke: createTool(({ id, name }, invokeOpts) => {\n            // Create a discriminated union to operate on based on the input types\n            // available for this tool.\n            const optsSchema = exports.invokePayloadSchema.extend({\n                timeout: zod_1.z.union([zod_1.z.number(), zod_1.z.string(), zod_1.z.date()]).optional(),\n            });\n            const parsedFnOpts = optsSchema\n                .extend({\n                _type: zod_1.z.literal(\"fullId\").optional().default(\"fullId\"),\n                function: zod_1.z.string().min(1),\n            })\n                .or(optsSchema.extend({\n                _type: zod_1.z.literal(\"fnInstance\").optional().default(\"fnInstance\"),\n                function: zod_1.z.instanceof(InngestFunction_js_1.InngestFunction),\n            }))\n                .or(optsSchema.extend({\n                _type: zod_1.z.literal(\"refInstance\").optional().default(\"refInstance\"),\n                function: zod_1.z.instanceof(InngestFunctionReference_js_1.InngestFunctionReference),\n            }))\n                .safeParse(invokeOpts);\n            if (!parsedFnOpts.success) {\n                throw new Error(`Invalid invocation options passed to invoke; must include either a function or functionId.`);\n            }\n            const { _type, function: fn, data, user, v, timeout } = parsedFnOpts.data;\n            const payload = { data, user, v };\n            const opts = {\n                payload,\n                function_id: \"\",\n                timeout: typeof timeout === \"undefined\" ? undefined : (0, strings_js_1.timeStr)(timeout),\n            };\n            switch (_type) {\n                case \"fnInstance\":\n                    opts.function_id = fn.id(fn[\"client\"].id);\n                    break;\n                case \"fullId\":\n                    console.warn(`${consts_js_1.logPrefix} Invoking function with \\`function: string\\` is deprecated and will be removed in v4.0.0; use an imported function or \\`referenceFunction()\\` instead. See https://innge.st/ts-referencing-functions`);\n                    opts.function_id = fn;\n                    break;\n                case \"refInstance\":\n                    opts.function_id = [fn.opts.appId || client.id, fn.opts.functionId]\n                        .filter(Boolean)\n                        .join(\"-\");\n                    break;\n            }\n            return {\n                id,\n                op: types_js_1.StepOpCode.InvokeFunction,\n                displayName: name !== null && name !== void 0 ? name : id,\n                opts,\n            };\n        }),\n        /**\n         * `step.fetch` is a Fetch-API-compatible function that can be used to make\n         * any HTTP code durable if it's called within an Inngest function.\n         *\n         * It will gracefully fall back to the global `fetch` if called outside of\n         * this context, and a custom fallback can be set using the `config` method.\n         */\n        fetch: Fetch_js_1.fetch,\n    };\n    // Add an uptyped gateway\n    tools[exports.gatewaySymbol] = createTool(({ id, name }, input, init) => {\n        var _a;\n        const url = input instanceof Request ? input.url : input.toString();\n        const headers = {};\n        if (input instanceof Request) {\n            input.headers.forEach((value, key) => (headers[key] = value));\n        }\n        else if (init === null || init === void 0 ? void 0 : init.headers) {\n            const h = new Headers(init.headers);\n            h.forEach((value, key) => (headers[key] = value));\n        }\n        return {\n            id,\n            op: types_js_1.StepOpCode.Gateway,\n            displayName: name !== null && name !== void 0 ? name : id,\n            opts: {\n                url,\n                method: (_a = init === null || init === void 0 ? void 0 : init.method) !== null && _a !== void 0 ? _a : \"GET\",\n                headers,\n                body: init === null || init === void 0 ? void 0 : init.body,\n            },\n        };\n    });\n    return tools;\n};\nexports.createStepTools = createStepTools;\nexports.gatewaySymbol = Symbol.for(\"inngest.step.gateway\");\n/**\n * The event payload portion of the options for `step.invoke()`. This does not\n * include non-payload options like `timeout` or the function to invoke.\n */\nexports.invokePayloadSchema = zod_1.z.object({\n    data: zod_1.z.record(zod_1.z.any()).optional(),\n    user: zod_1.z.record(zod_1.z.any()).optional(),\n    v: zod_1.z.string().optional(),\n});\n//# sourceMappingURL=InngestStepTools.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL0lubmdlc3RTdGVwVG9vbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxjQUFjO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcscUJBQXFCLEdBQUcsdUJBQXVCLEdBQUcsNEJBQTRCLEdBQUcsc0JBQXNCO0FBQ3JJLGFBQWEsbUJBQU8sQ0FBQyxtRUFBYTtBQUNsQyxjQUFjLG1CQUFPLENBQUMsa0RBQUs7QUFDM0Isb0JBQW9CLG1CQUFPLENBQUMsNEVBQXNCO0FBQ2xELHFCQUFxQixtQkFBTyxDQUFDLDhFQUF1QjtBQUNwRCw4QkFBOEIsbUJBQU8sQ0FBQyxnRkFBd0I7QUFDOUQsbUJBQW1CLG1CQUFPLENBQUMsMERBQWE7QUFDeEMsbUJBQW1CLG1CQUFPLENBQUMsb0VBQVk7QUFDdkMsNkJBQTZCLG1CQUFPLENBQUMsd0ZBQXNCO0FBQzNELHNDQUFzQyxtQkFBTyxDQUFDLDBHQUErQjtBQUM3RTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxpQ0FBaUM7QUFDbEUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsVUFBVTtBQUN2Qyx1REFBdUQsb0JBQW9CLFFBQVEsSUFBSSxjQUFjLE9BQU8sSUFBSTtBQUNoSCxtQ0FBbUMsZ0hBQWdILGdDQUFnQyxPQUFPLElBQUk7QUFDOUwsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixTQUFTO0FBQ2hDLGNBQWM7QUFDZDtBQUNBO0FBQ0EsdUJBQXVCLFNBQVM7QUFDaEMsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsVUFBVTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxVQUFVO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFVBQVU7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLFVBQVU7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFlBQVksV0FBVyxXQUFXO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFVBQVU7QUFDM0M7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFVBQVU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixzQkFBc0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFVBQVU7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnSUFBZ0k7QUFDaEk7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsVUFBVTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSw4RUFBOEU7QUFDOUU7QUFDQSxvQkFBb0IsOENBQThDO0FBQ2xFLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyx1QkFBdUIseUZBQXlGO0FBQ3BKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsVUFBVTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9haGFycGVyL2lubmdlc3QvaW5uZ2VzdC1zYW5kYm94L3RzLW5leHQvbm9kZV9tb2R1bGVzL2lubmdlc3QvY29tcG9uZW50cy9Jbm5nZXN0U3RlcFRvb2xzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBvd25LZXlzID0gZnVuY3Rpb24obykge1xuICAgICAgICBvd25LZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIHZhciBhciA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBvKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIGspKSBhclthci5sZW5ndGhdID0gaztcbiAgICAgICAgICAgIHJldHVybiBhcjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG93bktleXMobyk7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1vZCkge1xuICAgICAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayA9IG93bktleXMobW9kKSwgaSA9IDA7IGkgPCBrLmxlbmd0aDsgaSsrKSBpZiAoa1tpXSAhPT0gXCJkZWZhdWx0XCIpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwga1tpXSk7XG4gICAgICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmludm9rZVBheWxvYWRTY2hlbWEgPSBleHBvcnRzLmdhdGV3YXlTeW1ib2wgPSBleHBvcnRzLmNyZWF0ZVN0ZXBUb29scyA9IGV4cG9ydHMuU1RFUF9JTkRFWElOR19TVUZGSVggPSBleHBvcnRzLmdldFN0ZXBPcHRpb25zID0gdm9pZCAwO1xuY29uc3QgYWlfMSA9IHJlcXVpcmUoXCJAaW5uZ2VzdC9haVwiKTtcbmNvbnN0IHpvZF8xID0gcmVxdWlyZShcInpvZFwiKTtcbmNvbnN0IGNvbnN0c19qc18xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvY29uc3RzLmpzXCIpO1xuY29uc3Qgc3RyaW5nc19qc18xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvc3RyaW5ncy5qc1wiKTtcbmNvbnN0IFRlbXBvcmFsID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuLi9oZWxwZXJzL3RlbXBvcmFsLmpzXCIpKTtcbmNvbnN0IHR5cGVzX2pzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXMuanNcIik7XG5jb25zdCBGZXRjaF9qc18xID0gcmVxdWlyZShcIi4vRmV0Y2guanNcIik7XG5jb25zdCBJbm5nZXN0RnVuY3Rpb25fanNfMSA9IHJlcXVpcmUoXCIuL0lubmdlc3RGdW5jdGlvbi5qc1wiKTtcbmNvbnN0IElubmdlc3RGdW5jdGlvblJlZmVyZW5jZV9qc18xID0gcmVxdWlyZShcIi4vSW5uZ2VzdEZ1bmN0aW9uUmVmZXJlbmNlLmpzXCIpO1xuY29uc3QgZ2V0U3RlcE9wdGlvbnMgPSAob3B0aW9ucykgPT4ge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4geyBpZDogb3B0aW9ucyB9O1xuICAgIH1cbiAgICByZXR1cm4gb3B0aW9ucztcbn07XG5leHBvcnRzLmdldFN0ZXBPcHRpb25zID0gZ2V0U3RlcE9wdGlvbnM7XG4vKipcbiAqIFN1ZmZpeCB1c2VkIHRvIG5hbWVzcGFjZSBzdGVwcyB0aGF0IGFyZSBhdXRvbWF0aWNhbGx5IGluZGV4ZWQuXG4gKi9cbmV4cG9ydHMuU1RFUF9JTkRFWElOR19TVUZGSVggPSBcIjpcIjtcbi8qKlxuICogQ3JlYXRlIGEgbmV3IHNldCBvZiBzdGVwIGZ1bmN0aW9uIHRvb2xzIHJlYWR5IHRvIGJlIHVzZWQgaW4gYSBzdGVwIGZ1bmN0aW9uLlxuICogVGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgcnVuIGFuZCBhIGZyZXNoIHNldCBvZiB0b29scyBwcm92aWRlZCBldmVyeSB0aW1lIGFcbiAqIGZ1bmN0aW9uIGlzIHJ1bi5cbiAqXG4gKiBBbiBvcCBzdGFjayAoZnVuY3Rpb24gc3RhdGUpIGlzIHBhc3NlZCBpbiBhcyB3ZWxsIGFzIHNvbWUgbXV0YWJsZSBwcm9wZXJ0aWVzXG4gKiB0aGF0IHRoZSB0b29scyBjYW4gdXNlIHRvIHN1Ym1pdCBhIG5ldyBvcC5cbiAqL1xuY29uc3QgY3JlYXRlU3RlcFRvb2xzID0gKGNsaWVudCwgZXhlY3V0aW9uLCBzdGVwSGFuZGxlcikgPT4ge1xuICAgIC8qKlxuICAgICAqIEEgbG9jYWwgaGVscGVyIHVzZWQgdG8gY3JlYXRlIHRvb2xzIHRoYXQgY2FuIGJlIHVzZWQgdG8gc3VibWl0IGFuIG9wLlxuICAgICAqXG4gICAgICogV2hlbiB1c2luZyB0aGlzIGZ1bmN0aW9uLCBhIGdlbmVyaWMgdHlwZSBzaG91bGQgYmUgcHJvdmlkZWQgd2hpY2ggaXMgdGhlXG4gICAgICogZnVuY3Rpb24gc2lnbmF0dXJlIGV4cG9zZWQgdG8gdGhlIHVzZXIuXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBjcmVhdGVUb29sID0gKFxuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIElEIGZvciB0aGlzIG9wLiBUaGlzIGlzIHVzZWQgdG8gZW5zdXJlIHRoYXRcbiAgICAgKiB0aGUgb3Agc3RhY2sgaXMgY29ycmVjdGx5IGZpbGxlZCwgc3VibWl0dGVkLCBhbmQgcmV0cmlldmVkIHdpdGggdGhlIHNhbWVcbiAgICAgKiBJRC5cbiAgICAgKlxuICAgICAqIEl0IGlzIHBhc3NlZCB0aGUgYXJndW1lbnRzIHBhc3NlZCBieSB0aGUgdXNlci5cbiAgICAgKlxuICAgICAqIE1vc3Qgc2ltcGxlIHRvb2xzIHdpbGwgbGlrZWx5IG9ubHkgbmVlZCB0byBkZWZpbmUgdGhpcy5cbiAgICAgKi9cbiAgICBtYXRjaE9wLCBvcHRzKSA9PiB7XG4gICAgICAgIHJldHVybiAoYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZEFyZ3MgPSBhcmdzO1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXBIYW5kbGVyKHsgYXJnczogcGFyc2VkQXJncywgbWF0Y2hPcCwgb3B0cyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgc3RlcCBydW4gdG9vbCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJ1biBhIHN0ZXAgZnVuY3Rpb24gdXNpbmdcbiAgICAgKiBgc3RlcC5ydW4oKWAgYXMgYSBzaGltLlxuICAgICAqL1xuICAgIGNvbnN0IGNyZWF0ZVN0ZXBSdW4gPSAoXG4gICAgLyoqXG4gICAgICogVGhlIHN1Yi10eXBlIG9mIHRoaXMgc3RlcCB0b29sLCBleHBvc2VkIHZpYSBgb3B0cy50eXBlYCB3aGVuIHRoZSBvcCBpc1xuICAgICAqIHJlcG9ydGVkLlxuICAgICAqL1xuICAgIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVRvb2woKHsgaWQsIG5hbWUgfSwgX2ZuLCAuLi5pbnB1dCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgKGlucHV0Lmxlbmd0aCA/IHsgaW5wdXQgfSA6IHt9KSksICh0eXBlID8geyB0eXBlIH0gOiB7fSkpO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBpZCwgb3A6IHR5cGVzX2pzXzEuU3RlcE9wQ29kZS5TdGVwUGxhbm5lZCwgbmFtZTogaWQsIGRpc3BsYXlOYW1lOiBuYW1lICE9PSBudWxsICYmIG5hbWUgIT09IHZvaWQgMCA/IG5hbWUgOiBpZCB9LCAoT2JqZWN0LmtleXMob3B0cykubGVuZ3RoID8geyBvcHRzIH0gOiB7fSkpO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgZm46IChfLCBmbiwgLi4uaW5wdXQpID0+IGZuKC4uLmlucHV0KSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmUgdGhlIHNldCBvZiB0b29scyB0aGUgdXNlciBoYXMgYWNjZXNzIHRvIGZvciB0aGVpciBzdGVwIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEVhY2gga2V5IGlzIHRoZSBmdW5jdGlvbiBuYW1lIGFuZCBpcyBleHBlY3RlZCB0byBydW4gYGNyZWF0ZVRvb2xgIGFuZCBwYXNzXG4gICAgICogYSBnZW5lcmljIHR5cGUgZm9yIHRoYXQgZnVuY3Rpb24gYXMgaXQgd2lsbCBhcHBlYXIgaW4gdGhlIHVzZXIncyBjb2RlLlxuICAgICAqL1xuICAgIGNvbnN0IHRvb2xzID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VuZCBvbmUgb3IgbWFueSBldmVudHMgdG8gSW5uZ2VzdC4gU2hvdWxkIGFsd2F5cyBiZSB1c2VkIGluIHBsYWNlIG9mXG4gICAgICAgICAqIGBpbm5nZXN0LnNlbmQoKWAgdG8gZW5zdXJlIHRoYXQgdGhlIGV2ZW50IHNlbmQgaXMgc3VjY2Vzc2Z1bGx5IHJldHJpZWRcbiAgICAgICAgICogYW5kIG5vdCBzZW50IG11bHRpcGxlIHRpbWVzIGR1ZSB0byBtZW1vaXNhdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogYGBgdHNcbiAgICAgICAgICogYXdhaXQgc3RlcC5zZW5kRXZlbnQoXCJlbWl0LXVzZXItY3JlYXRpb25cIiwge1xuICAgICAgICAgKiAgIG5hbWU6IFwiYXBwL3VzZXIuY3JlYXRlZFwiLFxuICAgICAgICAgKiAgIGRhdGE6IHsgaWQ6IDEyMyB9LFxuICAgICAgICAgKiB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogYXdhaXQgc3RlcC5zZW5kRXZlbnQoXCJlbWl0LXVzZXItdXBkYXRlc1wiLCBbXG4gICAgICAgICAqICAge1xuICAgICAgICAgKiAgICAgbmFtZTogXCJhcHAvdXNlci5jcmVhdGVkXCIsXG4gICAgICAgICAqICAgICBkYXRhOiB7IGlkOiAxMjMgfSxcbiAgICAgICAgICogICB9LFxuICAgICAgICAgKiAgIHtcbiAgICAgICAgICogICAgIG5hbWU6IFwiYXBwL3VzZXIuZmVlZC5jcmVhdGVkXCIsXG4gICAgICAgICAqICAgICBkYXRhOiB7IGlkOiAxMjMgfSxcbiAgICAgICAgICogICB9LFxuICAgICAgICAgKiBdKTtcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqXG4gICAgICAgICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIG9uY2UgdGhlIGV2ZW50IGhhcyBiZWVuIHNlbnQuXG4gICAgICAgICAqL1xuICAgICAgICBzZW5kRXZlbnQ6IGNyZWF0ZVRvb2woKHsgaWQsIG5hbWUgfSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICBvcDogdHlwZXNfanNfMS5TdGVwT3BDb2RlLlN0ZXBQbGFubmVkLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2VuZEV2ZW50XCIsXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IG5hbWUgIT09IG51bGwgJiYgbmFtZSAhPT0gdm9pZCAwID8gbmFtZSA6IGlkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgZm46IChpZE9yT3B0aW9ucywgcGF5bG9hZCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnRbXCJfc2VuZFwiXSh7XG4gICAgICAgICAgICAgICAgICAgIHBheWxvYWQsXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGV4ZWN1dGlvbltcIm9wdGlvbnNcIl1bXCJoZWFkZXJzXCJdLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFWFBFUklNRU5UQUw6IFRoaXMgQVBJIGlzIG5vdCB5ZXQgc3RhYmxlIGFuZCBtYXkgY2hhbmdlIGluIHRoZSBmdXR1cmVcbiAgICAgICAgICogd2l0aG91dCBhIG1ham9yIHZlcnNpb24gYnVtcC5cbiAgICAgICAgICpcbiAgICAgICAgICogV2FpdCBmb3IgYSBwYXJ0aWN1bGFyIHNpZ25hbCB0byBiZSByZWNlaXZlZCBiZWZvcmUgY29udGludWluZy4gV2hlbiB0aGVcbiAgICAgICAgICogc2lnbmFsIGlzIHJlY2VpdmVkLCBpdHMgZGF0YSB3aWxsIGJlIHJldHVybmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgd2FpdEZvclNpZ25hbDogY3JlYXRlVG9vbCgoeyBpZCwgbmFtZSB9LCBvcHRzKSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPIFNob3VsZCBzdXBwb3J0IFRlbXBvcmFsLkR1cmF0aW9uTGlrZSwgVGVtcG9yYWwuSW5zdGFudExpa2UsXG4gICAgICAgICAgICAvLyBUZW1wb3JhbC5ab25lZERhdGVUaW1lTGlrZVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICBvcDogdHlwZXNfanNfMS5TdGVwT3BDb2RlLldhaXRGb3JTaWduYWwsXG4gICAgICAgICAgICAgICAgbmFtZTogb3B0cy5zaWduYWwsXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IG5hbWUgIT09IG51bGwgJiYgbmFtZSAhPT0gdm9pZCAwID8gbmFtZSA6IGlkLFxuICAgICAgICAgICAgICAgIG9wdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBvcHRzLnNpZ25hbCxcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dDogKDAsIHN0cmluZ3NfanNfMS50aW1lU3RyKShvcHRzLnRpbWVvdXQpLFxuICAgICAgICAgICAgICAgICAgICBjb25mbGljdDogb3B0cy5vbkNvbmZsaWN0LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlbmQgYSBTaWduYWwgdG8gSW5uZ2VzdC5cbiAgICAgICAgICovXG4gICAgICAgIHNlbmRTaWduYWw6IGNyZWF0ZVRvb2woKHsgaWQsIG5hbWUgfSwgb3B0cykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICBvcDogdHlwZXNfanNfMS5TdGVwT3BDb2RlLlN0ZXBQbGFubmVkLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2VuZFNpZ25hbFwiLFxuICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBuYW1lICE9PSBudWxsICYmIG5hbWUgIT09IHZvaWQgMCA/IG5hbWUgOiBpZCxcbiAgICAgICAgICAgICAgICBvcHRzOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RlcC5zZW5kU2lnbmFsXCIsXG4gICAgICAgICAgICAgICAgICAgIHNpZ25hbDogb3B0cy5zaWduYWwsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGZuOiAoX2lkT3JPcHRpb25zLCBvcHRzKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudFtcIl9zZW5kU2lnbmFsXCJdKHtcbiAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBvcHRzLnNpZ25hbCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogb3B0cy5kYXRhLFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBleGVjdXRpb25bXCJvcHRpb25zXCJdW1wiaGVhZGVyc1wiXSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICogV2FpdCBmb3IgYSBwYXJ0aWN1bGFyIGV2ZW50IHRvIGJlIHJlY2VpdmVkIGJlZm9yZSBjb250aW51aW5nLiBXaGVuIHRoZVxuICAgICAgICAgKiBldmVudCBpcyByZWNlaXZlZCwgaXQgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgICAgICpcbiAgICAgICAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgb3B0aW9ucyB0byBjb250cm9sIHRoZSBwYXJ0aWN1bGFyIGV2ZW50IHRoYXQgaXNcbiAgICAgICAgICogcmVjZWl2ZWQsIGZvciBleGFtcGxlIHRvIGVuc3VyZSB0aGF0IGEgdXNlciBJRCBtYXRjaGVzIGJldHdlZW4gdHdvXG4gICAgICAgICAqIGV2ZW50cywgb3IgdG8gb25seSB3YWl0IGEgbWF4aW11bSBhbW91bnQgb2YgdGltZSBiZWZvcmUgZ2l2aW5nIHVwIGFuZFxuICAgICAgICAgKiByZXR1cm5pbmcgYG51bGxgIGluc3RlYWQgb2YgYW55IGV2ZW50IGRhdGEuXG4gICAgICAgICAqL1xuICAgICAgICB3YWl0Rm9yRXZlbnQ6IGNyZWF0ZVRvb2woKHsgaWQsIG5hbWUgfSwgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcHRpb25zIHRvIGNvbnRyb2wgdGhlIGV2ZW50IHdlJ3JlIHdhaXRpbmcgZm9yLlxuICAgICAgICAgKi9cbiAgICAgICAgb3B0cykgPT4ge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hPcHRzID0ge1xuICAgICAgICAgICAgICAgIHRpbWVvdXQ6ICgwLCBzdHJpbmdzX2pzXzEudGltZVN0cikodHlwZW9mIG9wdHMgPT09IFwic3RyaW5nXCIgPyBvcHRzIDogb3B0cy50aW1lb3V0KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdHMgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLm1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoT3B0cy5pZiA9IGBldmVudC4ke29wdHMubWF0Y2h9ID09IGFzeW5jLiR7b3B0cy5tYXRjaH1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuaWYpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hPcHRzLmlmID0gb3B0cy5pZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIG9wOiB0eXBlc19qc18xLlN0ZXBPcENvZGUuV2FpdEZvckV2ZW50LFxuICAgICAgICAgICAgICAgIG5hbWU6IG9wdHMuZXZlbnQsXG4gICAgICAgICAgICAgICAgb3B0czogbWF0Y2hPcHRzLFxuICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBuYW1lICE9PSBudWxsICYmIG5hbWUgIT09IHZvaWQgMCA/IG5hbWUgOiBpZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICogVXNlIHRoaXMgdG9vbCB0byBydW4gYnVzaW5lc3MgbG9naWMuIEVhY2ggY2FsbCB0byBgcnVuYCB3aWxsIGJlIHJldHJpZWRcbiAgICAgICAgICogaW5kaXZpZHVhbGx5LCBtZWFuaW5nIHlvdSBjYW4gY29tcG9zZSBjb21wbGV4IHdvcmtmbG93cyB0aGF0IHNhZmVseVxuICAgICAgICAgKiByZXRyeSBkZXBlbmRlbnQgYXN5bmNocm9ub3VzIGFjdGlvbnMuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBmdW5jdGlvbiB5b3UgcGFzcyB0byBgcnVuYCB3aWxsIGJlIGNhbGxlZCBvbmx5IHdoZW4gdGhpcyBcInN0ZXBcIiBpcyB0b1xuICAgICAgICAgKiBiZSBleGVjdXRlZCBhbmQgY2FuIGJlIHN5bmNocm9ub3VzIG9yIGFzeW5jaHJvbm91cy5cbiAgICAgICAgICpcbiAgICAgICAgICogSW4gZWl0aGVyIGNhc2UsIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZ1bmN0aW9uIHdpbGwgYmUgdGhlIHJldHVybiB2YWx1ZVxuICAgICAgICAgKiBvZiB0aGUgYHJ1bmAgdG9vbCwgbWVhbmluZyB5b3UgY2FuIHJldHVybiBhbmQgcmVhc29uIGFib3V0IHJldHVybiBkYXRhXG4gICAgICAgICAqIGZvciBuZXh0IHN0ZXBzLlxuICAgICAgICAgKi9cbiAgICAgICAgcnVuOiBjcmVhdGVTdGVwUnVuKCksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBSSB0b29saW5nIGZvciBydW5uaW5nIEFJIG1vZGVscyBhbmQgb3RoZXIgQUktcmVsYXRlZCB0YXNrcy5cbiAgICAgICAgICovXG4gICAgICAgIGFpOiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZSB0aGlzIHRvb2wgdG8gaGF2ZSBJbm5nZXN0IG1ha2UgeW91ciBBSSBjYWxscy4gVXNlZnVsIGZvciBhZ2VudGljIHdvcmtmbG93cy5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBJbnB1dCBpcyBhbHNvIHRyYWNrZWQgZm9yIHRoaXMgdG9vbCwgbWVhbmluZyB5b3UgY2FuIHBhc3MgaW5wdXQgdG8gdGhlXG4gICAgICAgICAgICAgKiBmdW5jdGlvbiBhbmQgaXQgd2lsbCBiZSBkaXNwbGF5ZWQgYW5kIGVkaXRhYmxlIGluIHRoZSBVSS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5mZXI6IGNyZWF0ZVRvb2woKHsgaWQsIG5hbWUgfSwgb3B0aW9ucykgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kZWxDb3B5ID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucy5tb2RlbCk7XG4gICAgICAgICAgICAgICAgLy8gQWxsb3cgdGhlIG1vZGVsIHRvIG11dGF0ZSBvcHRpb25zIGFuZCBib2R5IGZvciB0aGlzIGNhbGxcbiAgICAgICAgICAgICAgICAoX2IgPSAoX2EgPSBvcHRpb25zLm1vZGVsKS5vbkNhbGwpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBtb2RlbENvcHksIG9wdGlvbnMuYm9keSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIG9wOiB0eXBlc19qc18xLlN0ZXBPcENvZGUuQWlHYXRld2F5LFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogbmFtZSAhPT0gbnVsbCAmJiBuYW1lICE9PSB2b2lkIDAgPyBuYW1lIDogaWQsXG4gICAgICAgICAgICAgICAgICAgIG9wdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RlcC5haS5pbmZlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBtb2RlbENvcHkudXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogbW9kZWxDb3B5LmhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoX2tleTogbW9kZWxDb3B5LmF1dGhLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IG1vZGVsQ29weS5mb3JtYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBvcHRpb25zLmJvZHksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBVc2UgdGhpcyB0b29sIHRvIHdyYXAgQUkgbW9kZWxzIGFuZCBvdGhlciBBSS1yZWxhdGVkIHRhc2tzLiBFYWNoIGNhbGxcbiAgICAgICAgICAgICAqIHRvIGB3cmFwYCB3aWxsIGJlIHJldHJpZWQgaW5kaXZpZHVhbGx5LCBtZWFuaW5nIHlvdSBjYW4gY29tcG9zZSBjb21wbGV4XG4gICAgICAgICAgICAgKiB3b3JrZmxvd3MgdGhhdCBzYWZlbHkgcmV0cnkgZGVwZW5kZW50IGFzeW5jaHJvbm91cyBhY3Rpb25zLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIElucHV0IGlzIGFsc28gdHJhY2tlZCBmb3IgdGhpcyB0b29sLCBtZWFuaW5nIHlvdSBjYW4gcGFzcyBpbnB1dCB0byB0aGVcbiAgICAgICAgICAgICAqIGZ1bmN0aW9uIGFuZCBpdCB3aWxsIGJlIGRpc3BsYXllZCBhbmQgZWRpdGFibGUgaW4gdGhlIFVJLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB3cmFwOiBjcmVhdGVTdGVwUnVuKFwic3RlcC5haS53cmFwXCIpLFxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBNb2RlbHMgZm9yIEFJIGluZmVyZW5jZSBhbmQgb3RoZXIgQUktcmVsYXRlZCB0YXNrcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbW9kZWxzOiBPYmplY3QuYXNzaWduKHt9LCBhaV8xLm1vZGVscyksXG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXYWl0IGEgc3BlY2lmaWVkIGFtb3VudCBvZiB0aW1lIGJlZm9yZSBjb250aW51aW5nLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGUgdGltZSB0byB3YWl0IGNhbiBiZSBzcGVjaWZpZWQgdXNpbmcgYSBgbnVtYmVyYCBvZiBtaWxsaXNlY29uZHMgb3IgYW5cbiAgICAgICAgICogYG1zYC1jb21wYXRpYmxlIHRpbWUgc3RyaW5nIGxpa2UgYFwiMSBob3VyXCJgLCBgXCIzMCBtaW5zXCJgLCBvciBgXCIyLjVkXCJgLlxuICAgICAgICAgKlxuICAgICAgICAgKiB7QGxpbmsgaHR0cHM6Ly9ucG0uaW0vbXN9XG4gICAgICAgICAqXG4gICAgICAgICAqIFRvIHdhaXQgdW50aWwgYSBwYXJ0aWN1bGFyIGRhdGUsIHVzZSBgc2xlZXBVbnRpbGAgaW5zdGVhZC5cbiAgICAgICAgICovXG4gICAgICAgIHNsZWVwOiBjcmVhdGVUb29sKCh7IGlkLCBuYW1lIH0sIHRpbWUpID0+IHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIHByZXNlbmNlIG9mIHRoaXMgb3BlcmF0aW9uIGluIHRoZSByZXR1cm5lZCBzdGFjayBpbmRpY2F0ZXMgdGhhdCB0aGVcbiAgICAgICAgICAgICAqIHNsZWVwIGlzIG92ZXIgYW5kIHdlIHNob3VsZCBjb250aW51ZSBleGVjdXRpb24uXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNvbnN0IG1zVGltZVN0ciA9ICgwLCBzdHJpbmdzX2pzXzEudGltZVN0cikoVGVtcG9yYWwuaXNUZW1wb3JhbER1cmF0aW9uKHRpbWUpXG4gICAgICAgICAgICAgICAgPyB0aW1lLnRvdGFsKHsgdW5pdDogXCJtaWxsaXNlY29uZHNcIiB9KVxuICAgICAgICAgICAgICAgIDogdGltZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIG9wOiB0eXBlc19qc18xLlN0ZXBPcENvZGUuU2xlZXAsXG4gICAgICAgICAgICAgICAgbmFtZTogbXNUaW1lU3RyLFxuICAgICAgICAgICAgICAgIGRpc3BsYXlOYW1lOiBuYW1lICE9PSBudWxsICYmIG5hbWUgIT09IHZvaWQgMCA/IG5hbWUgOiBpZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICogV2FpdCB1bnRpbCBhIHBhcnRpY3VsYXIgZGF0ZSBiZWZvcmUgY29udGludWluZyBieSBwYXNzaW5nIGEgYERhdGVgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUbyB3YWl0IGZvciBhIHBhcnRpY3VsYXIgYW1vdW50IG9mIHRpbWUgZnJvbSBub3csIGFsd2F5cyB1c2UgYHNsZWVwYFxuICAgICAgICAgKiBpbnN0ZWFkLlxuICAgICAgICAgKi9cbiAgICAgICAgc2xlZXBVbnRpbDogY3JlYXRlVG9vbCgoeyBpZCwgbmFtZSB9LCB0aW1lKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzbyA9IFRlbXBvcmFsLmdldElTT1N0cmluZyh0aW1lKTtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBUaGUgcHJlc2VuY2Ugb2YgdGhpcyBvcGVyYXRpb24gaW4gdGhlIHJldHVybmVkIHN0YWNrIGluZGljYXRlcyB0aGF0IHRoZVxuICAgICAgICAgICAgICAgICAqIHNsZWVwIGlzIG92ZXIgYW5kIHdlIHNob3VsZCBjb250aW51ZSBleGVjdXRpb24uXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIG9wOiB0eXBlc19qc18xLlN0ZXBPcENvZGUuU2xlZXAsXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGlzbyxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IG5hbWUgIT09IG51bGwgJiYgbmFtZSAhPT0gdm9pZCAwID8gbmFtZSA6IGlkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSWYgd2UncmUgaGVyZSwgaXQncyBiZWNhdXNlIHRoZSBkYXRlIGlzIGludmFsaWQuIFdlJ2xsIHRocm93IGEgY3VzdG9tXG4gICAgICAgICAgICAgICAgICogZXJyb3IgaGVyZSB0byBzdGFuZGFyZGlzZSB0aGlzIHJlc3BvbnNlLlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIC8vIFRPRE8gUHJldHR5RXJyb3JcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIGBEYXRlYCwgZGF0ZSBzdHJpbmcsIGBUZW1wb3JhbC5JbnN0YW50YCwgb3IgYFRlbXBvcmFsLlpvbmVkRGF0ZVRpbWVgIHBhc3NlZCB0byBzbGVlcFVudGlsO1wiLCBlcnIpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE8gUHJldHR5RXJyb3JcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgXFxgRGF0ZVxcYCwgZGF0ZSBzdHJpbmcsIFxcYFRlbXBvcmFsLkluc3RhbnRcXGAsIG9yIFxcYFRlbXBvcmFsLlpvbmVkRGF0ZVRpbWVcXGAgcGFzc2VkIHRvIHNsZWVwVW50aWw6ICR7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgICB0aW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEludm9rZSBhIHBhc3NlZCBJbm5nZXN0IGBmdW5jdGlvbmAgd2l0aCB0aGUgZ2l2ZW4gYGRhdGFgLiBSZXR1cm5zIHRoZVxuICAgICAgICAgKiByZXN1bHQgb2YgdGhlIHJldHVybmVkIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiBvciBgbnVsbGAgaWYgdGhlIGZ1bmN0aW9uXG4gICAgICAgICAqIGRvZXMgbm90IHJldHVybiBhIHZhbHVlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBBIHN0cmluZyBJRCBjYW4gYWxzbyBiZSBwYXNzZWQgdG8gcmVmZXJlbmNlIGZ1bmN0aW9ucyBvdXRzaWRlIG9mIHRoZVxuICAgICAgICAgKiBjdXJyZW50IGFwcC5cbiAgICAgICAgICovXG4gICAgICAgIGludm9rZTogY3JlYXRlVG9vbCgoeyBpZCwgbmFtZSB9LCBpbnZva2VPcHRzKSA9PiB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBkaXNjcmltaW5hdGVkIHVuaW9uIHRvIG9wZXJhdGUgb24gYmFzZWQgb24gdGhlIGlucHV0IHR5cGVzXG4gICAgICAgICAgICAvLyBhdmFpbGFibGUgZm9yIHRoaXMgdG9vbC5cbiAgICAgICAgICAgIGNvbnN0IG9wdHNTY2hlbWEgPSBleHBvcnRzLmludm9rZVBheWxvYWRTY2hlbWEuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0OiB6b2RfMS56LnVuaW9uKFt6b2RfMS56Lm51bWJlcigpLCB6b2RfMS56LnN0cmluZygpLCB6b2RfMS56LmRhdGUoKV0pLm9wdGlvbmFsKCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZEZuT3B0cyA9IG9wdHNTY2hlbWFcbiAgICAgICAgICAgICAgICAuZXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBfdHlwZTogem9kXzEuei5saXRlcmFsKFwiZnVsbElkXCIpLm9wdGlvbmFsKCkuZGVmYXVsdChcImZ1bGxJZFwiKSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbjogem9kXzEuei5zdHJpbmcoKS5taW4oMSksXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vcihvcHRzU2NoZW1hLmV4dGVuZCh7XG4gICAgICAgICAgICAgICAgX3R5cGU6IHpvZF8xLnoubGl0ZXJhbChcImZuSW5zdGFuY2VcIikub3B0aW9uYWwoKS5kZWZhdWx0KFwiZm5JbnN0YW5jZVwiKSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbjogem9kXzEuei5pbnN0YW5jZW9mKElubmdlc3RGdW5jdGlvbl9qc18xLklubmdlc3RGdW5jdGlvbiksXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAub3Iob3B0c1NjaGVtYS5leHRlbmQoe1xuICAgICAgICAgICAgICAgIF90eXBlOiB6b2RfMS56LmxpdGVyYWwoXCJyZWZJbnN0YW5jZVwiKS5vcHRpb25hbCgpLmRlZmF1bHQoXCJyZWZJbnN0YW5jZVwiKSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbjogem9kXzEuei5pbnN0YW5jZW9mKElubmdlc3RGdW5jdGlvblJlZmVyZW5jZV9qc18xLklubmdlc3RGdW5jdGlvblJlZmVyZW5jZSksXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICAuc2FmZVBhcnNlKGludm9rZU9wdHMpO1xuICAgICAgICAgICAgaWYgKCFwYXJzZWRGbk9wdHMuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBpbnZvY2F0aW9uIG9wdGlvbnMgcGFzc2VkIHRvIGludm9rZTsgbXVzdCBpbmNsdWRlIGVpdGhlciBhIGZ1bmN0aW9uIG9yIGZ1bmN0aW9uSWQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IF90eXBlLCBmdW5jdGlvbjogZm4sIGRhdGEsIHVzZXIsIHYsIHRpbWVvdXQgfSA9IHBhcnNlZEZuT3B0cy5kYXRhO1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHsgZGF0YSwgdXNlciwgdiB9O1xuICAgICAgICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgICAgICAgICBwYXlsb2FkLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uX2lkOiBcIlwiLFxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IHR5cGVvZiB0aW1lb3V0ID09PSBcInVuZGVmaW5lZFwiID8gdW5kZWZpbmVkIDogKDAsIHN0cmluZ3NfanNfMS50aW1lU3RyKSh0aW1lb3V0KSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzd2l0Y2ggKF90eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImZuSW5zdGFuY2VcIjpcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5mdW5jdGlvbl9pZCA9IGZuLmlkKGZuW1wiY2xpZW50XCJdLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImZ1bGxJZFwiOlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYCR7Y29uc3RzX2pzXzEubG9nUHJlZml4fSBJbnZva2luZyBmdW5jdGlvbiB3aXRoIFxcYGZ1bmN0aW9uOiBzdHJpbmdcXGAgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHY0LjAuMDsgdXNlIGFuIGltcG9ydGVkIGZ1bmN0aW9uIG9yIFxcYHJlZmVyZW5jZUZ1bmN0aW9uKClcXGAgaW5zdGVhZC4gU2VlIGh0dHBzOi8vaW5uZ2Uuc3QvdHMtcmVmZXJlbmNpbmctZnVuY3Rpb25zYCk7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuZnVuY3Rpb25faWQgPSBmbjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcInJlZkluc3RhbmNlXCI6XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuZnVuY3Rpb25faWQgPSBbZm4ub3B0cy5hcHBJZCB8fCBjbGllbnQuaWQsIGZuLm9wdHMuZnVuY3Rpb25JZF1cbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKFwiLVwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgIG9wOiB0eXBlc19qc18xLlN0ZXBPcENvZGUuSW52b2tlRnVuY3Rpb24sXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IG5hbWUgIT09IG51bGwgJiYgbmFtZSAhPT0gdm9pZCAwID8gbmFtZSA6IGlkLFxuICAgICAgICAgICAgICAgIG9wdHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGBzdGVwLmZldGNoYCBpcyBhIEZldGNoLUFQSS1jb21wYXRpYmxlIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gbWFrZVxuICAgICAgICAgKiBhbnkgSFRUUCBjb2RlIGR1cmFibGUgaWYgaXQncyBjYWxsZWQgd2l0aGluIGFuIElubmdlc3QgZnVuY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEl0IHdpbGwgZ3JhY2VmdWxseSBmYWxsIGJhY2sgdG8gdGhlIGdsb2JhbCBgZmV0Y2hgIGlmIGNhbGxlZCBvdXRzaWRlIG9mXG4gICAgICAgICAqIHRoaXMgY29udGV4dCwgYW5kIGEgY3VzdG9tIGZhbGxiYWNrIGNhbiBiZSBzZXQgdXNpbmcgdGhlIGBjb25maWdgIG1ldGhvZC5cbiAgICAgICAgICovXG4gICAgICAgIGZldGNoOiBGZXRjaF9qc18xLmZldGNoLFxuICAgIH07XG4gICAgLy8gQWRkIGFuIHVwdHlwZWQgZ2F0ZXdheVxuICAgIHRvb2xzW2V4cG9ydHMuZ2F0ZXdheVN5bWJvbF0gPSBjcmVhdGVUb29sKCh7IGlkLCBuYW1lIH0sIGlucHV0LCBpbml0KSA9PiB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgdXJsID0gaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0ID8gaW5wdXQudXJsIDogaW5wdXQudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHt9O1xuICAgICAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgICAgICAgICBpbnB1dC5oZWFkZXJzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IChoZWFkZXJzW2tleV0gPSB2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluaXQgPT09IG51bGwgfHwgaW5pdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdC5oZWFkZXJzKSB7XG4gICAgICAgICAgICBjb25zdCBoID0gbmV3IEhlYWRlcnMoaW5pdC5oZWFkZXJzKTtcbiAgICAgICAgICAgIGguZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gKGhlYWRlcnNba2V5XSA9IHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgb3A6IHR5cGVzX2pzXzEuU3RlcE9wQ29kZS5HYXRld2F5LFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6IG5hbWUgIT09IG51bGwgJiYgbmFtZSAhPT0gdm9pZCAwID8gbmFtZSA6IGlkLFxuICAgICAgICAgICAgb3B0czoge1xuICAgICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgICBtZXRob2Q6IChfYSA9IGluaXQgPT09IG51bGwgfHwgaW5pdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdC5tZXRob2QpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgICAgICBib2R5OiBpbml0ID09PSBudWxsIHx8IGluaXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluaXQuYm9keSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHRvb2xzO1xufTtcbmV4cG9ydHMuY3JlYXRlU3RlcFRvb2xzID0gY3JlYXRlU3RlcFRvb2xzO1xuZXhwb3J0cy5nYXRld2F5U3ltYm9sID0gU3ltYm9sLmZvcihcImlubmdlc3Quc3RlcC5nYXRld2F5XCIpO1xuLyoqXG4gKiBUaGUgZXZlbnQgcGF5bG9hZCBwb3J0aW9uIG9mIHRoZSBvcHRpb25zIGZvciBgc3RlcC5pbnZva2UoKWAuIFRoaXMgZG9lcyBub3RcbiAqIGluY2x1ZGUgbm9uLXBheWxvYWQgb3B0aW9ucyBsaWtlIGB0aW1lb3V0YCBvciB0aGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICovXG5leHBvcnRzLmludm9rZVBheWxvYWRTY2hlbWEgPSB6b2RfMS56Lm9iamVjdCh7XG4gICAgZGF0YTogem9kXzEuei5yZWNvcmQoem9kXzEuei5hbnkoKSkub3B0aW9uYWwoKSxcbiAgICB1c2VyOiB6b2RfMS56LnJlY29yZCh6b2RfMS56LmFueSgpKS5vcHRpb25hbCgpLFxuICAgIHY6IHpvZF8xLnouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5uZ2VzdFN0ZXBUb29scy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/InngestStepTools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/NonRetriableError.js":
/*!**************************************************************!*\
  !*** ./node_modules/inngest/components/NonRetriableError.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NonRetriableError = void 0;\n/**\n * An error that, when thrown, indicates to Inngest that the function should\n * cease all execution and not retry.\n *\n * A `message` must be provided, and an optional `cause` can be provided to\n * provide more context to the error.\n *\n * @public\n */\nclass NonRetriableError extends Error {\n    constructor(message, options) {\n        super(message);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.cause = options === null || options === void 0 ? void 0 : options.cause;\n        this.name = \"NonRetriableError\";\n    }\n}\nexports.NonRetriableError = NonRetriableError;\n//# sourceMappingURL=NonRetriableError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL05vblJldHJpYWJsZUVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyIvVXNlcnMvYWhhcnBlci9pbm5nZXN0L2lubmdlc3Qtc2FuZGJveC90cy1uZXh0L25vZGVfbW9kdWxlcy9pbm5nZXN0L2NvbXBvbmVudHMvTm9uUmV0cmlhYmxlRXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk5vblJldHJpYWJsZUVycm9yID0gdm9pZCAwO1xuLyoqXG4gKiBBbiBlcnJvciB0aGF0LCB3aGVuIHRocm93biwgaW5kaWNhdGVzIHRvIElubmdlc3QgdGhhdCB0aGUgZnVuY3Rpb24gc2hvdWxkXG4gKiBjZWFzZSBhbGwgZXhlY3V0aW9uIGFuZCBub3QgcmV0cnkuXG4gKlxuICogQSBgbWVzc2FnZWAgbXVzdCBiZSBwcm92aWRlZCwgYW5kIGFuIG9wdGlvbmFsIGBjYXVzZWAgY2FuIGJlIHByb3ZpZGVkIHRvXG4gKiBwcm92aWRlIG1vcmUgY29udGV4dCB0byB0aGUgZXJyb3IuXG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBOb25SZXRyaWFibGVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgICAgIHRoaXMuY2F1c2UgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY2F1c2U7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiTm9uUmV0cmlhYmxlRXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLk5vblJldHJpYWJsZUVycm9yID0gTm9uUmV0cmlhYmxlRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob25SZXRyaWFibGVFcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/NonRetriableError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/RetryAfterError.js":
/*!************************************************************!*\
  !*** ./node_modules/inngest/components/RetryAfterError.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RetryAfterError = void 0;\nconst ms_1 = __importDefault(__webpack_require__(/*! ms */ \"(rsc)/./node_modules/inngest/node_modules/ms/index.js\"));\n/**\n * An error that, when thrown, indicates to Inngest that the function should be\n * retried after a given amount of time.\n *\n * A `message` must be provided, as well as a `retryAfter` parameter, which can\n * be a `number` of milliseconds, an `ms`-compatible time string, or a `Date`.\n *\n * An optional `cause` can be provided to provide more context to the error.\n *\n * @public\n */\nclass RetryAfterError extends Error {\n    constructor(message, \n    /**\n     * The time after which the function should be retried. Represents either a\n     * number of milliseconds or a RFC3339 date.\n     */\n    retryAfter, options) {\n        super(message);\n        if (retryAfter instanceof Date) {\n            this.retryAfter = retryAfter.toISOString();\n        }\n        else {\n            const seconds = `${Math.ceil((typeof retryAfter === \"string\" ? (0, ms_1.default)(retryAfter) : retryAfter) / 1000)}`;\n            if (!isFinite(Number(seconds))) {\n                throw new Error(\"retryAfter must be a number of milliseconds, a ms-compatible string, or a Date\");\n            }\n            this.retryAfter = seconds;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.cause = options === null || options === void 0 ? void 0 : options.cause;\n    }\n}\nexports.RetryAfterError = RetryAfterError;\n//# sourceMappingURL=RetryAfterError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL1JldHJ5QWZ0ZXJFcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2Qiw2QkFBNkIsbUJBQU8sQ0FBQyxpRUFBSTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGdHQUFnRztBQUMvSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9haGFycGVyL2lubmdlc3QvaW5uZ2VzdC1zYW5kYm94L3RzLW5leHQvbm9kZV9tb2R1bGVzL2lubmdlc3QvY29tcG9uZW50cy9SZXRyeUFmdGVyRXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJldHJ5QWZ0ZXJFcnJvciA9IHZvaWQgMDtcbmNvbnN0IG1zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm1zXCIpKTtcbi8qKlxuICogQW4gZXJyb3IgdGhhdCwgd2hlbiB0aHJvd24sIGluZGljYXRlcyB0byBJbm5nZXN0IHRoYXQgdGhlIGZ1bmN0aW9uIHNob3VsZCBiZVxuICogcmV0cmllZCBhZnRlciBhIGdpdmVuIGFtb3VudCBvZiB0aW1lLlxuICpcbiAqIEEgYG1lc3NhZ2VgIG11c3QgYmUgcHJvdmlkZWQsIGFzIHdlbGwgYXMgYSBgcmV0cnlBZnRlcmAgcGFyYW1ldGVyLCB3aGljaCBjYW5cbiAqIGJlIGEgYG51bWJlcmAgb2YgbWlsbGlzZWNvbmRzLCBhbiBgbXNgLWNvbXBhdGlibGUgdGltZSBzdHJpbmcsIG9yIGEgYERhdGVgLlxuICpcbiAqIEFuIG9wdGlvbmFsIGBjYXVzZWAgY2FuIGJlIHByb3ZpZGVkIHRvIHByb3ZpZGUgbW9yZSBjb250ZXh0IHRvIHRoZSBlcnJvci5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmNsYXNzIFJldHJ5QWZ0ZXJFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBcbiAgICAvKipcbiAgICAgKiBUaGUgdGltZSBhZnRlciB3aGljaCB0aGUgZnVuY3Rpb24gc2hvdWxkIGJlIHJldHJpZWQuIFJlcHJlc2VudHMgZWl0aGVyIGFcbiAgICAgKiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIG9yIGEgUkZDMzMzOSBkYXRlLlxuICAgICAqL1xuICAgIHJldHJ5QWZ0ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIGlmIChyZXRyeUFmdGVyIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5yZXRyeUFmdGVyID0gcmV0cnlBZnRlci50b0lTT1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc2Vjb25kcyA9IGAke01hdGguY2VpbCgodHlwZW9mIHJldHJ5QWZ0ZXIgPT09IFwic3RyaW5nXCIgPyAoMCwgbXNfMS5kZWZhdWx0KShyZXRyeUFmdGVyKSA6IHJldHJ5QWZ0ZXIpIC8gMTAwMCl9YDtcbiAgICAgICAgICAgIGlmICghaXNGaW5pdGUoTnVtYmVyKHNlY29uZHMpKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJldHJ5QWZ0ZXIgbXVzdCBiZSBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGEgbXMtY29tcGF0aWJsZSBzdHJpbmcsIG9yIGEgRGF0ZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmV0cnlBZnRlciA9IHNlY29uZHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudFxuICAgICAgICB0aGlzLmNhdXNlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNhdXNlO1xuICAgIH1cbn1cbmV4cG9ydHMuUmV0cnlBZnRlckVycm9yID0gUmV0cnlBZnRlckVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmV0cnlBZnRlckVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/RetryAfterError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/StepError.js":
/*!******************************************************!*\
  !*** ./node_modules/inngest/components/StepError.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StepError = void 0;\nconst errors_js_1 = __webpack_require__(/*! ../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\n/**\n * An error that represents a step exhausting all retries and failing. This is\n * thrown by an Inngest step if it fails.\n *\n * It's synonymous with an `Error`, with the addition of the `stepId` that\n * failed.\n *\n * @public\n */\nclass StepError extends Error {\n    constructor(\n    /**\n     * The ID of the step that failed.\n     */\n    stepId, err) {\n        var _a;\n        const parsedErr = types_js_1.jsonErrorSchema.parse(err);\n        super(parsedErr.message);\n        this.stepId = stepId;\n        this.name = parsedErr.name;\n        this.stepId = stepId;\n        // Don't show the internal stack trace if we don't have one.\n        this.stack = (_a = parsedErr.stack) !== null && _a !== void 0 ? _a : undefined;\n        // Try setting the cause if we have one\n        this.cause = parsedErr.cause\n            ? (0, errors_js_1.deserializeError)(parsedErr.cause, true)\n            : undefined;\n    }\n}\nexports.StepError = StepError;\n//# sourceMappingURL=StepError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL1N0ZXBFcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsb0JBQW9CLG1CQUFPLENBQUMsNEVBQXNCO0FBQ2xELG1CQUFtQixtQkFBTyxDQUFDLDBEQUFhO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9haGFycGVyL2lubmdlc3QvaW5uZ2VzdC1zYW5kYm94L3RzLW5leHQvbm9kZV9tb2R1bGVzL2lubmdlc3QvY29tcG9uZW50cy9TdGVwRXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlN0ZXBFcnJvciA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvZXJyb3JzLmpzXCIpO1xuY29uc3QgdHlwZXNfanNfMSA9IHJlcXVpcmUoXCIuLi90eXBlcy5qc1wiKTtcbi8qKlxuICogQW4gZXJyb3IgdGhhdCByZXByZXNlbnRzIGEgc3RlcCBleGhhdXN0aW5nIGFsbCByZXRyaWVzIGFuZCBmYWlsaW5nLiBUaGlzIGlzXG4gKiB0aHJvd24gYnkgYW4gSW5uZ2VzdCBzdGVwIGlmIGl0IGZhaWxzLlxuICpcbiAqIEl0J3Mgc3lub255bW91cyB3aXRoIGFuIGBFcnJvcmAsIHdpdGggdGhlIGFkZGl0aW9uIG9mIHRoZSBgc3RlcElkYCB0aGF0XG4gKiBmYWlsZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG5jbGFzcyBTdGVwRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSBzdGVwIHRoYXQgZmFpbGVkLlxuICAgICAqL1xuICAgIHN0ZXBJZCwgZXJyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgcGFyc2VkRXJyID0gdHlwZXNfanNfMS5qc29uRXJyb3JTY2hlbWEucGFyc2UoZXJyKTtcbiAgICAgICAgc3VwZXIocGFyc2VkRXJyLm1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnN0ZXBJZCA9IHN0ZXBJZDtcbiAgICAgICAgdGhpcy5uYW1lID0gcGFyc2VkRXJyLm5hbWU7XG4gICAgICAgIHRoaXMuc3RlcElkID0gc3RlcElkO1xuICAgICAgICAvLyBEb24ndCBzaG93IHRoZSBpbnRlcm5hbCBzdGFjayB0cmFjZSBpZiB3ZSBkb24ndCBoYXZlIG9uZS5cbiAgICAgICAgdGhpcy5zdGFjayA9IChfYSA9IHBhcnNlZEVyci5zdGFjaykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdW5kZWZpbmVkO1xuICAgICAgICAvLyBUcnkgc2V0dGluZyB0aGUgY2F1c2UgaWYgd2UgaGF2ZSBvbmVcbiAgICAgICAgdGhpcy5jYXVzZSA9IHBhcnNlZEVyci5jYXVzZVxuICAgICAgICAgICAgPyAoMCwgZXJyb3JzX2pzXzEuZGVzZXJpYWxpemVFcnJvcikocGFyc2VkRXJyLmNhdXNlLCB0cnVlKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5TdGVwRXJyb3IgPSBTdGVwRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdGVwRXJyb3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/StepError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/InngestExecution.js":
/*!***********************************************************************!*\
  !*** ./node_modules/inngest/components/execution/InngestExecution.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InngestExecution = exports.PREFERRED_EXECUTION_VERSION = exports.ExecutionVersion = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(rsc)/./node_modules/inngest/node_modules/debug/src/index.js\"));\nconst consts_js_1 = __webpack_require__(/*! ../../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\n/**\n * The execution models the SDK is aware of.\n *\n * This is used in a number of places to ensure all execution versions are\n * accounted for for a given operation.\n */\nvar ExecutionVersion;\n(function (ExecutionVersion) {\n    ExecutionVersion[ExecutionVersion[\"V0\"] = 0] = \"V0\";\n    ExecutionVersion[ExecutionVersion[\"V1\"] = 1] = \"V1\";\n    ExecutionVersion[ExecutionVersion[\"V2\"] = 2] = \"V2\";\n})(ExecutionVersion || (exports.ExecutionVersion = ExecutionVersion = {}));\n/**\n * The preferred execution version that will be used by the SDK when handling\n * brand new runs where the Executor is allowing us to choose.\n *\n * Changing this should not ever be a breaking change, as this will only change\n * new runs, not existing ones.\n */\nexports.PREFERRED_EXECUTION_VERSION = ExecutionVersion.V1;\nclass InngestExecution {\n    constructor(options) {\n        this.options = options;\n        this.debug = (0, debug_1.default)(`${consts_js_1.debugPrefix}:${this.options.runId}`);\n    }\n}\nexports.InngestExecution = InngestExecution;\n//# sourceMappingURL=InngestExecution.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9Jbm5nZXN0RXhlY3V0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcsbUNBQW1DLEdBQUcsd0JBQXdCO0FBQ3pGLGdDQUFnQyxtQkFBTyxDQUFDLDJFQUFPO0FBQy9DLG9CQUFvQixtQkFBTyxDQUFDLCtFQUF5QjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx1QkFBdUIsd0JBQXdCLHdCQUF3QjtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsd0JBQXdCLEdBQUcsbUJBQW1CO0FBQzNGO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9haGFycGVyL2lubmdlc3QvaW5uZ2VzdC1zYW5kYm94L3RzLW5leHQvbm9kZV9tb2R1bGVzL2lubmdlc3QvY29tcG9uZW50cy9leGVjdXRpb24vSW5uZ2VzdEV4ZWN1dGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW5uZ2VzdEV4ZWN1dGlvbiA9IGV4cG9ydHMuUFJFRkVSUkVEX0VYRUNVVElPTl9WRVJTSU9OID0gZXhwb3J0cy5FeGVjdXRpb25WZXJzaW9uID0gdm9pZCAwO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgY29uc3RzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vaGVscGVycy9jb25zdHMuanNcIik7XG4vKipcbiAqIFRoZSBleGVjdXRpb24gbW9kZWxzIHRoZSBTREsgaXMgYXdhcmUgb2YuXG4gKlxuICogVGhpcyBpcyB1c2VkIGluIGEgbnVtYmVyIG9mIHBsYWNlcyB0byBlbnN1cmUgYWxsIGV4ZWN1dGlvbiB2ZXJzaW9ucyBhcmVcbiAqIGFjY291bnRlZCBmb3IgZm9yIGEgZ2l2ZW4gb3BlcmF0aW9uLlxuICovXG52YXIgRXhlY3V0aW9uVmVyc2lvbjtcbihmdW5jdGlvbiAoRXhlY3V0aW9uVmVyc2lvbikge1xuICAgIEV4ZWN1dGlvblZlcnNpb25bRXhlY3V0aW9uVmVyc2lvbltcIlYwXCJdID0gMF0gPSBcIlYwXCI7XG4gICAgRXhlY3V0aW9uVmVyc2lvbltFeGVjdXRpb25WZXJzaW9uW1wiVjFcIl0gPSAxXSA9IFwiVjFcIjtcbiAgICBFeGVjdXRpb25WZXJzaW9uW0V4ZWN1dGlvblZlcnNpb25bXCJWMlwiXSA9IDJdID0gXCJWMlwiO1xufSkoRXhlY3V0aW9uVmVyc2lvbiB8fCAoZXhwb3J0cy5FeGVjdXRpb25WZXJzaW9uID0gRXhlY3V0aW9uVmVyc2lvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBwcmVmZXJyZWQgZXhlY3V0aW9uIHZlcnNpb24gdGhhdCB3aWxsIGJlIHVzZWQgYnkgdGhlIFNESyB3aGVuIGhhbmRsaW5nXG4gKiBicmFuZCBuZXcgcnVucyB3aGVyZSB0aGUgRXhlY3V0b3IgaXMgYWxsb3dpbmcgdXMgdG8gY2hvb3NlLlxuICpcbiAqIENoYW5naW5nIHRoaXMgc2hvdWxkIG5vdCBldmVyIGJlIGEgYnJlYWtpbmcgY2hhbmdlLCBhcyB0aGlzIHdpbGwgb25seSBjaGFuZ2VcbiAqIG5ldyBydW5zLCBub3QgZXhpc3Rpbmcgb25lcy5cbiAqL1xuZXhwb3J0cy5QUkVGRVJSRURfRVhFQ1VUSU9OX1ZFUlNJT04gPSBFeGVjdXRpb25WZXJzaW9uLlYxO1xuY2xhc3MgSW5uZ2VzdEV4ZWN1dGlvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoYCR7Y29uc3RzX2pzXzEuZGVidWdQcmVmaXh9OiR7dGhpcy5vcHRpb25zLnJ1bklkfWApO1xuICAgIH1cbn1cbmV4cG9ydHMuSW5uZ2VzdEV4ZWN1dGlvbiA9IElubmdlc3RFeGVjdXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Jbm5nZXN0RXhlY3V0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/als.js":
/*!**********************************************************!*\
  !*** ./node_modules/inngest/components/execution/als.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getAsyncLocalStorage = exports.getAsyncCtx = void 0;\n/**\n * A local-only symbol used as a key in global state to store the async local\n * storage instance.\n */\nconst alsSymbol = Symbol.for(\"inngest:als\");\n/**\n * Retrieve the async context for the current execution.\n */\nconst getAsyncCtx = async () => {\n    return (0, exports.getAsyncLocalStorage)().then((als) => als.getStore());\n};\nexports.getAsyncCtx = getAsyncCtx;\n/**\n * Get a singleton instance of `AsyncLocalStorage` used to store and retrieve\n * async context for the current execution.\n */\nconst getAsyncLocalStorage = async () => {\n    var _a;\n    var _b;\n    (_a = (_b = globalThis)[alsSymbol]) !== null && _a !== void 0 ? _a : (_b[alsSymbol] = new Promise(\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises, no-async-promise-executor\n    async (resolve) => {\n        try {\n            // Obscure this import to keep bundlers from bundling it.\n            const dynamicImport = (path) => {\n                const safePath = path.split(\"/\").join(\"/\");\n                return Promise.resolve(`${safePath}`).then(s => __importStar(__webpack_require__(\"(rsc)/./node_modules/inngest/components/execution sync recursive\")(s)));\n            };\n            const { AsyncLocalStorage } = \n            // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n            await dynamicImport(\"node:async_hooks\");\n            resolve(new AsyncLocalStorage());\n        }\n        catch (err) {\n            console.warn(\"node:async_hooks is not supported in this runtime. Experimental async context is disabled.\");\n            resolve({\n                getStore: () => undefined,\n                run: (_, fn) => fn(),\n            });\n        }\n    }));\n    return globalThis[alsSymbol];\n};\nexports.getAsyncLocalStorage = getAsyncLocalStorage;\n//# sourceMappingURL=als.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9hbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxjQUFjO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsbUJBQW1CO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxTQUFTLDBCQUEwQix3RkFBUSxDQUFDLENBQUM7QUFDdkY7QUFDQSxvQkFBb0Isb0JBQW9CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyIvVXNlcnMvYWhhcnBlci9pbm5nZXN0L2lubmdlc3Qtc2FuZGJveC90cy1uZXh0L25vZGVfbW9kdWxlcy9pbm5nZXN0L2NvbXBvbmVudHMvZXhlY3V0aW9uL2Fscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3duS2V5cyA9IGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgb3duS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICB2YXIgYXIgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gbykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBrKSkgYXJbYXIubGVuZ3RoXSA9IGs7XG4gICAgICAgICAgICByZXR1cm4gYXI7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvd25LZXlzKG8pO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtb2QpIHtcbiAgICAgICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgPSBvd25LZXlzKG1vZCksIGkgPSAwOyBpIDwgay5sZW5ndGg7IGkrKykgaWYgKGtbaV0gIT09IFwiZGVmYXVsdFwiKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGtbaV0pO1xuICAgICAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRBc3luY0xvY2FsU3RvcmFnZSA9IGV4cG9ydHMuZ2V0QXN5bmNDdHggPSB2b2lkIDA7XG4vKipcbiAqIEEgbG9jYWwtb25seSBzeW1ib2wgdXNlZCBhcyBhIGtleSBpbiBnbG9iYWwgc3RhdGUgdG8gc3RvcmUgdGhlIGFzeW5jIGxvY2FsXG4gKiBzdG9yYWdlIGluc3RhbmNlLlxuICovXG5jb25zdCBhbHNTeW1ib2wgPSBTeW1ib2wuZm9yKFwiaW5uZ2VzdDphbHNcIik7XG4vKipcbiAqIFJldHJpZXZlIHRoZSBhc3luYyBjb250ZXh0IGZvciB0aGUgY3VycmVudCBleGVjdXRpb24uXG4gKi9cbmNvbnN0IGdldEFzeW5jQ3R4ID0gYXN5bmMgKCkgPT4ge1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5nZXRBc3luY0xvY2FsU3RvcmFnZSkoKS50aGVuKChhbHMpID0+IGFscy5nZXRTdG9yZSgpKTtcbn07XG5leHBvcnRzLmdldEFzeW5jQ3R4ID0gZ2V0QXN5bmNDdHg7XG4vKipcbiAqIEdldCBhIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBgQXN5bmNMb2NhbFN0b3JhZ2VgIHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlXG4gKiBhc3luYyBjb250ZXh0IGZvciB0aGUgY3VycmVudCBleGVjdXRpb24uXG4gKi9cbmNvbnN0IGdldEFzeW5jTG9jYWxTdG9yYWdlID0gYXN5bmMgKCkgPT4ge1xuICAgIHZhciBfYTtcbiAgICB2YXIgX2I7XG4gICAgKF9hID0gKF9iID0gZ2xvYmFsVGhpcylbYWxzU3ltYm9sXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKF9iW2Fsc1N5bWJvbF0gPSBuZXcgUHJvbWlzZShcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW1pc3VzZWQtcHJvbWlzZXMsIG5vLWFzeW5jLXByb21pc2UtZXhlY3V0b3JcbiAgICBhc3luYyAocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gT2JzY3VyZSB0aGlzIGltcG9ydCB0byBrZWVwIGJ1bmRsZXJzIGZyb20gYnVuZGxpbmcgaXQuXG4gICAgICAgICAgICBjb25zdCBkeW5hbWljSW1wb3J0ID0gKHBhdGgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzYWZlUGF0aCA9IHBhdGguc3BsaXQoXCIvXCIpLmpvaW4oXCIvXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoYCR7c2FmZVBhdGh9YCkudGhlbihzID0+IF9faW1wb3J0U3RhcihyZXF1aXJlKHMpKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgeyBBc3luY0xvY2FsU3RvcmFnZSB9ID0gXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2NvbnNpc3RlbnQtdHlwZS1pbXBvcnRzXG4gICAgICAgICAgICBhd2FpdCBkeW5hbWljSW1wb3J0KFwibm9kZTphc3luY19ob29rc1wiKTtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IEFzeW5jTG9jYWxTdG9yYWdlKCkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIm5vZGU6YXN5bmNfaG9va3MgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIHJ1bnRpbWUuIEV4cGVyaW1lbnRhbCBhc3luYyBjb250ZXh0IGlzIGRpc2FibGVkLlwiKTtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIGdldFN0b3JlOiAoKSA9PiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcnVuOiAoXywgZm4pID0+IGZuKCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pKTtcbiAgICByZXR1cm4gZ2xvYmFsVGhpc1thbHNTeW1ib2xdO1xufTtcbmV4cG9ydHMuZ2V0QXN5bmNMb2NhbFN0b3JhZ2UgPSBnZXRBc3luY0xvY2FsU3RvcmFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/als.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/otel/access.js":
/*!******************************************************************!*\
  !*** ./node_modules/inngest/components/execution/otel/access.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/**\n * A file used to access client processors safely without also importing any\n * otel-specific libraries. Useful for ensuring that the otel libraries can be\n * tree-shaken if they're not used directly by the user.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.clientProcessorMap = void 0;\n/**\n * A map of Inngest clients to their OTel span processors. This is used to\n * ensure that we only create one span processor per client, and that we can\n * access the span processor from the client without exposing the OTel\n * libraries to the user.\n */\nexports.clientProcessorMap = new WeakMap();\n//# sourceMappingURL=access.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9vdGVsL2FjY2Vzcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsiL1VzZXJzL2FoYXJwZXIvaW5uZ2VzdC9pbm5nZXN0LXNhbmRib3gvdHMtbmV4dC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9jb21wb25lbnRzL2V4ZWN1dGlvbi9vdGVsL2FjY2Vzcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQSBmaWxlIHVzZWQgdG8gYWNjZXNzIGNsaWVudCBwcm9jZXNzb3JzIHNhZmVseSB3aXRob3V0IGFsc28gaW1wb3J0aW5nIGFueVxuICogb3RlbC1zcGVjaWZpYyBsaWJyYXJpZXMuIFVzZWZ1bCBmb3IgZW5zdXJpbmcgdGhhdCB0aGUgb3RlbCBsaWJyYXJpZXMgY2FuIGJlXG4gKiB0cmVlLXNoYWtlbiBpZiB0aGV5J3JlIG5vdCB1c2VkIGRpcmVjdGx5IGJ5IHRoZSB1c2VyLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNsaWVudFByb2Nlc3Nvck1hcCA9IHZvaWQgMDtcbi8qKlxuICogQSBtYXAgb2YgSW5uZ2VzdCBjbGllbnRzIHRvIHRoZWlyIE9UZWwgc3BhbiBwcm9jZXNzb3JzLiBUaGlzIGlzIHVzZWQgdG9cbiAqIGVuc3VyZSB0aGF0IHdlIG9ubHkgY3JlYXRlIG9uZSBzcGFuIHByb2Nlc3NvciBwZXIgY2xpZW50LCBhbmQgdGhhdCB3ZSBjYW5cbiAqIGFjY2VzcyB0aGUgc3BhbiBwcm9jZXNzb3IgZnJvbSB0aGUgY2xpZW50IHdpdGhvdXQgZXhwb3NpbmcgdGhlIE9UZWxcbiAqIGxpYnJhcmllcyB0byB0aGUgdXNlci5cbiAqL1xuZXhwb3J0cy5jbGllbnRQcm9jZXNzb3JNYXAgPSBuZXcgV2Vha01hcCgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjZXNzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/otel/access.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/v0.js":
/*!*********************************************************!*\
  !*** ./node_modules/inngest/components/execution/v0.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._internals = exports.V0InngestExecution = exports.createV0InngestExecution = void 0;\nconst canonicalize_1 = __importDefault(__webpack_require__(/*! canonicalize */ \"(rsc)/./node_modules/canonicalize/lib/canonicalize.js\"));\nconst hash_js_1 = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst functions_js_1 = __webpack_require__(/*! ../../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\nconst promises_js_1 = __webpack_require__(/*! ../../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\nconst types_js_1 = __webpack_require__(/*! ../../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst InngestMiddleware_js_1 = __webpack_require__(/*! ../InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\nconst InngestStepTools_js_1 = __webpack_require__(/*! ../InngestStepTools.js */ \"(rsc)/./node_modules/inngest/components/InngestStepTools.js\");\nconst NonRetriableError_js_1 = __webpack_require__(/*! ../NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\nconst RetryAfterError_js_1 = __webpack_require__(/*! ../RetryAfterError.js */ \"(rsc)/./node_modules/inngest/components/RetryAfterError.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ./InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\nconst createV0InngestExecution = (options) => {\n    return new V0InngestExecution(options);\n};\nexports.createV0InngestExecution = createV0InngestExecution;\nclass V0InngestExecution extends InngestExecution_js_1.InngestExecution {\n    constructor(options) {\n        super(options);\n        this.userFnToRun = this.getUserFnToRun();\n        this.state = this.createExecutionState();\n        this.fnArg = this.createFnArg();\n    }\n    start() {\n        var _a;\n        this.debug(\"starting V0 execution\");\n        return ((_a = this.execution) !== null && _a !== void 0 ? _a : (this.execution = this._start().then((result) => {\n            this.debug(\"result:\", result);\n            return result;\n        })));\n    }\n    async _start() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;\n        this.state.hooks = await this.initializeMiddleware();\n        try {\n            await this.transformInput();\n            await ((_b = (_a = this.state.hooks).beforeMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n            if (this.state.opStack.length === 0 && !this.options.requestedRunStep) {\n                await ((_d = (_c = this.state.hooks).afterMemoization) === null || _d === void 0 ? void 0 : _d.call(_c));\n                await ((_f = (_e = this.state.hooks).beforeExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n            }\n            const userFnPromise = (0, promises_js_1.runAsPromise)(() => this.userFnToRun(this.fnArg));\n            let pos = -1;\n            do {\n                if (pos >= 0) {\n                    if (!this.options.requestedRunStep &&\n                        pos === this.state.opStack.length - 1) {\n                        await ((_h = (_g = this.state.hooks).afterMemoization) === null || _h === void 0 ? void 0 : _h.call(_g));\n                        await ((_k = (_j = this.state.hooks).beforeExecution) === null || _k === void 0 ? void 0 : _k.call(_j));\n                    }\n                    this.state.tickOps = {};\n                    const incomingOp = this.state.opStack[pos];\n                    this.state.currentOp = this.state.allFoundOps[incomingOp.id];\n                    if (!this.state.currentOp) {\n                        /**\n                         * We're trying to resume the function, but we can't find where to go.\n                         *\n                         * This means that either the function has changed or there are async\n                         * actions in-between steps that we haven't noticed in previous\n                         * executions.\n                         *\n                         * Whichever the case, this is bad and we can't continue in this\n                         * undefined state.\n                         */\n                        throw new NonRetriableError_js_1.NonRetriableError((0, errors_js_1.prettyError)({\n                            whatHappened: \" Your function was stopped from running\",\n                            why: \"We couldn't resume your function's state because it may have changed since the run started or there are async actions in-between steps that we haven't noticed in previous executions.\",\n                            consequences: \"Continuing to run the function may result in unexpected behaviour, so we've stopped your function to ensure nothing unexpected happened!\",\n                            toFixNow: \"Ensure that your function is either entirely step-based or entirely non-step-based, by either wrapping all asynchronous logic in `step.run()` calls or by removing all `step.*()` calls.\",\n                            otherwise: \"For more information on why step functions work in this manner, see https://www.inngest.com/docs/functions/multi-step#gotchas\",\n                            stack: true,\n                            code: errors_js_1.ErrCode.NON_DETERMINISTIC_FUNCTION,\n                        }));\n                    }\n                    this.state.currentOp.fulfilled = true;\n                    if (typeof incomingOp.data !== \"undefined\") {\n                        this.state.currentOp.resolve(incomingOp.data);\n                    }\n                    else {\n                        this.state.currentOp.reject(incomingOp.error);\n                    }\n                }\n                await (0, promises_js_1.resolveAfterPending)();\n                this.state.reset();\n                pos++;\n            } while (pos < this.state.opStack.length);\n            await ((_m = (_l = this.state.hooks).afterMemoization) === null || _m === void 0 ? void 0 : _m.call(_l));\n            const discoveredOps = Object.values(this.state.tickOps).map(tickOpToOutgoing);\n            const runStep = this.options.requestedRunStep ||\n                this.getEarlyExecRunStep(discoveredOps);\n            if (runStep) {\n                const userFnOp = this.state.allFoundOps[runStep];\n                const stepToRun = userFnOp === null || userFnOp === void 0 ? void 0 : userFnOp.fn;\n                if (!stepToRun) {\n                    throw new Error(`Bad stack; executor requesting to run unknown step \"${runStep}\"`);\n                }\n                const outgoingUserFnOp = Object.assign(Object.assign({}, tickOpToOutgoing(userFnOp)), { op: types_js_1.StepOpCode.Step });\n                await ((_p = (_o = this.state.hooks).beforeExecution) === null || _p === void 0 ? void 0 : _p.call(_o));\n                this.state.executingStep = true;\n                const result = await (0, promises_js_1.runAsPromise)(stepToRun)\n                    .finally(() => {\n                    this.state.executingStep = false;\n                })\n                    .catch(async (error) => {\n                    return await this.transformOutput({ error }, outgoingUserFnOp);\n                })\n                    .then(async (data) => {\n                    var _a, _b;\n                    await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterExecution) === null || _b === void 0 ? void 0 : _b.call(_a));\n                    return await this.transformOutput({ data }, outgoingUserFnOp);\n                });\n                const { type: _type } = result, rest = __rest(result, [\"type\"]);\n                return {\n                    type: \"step-ran\",\n                    ctx: this.fnArg,\n                    ops: this.ops,\n                    step: Object.assign(Object.assign({}, outgoingUserFnOp), rest),\n                };\n            }\n            if (!discoveredOps.length) {\n                const fnRet = await Promise.race([\n                    userFnPromise.then((data) => ({ type: \"complete\", data })),\n                    (0, promises_js_1.resolveNextTick)().then(() => ({ type: \"incomplete\" })),\n                ]);\n                if (fnRet.type === \"complete\") {\n                    await ((_r = (_q = this.state.hooks).afterExecution) === null || _r === void 0 ? void 0 : _r.call(_q));\n                    const allOpsFulfilled = Object.values(this.state.allFoundOps).every((op) => {\n                        return op.fulfilled;\n                    });\n                    if (allOpsFulfilled) {\n                        return await this.transformOutput({ data: fnRet.data });\n                    }\n                }\n                else if (!this.state.hasUsedTools) {\n                    this.state.nonStepFnDetected = true;\n                    const data = await userFnPromise;\n                    await ((_t = (_s = this.state.hooks).afterExecution) === null || _t === void 0 ? void 0 : _t.call(_s));\n                    return await this.transformOutput({ data });\n                }\n                else {\n                    const hasOpsPending = Object.values(this.state.allFoundOps).some((op) => {\n                        return op.fulfilled === false;\n                    });\n                    if (!hasOpsPending) {\n                        throw new NonRetriableError_js_1.NonRetriableError((0, errors_js_1.functionStoppedRunningErr)(errors_js_1.ErrCode.ASYNC_DETECTED_AFTER_MEMOIZATION));\n                    }\n                }\n            }\n            await ((_v = (_u = this.state.hooks).afterExecution) === null || _v === void 0 ? void 0 : _v.call(_u));\n            return {\n                type: \"steps-found\",\n                ctx: this.fnArg,\n                ops: this.ops,\n                steps: discoveredOps,\n            };\n        }\n        catch (error) {\n            return await this.transformOutput({ error });\n        }\n        finally {\n            await ((_x = (_w = this.state.hooks).beforeResponse) === null || _x === void 0 ? void 0 : _x.call(_w));\n        }\n    }\n    async initializeMiddleware() {\n        const ctx = this.options.data;\n        const hooks = await (0, InngestMiddleware_js_1.getHookStack)(this.options.fn[\"middleware\"], \"onFunctionRun\", {\n            ctx,\n            fn: this.options.fn,\n            steps: Object.values(this.options.stepState),\n            reqArgs: this.options.reqArgs,\n        }, {\n            transformInput: (prev, output) => {\n                return {\n                    ctx: Object.assign(Object.assign({}, prev.ctx), output === null || output === void 0 ? void 0 : output.ctx),\n                    fn: this.options.fn,\n                    steps: prev.steps.map((step, i) => {\n                        var _a;\n                        return (Object.assign(Object.assign({}, step), (_a = output === null || output === void 0 ? void 0 : output.steps) === null || _a === void 0 ? void 0 : _a[i]));\n                    }),\n                    reqArgs: prev.reqArgs,\n                };\n            },\n            transformOutput: (prev, output) => {\n                return {\n                    result: Object.assign(Object.assign({}, prev.result), output === null || output === void 0 ? void 0 : output.result),\n                    step: prev.step,\n                };\n            },\n        });\n        return hooks;\n    }\n    createExecutionState() {\n        const state = {\n            allFoundOps: {},\n            tickOps: {},\n            tickOpHashes: {},\n            currentOp: undefined,\n            hasUsedTools: false,\n            reset: () => {\n                state.tickOpHashes = {};\n                state.allFoundOps = Object.assign(Object.assign({}, state.allFoundOps), state.tickOps);\n            },\n            nonStepFnDetected: false,\n            executingStep: false,\n            opStack: this.options.stepCompletionOrder.reduce((acc, stepId) => {\n                const stepState = this.options.stepState[stepId];\n                if (!stepState) {\n                    return acc;\n                }\n                return [...acc, stepState];\n            }, []),\n        };\n        return state;\n    }\n    get ops() {\n        return Object.fromEntries(Object.entries(this.state.allFoundOps).map(([id, op]) => [\n            id,\n            {\n                id: op.id,\n                rawArgs: op.rawArgs,\n                data: op.data,\n                error: op.error,\n                fulfilled: op.fulfilled,\n                seen: true,\n            },\n        ]));\n    }\n    getUserFnToRun() {\n        if (!this.options.isFailureHandler) {\n            return this.options.fn[\"fn\"];\n        }\n        if (!this.options.fn[\"onFailureFn\"]) {\n            /**\n             * Somehow, we've ended up detecting that this is a failure handler but\n             * doesn't have an `onFailure` function. This should never happen.\n             */\n            throw new Error(\"Cannot find function `onFailure` handler\");\n        }\n        // TODO: Review; inferred types results in an `any` here!\n        return this.options.fn[\"onFailureFn\"];\n    }\n    createFnArg() {\n        var _a, _b, _c, _d;\n        // Start referencing everything\n        this.state.tickOps = this.state.allFoundOps;\n        /**\n         * Create a unique hash of an operation using only a subset of the operation's\n         * properties; will never use `data` and will guarantee the order of the\n         * object so we don't rely on individual tools for that.\n         *\n         * If the operation already contains an ID, the current ID will be used\n         * instead, so that users can provide their own IDs.\n         */\n        const hashOp = (\n        /**\n         * The op to generate a hash from. We only use a subset of the op's\n         * properties when creating the hash.\n         */\n        op) => {\n            var _a, _b, _c, _d;\n            /**\n             * It's difficult for v0 to understand whether or not an op has\n             * historically contained a custom ID, as all step usage now require them.\n             *\n             * For this reason, we make the assumption that steps in v0 do not have a\n             * custom ID and generate one for them as we would in all recommendations\n             * and examples.\n             */\n            const obj = {\n                parent: (_b = (_a = this.state.currentOp) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : null,\n                op: op.op,\n                name: op.name,\n                // Historically, no v0 runs could have options for `step.run()` call,\n                // but this object can be specified in future versions.\n                //\n                // For this purpose, we change this to always use `null` if the op is\n                // that of a `step.run()`.\n                opts: op.op === types_js_1.StepOpCode.StepPlanned ? null : (_c = op.opts) !== null && _c !== void 0 ? _c : null,\n            };\n            const collisionHash = exports._internals.hashData(obj);\n            const pos = (this.state.tickOpHashes[collisionHash] =\n                ((_d = this.state.tickOpHashes[collisionHash]) !== null && _d !== void 0 ? _d : -1) + 1);\n            return Object.assign(Object.assign({}, op), { id: exports._internals.hashData(Object.assign({ pos }, obj)) });\n        };\n        const stepHandler = ({ args, matchOp, opts }) => {\n            if (this.state.nonStepFnDetected) {\n                throw new NonRetriableError_js_1.NonRetriableError((0, errors_js_1.functionStoppedRunningErr)(errors_js_1.ErrCode.STEP_USED_AFTER_ASYNC));\n            }\n            if (this.state.executingStep) {\n                throw new NonRetriableError_js_1.NonRetriableError((0, errors_js_1.prettyError)({\n                    whatHappened: \"Your function was stopped from running\",\n                    why: \"We detected that you have nested `step.*` tooling.\",\n                    consequences: \"Nesting `step.*` tooling is not supported.\",\n                    stack: true,\n                    toFixNow: \"Make sure you're not using `step.*` tooling inside of other `step.*` tooling. If you need to compose steps together, you can create a new async function and call it from within your step function, or use promise chaining.\",\n                    otherwise: \"For more information on step functions with Inngest, see https://www.inngest.com/docs/functions/multi-step\",\n                    code: errors_js_1.ErrCode.NESTING_STEPS,\n                }));\n            }\n            this.state.hasUsedTools = true;\n            const stepOptions = (0, InngestStepTools_js_1.getStepOptions)(args[0]);\n            const opId = hashOp(matchOp(stepOptions, ...args.slice(1)));\n            return new Promise((resolve, reject) => {\n                this.state.tickOps[opId.id] = Object.assign(Object.assign(Object.assign({}, opId), ((opts === null || opts === void 0 ? void 0 : opts.fn) ? { fn: () => { var _a; return (_a = opts.fn) === null || _a === void 0 ? void 0 : _a.call(opts, ...args); } } : {})), { rawArgs: args, resolve,\n                    reject, fulfilled: false });\n            });\n        };\n        const step = (0, InngestStepTools_js_1.createStepTools)(this.options.client, this, stepHandler);\n        let fnArg = Object.assign(Object.assign({}, this.options.data), { step });\n        if (this.options.isFailureHandler) {\n            const eventData = zod_1.z\n                .object({ error: types_js_1.jsonErrorSchema })\n                .parse((_a = fnArg.event) === null || _a === void 0 ? void 0 : _a.data);\n            fnArg = Object.assign(Object.assign({}, fnArg), { error: (0, errors_js_1.deserializeError)(eventData.error) });\n        }\n        return (_d = (_c = (_b = this.options).transformCtx) === null || _c === void 0 ? void 0 : _c.call(_b, fnArg)) !== null && _d !== void 0 ? _d : fnArg;\n    }\n    /**\n     * Using middleware, transform input before running.\n     */\n    async transformInput() {\n        var _a, _b;\n        const inputMutations = await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.transformInput) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            ctx: Object.assign({}, this.fnArg),\n            steps: Object.values(this.options.stepState),\n            fn: this.options.fn,\n            reqArgs: this.options.reqArgs,\n        }));\n        if (inputMutations === null || inputMutations === void 0 ? void 0 : inputMutations.ctx) {\n            this.fnArg = inputMutations.ctx;\n        }\n        if (inputMutations === null || inputMutations === void 0 ? void 0 : inputMutations.steps) {\n            this.state.opStack = [...inputMutations.steps];\n        }\n    }\n    getEarlyExecRunStep(ops) {\n        if (ops.length !== 1)\n            return;\n        const op = ops[0];\n        if (op &&\n            op.op === types_js_1.StepOpCode.StepPlanned\n        // TODO We must individually check properties here that we do not want to\n        // execute on, such as retry counts. Nothing exists here that falls in to\n        // this case, but should be accounted for when we add them.\n        // && typeof op.opts === \"undefined\"\n        ) {\n            return op.id;\n        }\n    }\n    /**\n     * Using middleware, transform output before returning.\n     */\n    async transformOutput(dataOrError, step) {\n        var _a, _b, _c, _d;\n        const output = Object.assign({}, dataOrError);\n        if (typeof output.error !== \"undefined\") {\n            output.data = (0, errors_js_1.serializeError)(output.error);\n        }\n        const transformedOutput = await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.transformOutput) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            result: Object.assign({}, output),\n            step,\n        }));\n        const { data, error } = Object.assign(Object.assign({}, output), transformedOutput === null || transformedOutput === void 0 ? void 0 : transformedOutput.result);\n        if (!step) {\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.finished) === null || _d === void 0 ? void 0 : _d.call(_c, {\n                result: Object.assign({}, (typeof error !== \"undefined\" ? { error } : { data })),\n            }));\n        }\n        if (typeof error !== \"undefined\") {\n            /**\n             * Ensure we give middleware the chance to decide on retriable behaviour\n             * by looking at the error returned from output transformation.\n             */\n            let retriable = !(error instanceof NonRetriableError_js_1.NonRetriableError);\n            if (retriable && error instanceof RetryAfterError_js_1.RetryAfterError) {\n                retriable = error.retryAfter;\n            }\n            const serializedError = (0, errors_js_1.serializeError)(error);\n            return {\n                type: \"function-rejected\",\n                ctx: this.fnArg,\n                ops: this.ops,\n                error: serializedError,\n                retriable,\n            };\n        }\n        return {\n            type: \"function-resolved\",\n            ctx: this.fnArg,\n            ops: this.ops,\n            data: (0, functions_js_1.undefinedToNull)(data),\n        };\n    }\n}\nexports.V0InngestExecution = V0InngestExecution;\nconst tickOpToOutgoing = (op) => {\n    return {\n        op: op.op,\n        id: op.id,\n        name: op.name,\n        opts: op.opts,\n    };\n};\nconst hashData = (op) => {\n    return (0, hash_js_1.sha1)().update((0, canonicalize_1.default)(op)).digest(\"hex\");\n};\n/**\n * Exported for testing.\n */\nexports._internals = { hashData };\n//# sourceMappingURL=v0.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/v0.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/v1.js":
/*!*********************************************************!*\
  !*** ./node_modules/inngest/components/execution/v1.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._internals = exports.createV1InngestExecution = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst hash_js_1 = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst consts_js_1 = __webpack_require__(/*! ../../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst functions_js_1 = __webpack_require__(/*! ../../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\nconst promises_js_1 = __webpack_require__(/*! ../../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\nconst types_js_1 = __webpack_require__(/*! ../../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst version_js_1 = __webpack_require__(/*! ../../version.js */ \"(rsc)/./node_modules/inngest/version.js\");\nconst InngestMiddleware_js_1 = __webpack_require__(/*! ../InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\nconst InngestStepTools_js_1 = __webpack_require__(/*! ../InngestStepTools.js */ \"(rsc)/./node_modules/inngest/components/InngestStepTools.js\");\nconst NonRetriableError_js_1 = __webpack_require__(/*! ../NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\nconst RetryAfterError_js_1 = __webpack_require__(/*! ../RetryAfterError.js */ \"(rsc)/./node_modules/inngest/components/RetryAfterError.js\");\nconst StepError_js_1 = __webpack_require__(/*! ../StepError.js */ \"(rsc)/./node_modules/inngest/components/StepError.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ./InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\nconst als_js_1 = __webpack_require__(/*! ./als.js */ \"(rsc)/./node_modules/inngest/components/execution/als.js\");\nconst access_js_1 = __webpack_require__(/*! ./otel/access.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/access.js\");\nconst createV1InngestExecution = (options) => {\n    return new V1InngestExecution(options);\n};\nexports.createV1InngestExecution = createV1InngestExecution;\nclass V1InngestExecution extends InngestExecution_js_1.InngestExecution {\n    constructor(options) {\n        super(options);\n        this.timeoutDuration = 1000 * 10;\n        this.userFnToRun = this.getUserFnToRun();\n        this.state = this.createExecutionState();\n        this.fnArg = this.createFnArg();\n        this.checkpointHandlers = this.createCheckpointHandlers();\n        this.initializeTimer(this.state);\n        this.debug(\"created new V1 execution for run;\", this.options.requestedRunStep\n            ? `wanting to run step \"${this.options.requestedRunStep}\"`\n            : \"discovering steps\");\n        this.debug(\"existing state keys:\", Object.keys(this.state.stepState));\n    }\n    /**\n     * Idempotently start the execution of the user's function.\n     */\n    start() {\n        if (!this.execution) {\n            this.debug(\"starting V1 execution\");\n            const tracer = api_1.trace.getTracer(\"inngest\", version_js_1.version);\n            this.execution = (0, als_js_1.getAsyncLocalStorage)().then((als) => {\n                return als.run({ app: this.options.client, ctx: this.fnArg }, async () => {\n                    return tracer.startActiveSpan(\"inngest.execution\", (span) => {\n                        var _a;\n                        (_a = access_js_1.clientProcessorMap.get(this.options.client)) === null || _a === void 0 ? void 0 : _a.declareStartingSpan({\n                            span,\n                            runId: this.options.runId,\n                            traceparent: this.options.headers[consts_js_1.headerKeys.TraceParent],\n                            tracestate: this.options.headers[consts_js_1.headerKeys.TraceState],\n                        });\n                        return this._start()\n                            .then((result) => {\n                            this.debug(\"result:\", result);\n                            return result;\n                        })\n                            .finally(() => {\n                            span.end();\n                        });\n                    });\n                });\n            });\n        }\n        return this.execution;\n    }\n    /**\n     * Starts execution of the user's function and the core loop.\n     */\n    async _start() {\n        var _a, e_1, _b, _c;\n        var _d, _e;\n        try {\n            const allCheckpointHandler = this.getCheckpointHandler(\"\");\n            this.state.hooks = await this.initializeMiddleware();\n            await this.startExecution();\n            try {\n                for (var _f = true, _g = __asyncValues(this.state.loop), _h; _h = await _g.next(), _a = _h.done, !_a; _f = true) {\n                    _c = _h.value;\n                    _f = false;\n                    const checkpoint = _c;\n                    await allCheckpointHandler(checkpoint);\n                    const handler = this.getCheckpointHandler(checkpoint.type);\n                    const result = await handler(checkpoint);\n                    if (result) {\n                        return result;\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_f && !_a && (_b = _g.return)) await _b.call(_g);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        catch (error) {\n            return await this.transformOutput({ error });\n        }\n        finally {\n            void this.state.loop.return();\n            await ((_e = (_d = this.state.hooks) === null || _d === void 0 ? void 0 : _d.beforeResponse) === null || _e === void 0 ? void 0 : _e.call(_d));\n        }\n        /**\n         * If we're here, the generator somehow finished without returning a value.\n         * This should never happen.\n         */\n        throw new Error(\"Core loop finished without returning a value\");\n    }\n    /**\n     * Creates a handler for every checkpoint type, defining what to do when we\n     * reach that checkpoint in the core loop.\n     */\n    createCheckpointHandlers() {\n        return {\n            /**\n             * Run for all checkpoints. Best used for logging or common actions.\n             * Use other handlers to return values and interrupt the core loop.\n             */\n            \"\": (checkpoint) => {\n                this.debug(\"checkpoint:\", checkpoint);\n            },\n            /**\n             * The user's function has completed and returned a value.\n             */\n            \"function-resolved\": async (checkpoint) => {\n                return await this.transformOutput({ data: checkpoint.data });\n            },\n            /**\n             * The user's function has thrown an error.\n             */\n            \"function-rejected\": async (checkpoint) => {\n                return await this.transformOutput({ error: checkpoint.error });\n            },\n            /**\n             * We've found one or more steps. Here we may want to run a step or report\n             * them back to Inngest.\n             */\n            \"steps-found\": async ({ steps }) => {\n                const stepResult = await this.tryExecuteStep(steps);\n                if (stepResult) {\n                    const transformResult = await this.transformOutput(stepResult);\n                    /**\n                     * Transforming output will always return either function rejection or\n                     * resolution. In most cases, this can be immediately returned, but in\n                     * this particular case we want to handle it differently.\n                     */\n                    if (transformResult.type === \"function-resolved\") {\n                        return {\n                            type: \"step-ran\",\n                            ctx: transformResult.ctx,\n                            ops: transformResult.ops,\n                            step: exports._internals.hashOp(Object.assign(Object.assign({}, stepResult), { data: transformResult.data })),\n                        };\n                    }\n                    else if (transformResult.type === \"function-rejected\") {\n                        return {\n                            type: \"step-ran\",\n                            ctx: transformResult.ctx,\n                            ops: transformResult.ops,\n                            step: exports._internals.hashOp(Object.assign(Object.assign({}, stepResult), { error: transformResult.error })),\n                            retriable: transformResult.retriable,\n                        };\n                    }\n                    return transformResult;\n                }\n                const newSteps = await this.filterNewSteps(Array.from(this.state.steps.values()));\n                if (newSteps) {\n                    return {\n                        type: \"steps-found\",\n                        ctx: this.fnArg,\n                        ops: this.ops,\n                        steps: newSteps,\n                    };\n                }\n            },\n            /**\n             * While trying to find a step that Inngest has told us to run, we've\n             * timed out or have otherwise decided that it doesn't exist.\n             */\n            \"step-not-found\": ({ step }) => {\n                return { type: \"step-not-found\", ctx: this.fnArg, ops: this.ops, step };\n            },\n        };\n    }\n    getCheckpointHandler(type) {\n        return this.checkpointHandlers[type];\n    }\n    async tryExecuteStep(steps) {\n        var _a;\n        const hashedStepIdToRun = this.options.requestedRunStep || this.getEarlyExecRunStep(steps);\n        if (!hashedStepIdToRun) {\n            return;\n        }\n        const step = steps.find((step) => step.hashedId === hashedStepIdToRun && step.fn);\n        if (step) {\n            return await this.executeStep(step);\n        }\n        /**\n         * Ensure we reset the timeout if we have a requested run step but couldn't\n         * find it, but also that we don't reset if we found and executed it.\n         */\n        void ((_a = this.timeout) === null || _a === void 0 ? void 0 : _a.reset());\n    }\n    /**\n     * Given a list of outgoing ops, decide if we can execute an op early and\n     * return the ID of the step to execute if we can.\n     */\n    getEarlyExecRunStep(steps) {\n        /**\n         * We may have been disabled due to parallelism, in which case we can't\n         * immediately execute unless explicitly requested.\n         */\n        if (this.options.disableImmediateExecution)\n            return;\n        const unfulfilledSteps = steps.filter((step) => !step.fulfilled);\n        if (unfulfilledSteps.length !== 1)\n            return;\n        const op = unfulfilledSteps[0];\n        if (op &&\n            op.op === types_js_1.StepOpCode.StepPlanned\n        // TODO We must individually check properties here that we do not want to\n        // execute on, such as retry counts. Nothing exists here that falls in to\n        // this case, but should be accounted for when we add them.\n        // && typeof op.opts === \"undefined\"\n        ) {\n            return op.hashedId;\n        }\n    }\n    async filterNewSteps(foundSteps) {\n        var _a, _b, _c, _d, _e, _f;\n        if (this.options.requestedRunStep) {\n            return;\n        }\n        /**\n         * Gather any steps that aren't memoized and report them.\n         */\n        const newSteps = foundSteps.filter((step) => !step.fulfilled);\n        if (!newSteps.length) {\n            return;\n        }\n        /**\n         * Warn if we've found new steps but haven't yet seen all previous\n         * steps. This may indicate that step presence isn't determinate.\n         */\n        let knownSteps = 0;\n        for (const step of foundSteps) {\n            if (step.fulfilled) {\n                knownSteps++;\n            }\n        }\n        const foundAllCompletedSteps = this.state.stepsToFulfill === knownSteps;\n        if (!foundAllCompletedSteps) {\n            // TODO Tag\n            console.warn((0, errors_js_1.prettyError)({\n                type: \"warn\",\n                whatHappened: \"Function may be indeterminate\",\n                why: \"We found new steps before seeing all previous steps, which may indicate that the function is non-deterministic.\",\n                consequences: \"This may cause unexpected behaviour as Inngest executes your function.\",\n                reassurance: \"This is expected if a function is updated in the middle of a run, but may indicate a bug if not.\",\n            }));\n        }\n        /**\n         * We're finishing up; let's trigger the last of the hooks.\n         */\n        await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n        await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n        await ((_f = (_e = this.state.hooks) === null || _e === void 0 ? void 0 : _e.afterExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n        const stepList = newSteps.map((step) => ({\n            displayName: step.displayName,\n            op: step.op,\n            id: step.hashedId,\n            name: step.name,\n            opts: step.opts,\n        }));\n        /**\n         * We also run `onSendEvent` middleware hooks against `step.invoke()` steps\n         * to ensure that their `data` is transformed correctly.\n         */\n        return await this.transformNewSteps(stepList);\n    }\n    /**\n     * Using middleware, transform any newly-found steps before returning them to\n     * an Inngest Server.\n     */\n    async transformNewSteps(steps) {\n        return Promise.all(steps.map(async (step) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (step.op !== types_js_1.StepOpCode.InvokeFunction) {\n                return step;\n            }\n            const onSendEventHooks = await (0, InngestMiddleware_js_1.getHookStack)(this.options.fn[\"middleware\"], \"onSendEvent\", undefined, {\n                transformInput: (prev, output) => {\n                    return Object.assign(Object.assign({}, prev), output);\n                },\n                transformOutput: (prev, output) => {\n                    return {\n                        result: Object.assign(Object.assign({}, prev.result), output === null || output === void 0 ? void 0 : output.result),\n                    };\n                },\n            });\n            /**\n             * For each event being sent, create a new `onSendEvent` hook stack to\n             * process it. We do this as middleware hooks are intended to run once\n             * during each lifecycle (onFunctionRun or onSendEvent) and here, a hook\n             * is run for every single event.\n             *\n             * This is done because a developer can use this hook to filter out\n             * events entirely; if we batch all of the events together, we can't\n             * tell which ones were filtered out if we're processing >1 invocation\n             * here.\n             */\n            const transformedPayload = await ((_a = onSendEventHooks.transformInput) === null || _a === void 0 ? void 0 : _a.call(onSendEventHooks, {\n                payloads: [\n                    Object.assign(Object.assign({}, ((_c = (_b = step.opts) === null || _b === void 0 ? void 0 : _b.payload) !== null && _c !== void 0 ? _c : {})), { name: consts_js_1.internalEvents.FunctionInvoked }),\n                ],\n            }));\n            const newPayload = InngestStepTools_js_1.invokePayloadSchema.parse((_e = (_d = transformedPayload === null || transformedPayload === void 0 ? void 0 : transformedPayload.payloads) === null || _d === void 0 ? void 0 : _d[0]) !== null && _e !== void 0 ? _e : {});\n            return Object.assign(Object.assign({}, step), { opts: Object.assign(Object.assign({}, step.opts), { payload: Object.assign(Object.assign({}, ((_g = (_f = step.opts) === null || _f === void 0 ? void 0 : _f.payload) !== null && _g !== void 0 ? _g : {})), newPayload) }) });\n        }));\n    }\n    async executeStep({ id, name, opts, fn, displayName, }) {\n        var _a, _b, _c, _d, _e;\n        (_a = this.timeout) === null || _a === void 0 ? void 0 : _a.clear();\n        await ((_c = (_b = this.state.hooks) === null || _b === void 0 ? void 0 : _b.afterMemoization) === null || _c === void 0 ? void 0 : _c.call(_b));\n        await ((_e = (_d = this.state.hooks) === null || _d === void 0 ? void 0 : _d.beforeExecution) === null || _e === void 0 ? void 0 : _e.call(_d));\n        const outgoingOp = {\n            id,\n            op: types_js_1.StepOpCode.StepRun,\n            name,\n            opts,\n            displayName,\n        };\n        this.state.executingStep = outgoingOp;\n        const store = await (0, als_js_1.getAsyncCtx)();\n        if (store) {\n            store.executingStep = {\n                id,\n                name: displayName,\n            };\n        }\n        this.debug(`executing step \"${id}\"`);\n        return ((0, promises_js_1.runAsPromise)(fn)\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            .finally(async () => {\n            var _a, _b;\n            if (store) {\n                delete store.executingStep;\n            }\n            await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterExecution) === null || _b === void 0 ? void 0 : _b.call(_a));\n        })\n            .then((data) => {\n            return Object.assign(Object.assign({}, outgoingOp), { data });\n        })\n            .catch((error) => {\n            return Object.assign(Object.assign({}, outgoingOp), { op: types_js_1.StepOpCode.StepError, \n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                error });\n        }));\n    }\n    /**\n     * Starts execution of the user's function, including triggering checkpoints\n     * and middleware hooks where appropriate.\n     */\n    async startExecution() {\n        var _a, _b, _c, _d, _e, _f, _g;\n        /**\n         * Mutate input as neccessary based on middleware.\n         */\n        await this.transformInput();\n        /**\n         * Start the timer to time out the run if needed.\n         */\n        void ((_a = this.timeout) === null || _a === void 0 ? void 0 : _a.start());\n        await ((_c = (_b = this.state.hooks) === null || _b === void 0 ? void 0 : _b.beforeMemoization) === null || _c === void 0 ? void 0 : _c.call(_b));\n        /**\n         * If we had no state to begin with, immediately end the memoization phase.\n         */\n        if (this.state.allStateUsed()) {\n            await ((_e = (_d = this.state.hooks) === null || _d === void 0 ? void 0 : _d.afterMemoization) === null || _e === void 0 ? void 0 : _e.call(_d));\n            await ((_g = (_f = this.state.hooks) === null || _f === void 0 ? void 0 : _f.beforeExecution) === null || _g === void 0 ? void 0 : _g.call(_f));\n        }\n        /**\n         * Trigger the user's function.\n         */\n        (0, promises_js_1.runAsPromise)(() => this.userFnToRun(this.fnArg))\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            .finally(async () => {\n            var _a, _b, _c, _d, _e, _f;\n            await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n            await ((_f = (_e = this.state.hooks) === null || _e === void 0 ? void 0 : _e.afterExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n        })\n            .then((data) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.state.setCheckpoint({ type: \"function-resolved\", data });\n        })\n            .catch((error) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.state.setCheckpoint({ type: \"function-rejected\", error });\n        });\n    }\n    /**\n     * Using middleware, transform input before running.\n     */\n    async transformInput() {\n        var _a, _b;\n        const inputMutations = await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.transformInput) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            ctx: Object.assign({}, this.fnArg),\n            steps: Object.values(this.state.stepState),\n            fn: this.options.fn,\n            reqArgs: this.options.reqArgs,\n        }));\n        if (inputMutations === null || inputMutations === void 0 ? void 0 : inputMutations.ctx) {\n            this.fnArg = inputMutations.ctx;\n        }\n        if (inputMutations === null || inputMutations === void 0 ? void 0 : inputMutations.steps) {\n            this.state.stepState = Object.fromEntries(inputMutations.steps.map((step) => [step.id, step]));\n        }\n    }\n    /**\n     * Using middleware, transform output before returning.\n     */\n    async transformOutput(dataOrError) {\n        var _a, _b, _c, _d;\n        const output = Object.assign({}, dataOrError);\n        /**\n         * If we've been given an error and it's one that we just threw from a step,\n         * we should return a `NonRetriableError` to stop execution.\n         */\n        if (typeof output.error !== \"undefined\") {\n            output.data = (0, errors_js_1.serializeError)(output.error);\n        }\n        const isStepExecution = Boolean(this.state.executingStep);\n        const transformedOutput = await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.transformOutput) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            result: Object.assign({}, output),\n            step: this.state.executingStep,\n        }));\n        const { data, error } = Object.assign(Object.assign({}, output), transformedOutput === null || transformedOutput === void 0 ? void 0 : transformedOutput.result);\n        if (!isStepExecution) {\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.finished) === null || _d === void 0 ? void 0 : _d.call(_c, {\n                result: Object.assign({}, (typeof error !== \"undefined\" ? { error } : { data })),\n            }));\n        }\n        if (typeof error !== \"undefined\") {\n            /**\n             * Ensure we give middleware the chance to decide on retriable behaviour\n             * by looking at the error returned from output transformation.\n             */\n            let retriable = !(error instanceof NonRetriableError_js_1.NonRetriableError || error instanceof StepError_js_1.StepError);\n            if (retriable && error instanceof RetryAfterError_js_1.RetryAfterError) {\n                retriable = error.retryAfter;\n            }\n            const serializedError = (0, errors_js_1.minifyPrettyError)((0, errors_js_1.serializeError)(error));\n            return {\n                type: \"function-rejected\",\n                ctx: this.fnArg,\n                ops: this.ops,\n                error: serializedError,\n                retriable,\n            };\n        }\n        return {\n            type: \"function-resolved\",\n            ctx: this.fnArg,\n            ops: this.ops,\n            data: (0, functions_js_1.undefinedToNull)(data),\n        };\n    }\n    createExecutionState() {\n        const d = (0, promises_js_1.createDeferredPromiseWithStack)();\n        let checkpointResolve = d.deferred.resolve;\n        const checkpointResults = d.results;\n        const loop = (function (cleanUp) {\n            return __asyncGenerator(this, arguments, function* () {\n                try {\n                    while (true) {\n                        const res = (yield __await(checkpointResults.next())).value;\n                        if (res) {\n                            yield yield __await(res);\n                        }\n                    }\n                }\n                finally {\n                    cleanUp === null || cleanUp === void 0 ? void 0 : cleanUp();\n                }\n            });\n        })(() => {\n            var _a;\n            (_a = this.timeout) === null || _a === void 0 ? void 0 : _a.clear();\n            void checkpointResults.return();\n        });\n        const stepsToFulfill = Object.keys(this.options.stepState).length;\n        const state = {\n            stepState: this.options.stepState,\n            stepsToFulfill,\n            steps: new Map(),\n            loop,\n            hasSteps: Boolean(stepsToFulfill),\n            stepCompletionOrder: [...this.options.stepCompletionOrder],\n            remainingStepsToBeSeen: new Set(this.options.stepCompletionOrder),\n            setCheckpoint: (checkpoint) => {\n                ({ resolve: checkpointResolve } = checkpointResolve(checkpoint));\n            },\n            allStateUsed: () => {\n                return this.state.remainingStepsToBeSeen.size === 0;\n            },\n        };\n        return state;\n    }\n    get ops() {\n        return Object.fromEntries(this.state.steps);\n    }\n    createFnArg() {\n        var _a, _b, _c, _d;\n        const step = this.createStepTools();\n        let fnArg = Object.assign(Object.assign({}, this.options.data), { step });\n        /**\n         * Handle use of the `onFailure` option by deserializing the error.\n         */\n        if (this.options.isFailureHandler) {\n            const eventData = zod_1.z\n                .object({ error: types_js_1.jsonErrorSchema })\n                .parse((_a = fnArg.event) === null || _a === void 0 ? void 0 : _a.data);\n            fnArg = Object.assign(Object.assign({}, fnArg), { error: (0, errors_js_1.deserializeError)(eventData.error) });\n        }\n        return (_d = (_c = (_b = this.options).transformCtx) === null || _c === void 0 ? void 0 : _c.call(_b, fnArg)) !== null && _d !== void 0 ? _d : fnArg;\n    }\n    createStepTools() {\n        /**\n         * A list of steps that have been found and are being rolled up before being\n         * reported to the core loop.\n         */\n        const foundStepsToReport = new Map();\n        /**\n         * A map of the subset of found steps to report that have not yet been\n         * handled. Used for fast access to steps that need to be handled in order.\n         */\n        const unhandledFoundStepsToReport = new Map();\n        /**\n         * A map of the latest sequential step indexes found for each step ID. Used\n         * to ensure that we don't index steps in parallel.\n         *\n         * Note that these must be sequential; if we've seen or assigned `a:1`,\n         * `a:2` and `a:4`, the latest sequential step index is `2`.\n         *\n         */\n        const expectedNextStepIndexes = new Map();\n        /**\n         * An ordered list of step IDs that have yet to be handled in this\n         * execution. Used to ensure that we handle steps in the order they were\n         * found and based on the `stepCompletionOrder` in this execution's state.\n         */\n        const remainingStepCompletionOrder = this.state.stepCompletionOrder.slice();\n        /**\n         * A promise that's used to ensure that step reporting cannot be run more than\n         * once in a given asynchronous time span.\n         */\n        let foundStepsReportPromise;\n        /**\n         * A promise that's used to represent middleware hooks running before\n         * execution.\n         */\n        let beforeExecHooksPromise;\n        /**\n         * A flag used to ensure that we only warn about parallel indexing once per\n         * execution to avoid spamming the console.\n         */\n        let warnOfParallelIndexing = false;\n        /**\n         * Counts the number of times we've extended this tick.\n         */\n        let tickExtensionCount = 0;\n        /**\n         * Given a colliding step ID, maybe warn the user about parallel indexing.\n         */\n        const maybeWarnOfParallelIndexing = (collisionId) => {\n            if (warnOfParallelIndexing) {\n                return;\n            }\n            const stepExists = this.state.steps.has(collisionId);\n            if (stepExists) {\n                const stepFoundThisTick = foundStepsToReport.has(collisionId);\n                if (!stepFoundThisTick) {\n                    warnOfParallelIndexing = true;\n                    console.warn((0, errors_js_1.prettyError)({\n                        type: \"warn\",\n                        whatHappened: \"We detected that you have multiple steps with the same ID.\",\n                        code: errors_js_1.ErrCode.AUTOMATIC_PARALLEL_INDEXING,\n                        why: `This can happen if you're using the same ID for multiple steps across different chains of parallel work. We found the issue with step \"${collisionId}\".`,\n                        reassurance: \"Your function is still running, though it may exhibit unexpected behaviour.\",\n                        consequences: \"Using the same IDs across parallel chains of work can cause unexpected behaviour.\",\n                        toFixNow: \"We recommend using a unique ID for each step, especially those happening in parallel.\",\n                    }));\n                }\n            }\n        };\n        /**\n         * A helper used to report steps to the core loop. Used after adding an item\n         * to `foundStepsToReport`.\n         */\n        const reportNextTick = () => {\n            // Being explicit instead of using `??=` to appease TypeScript.\n            if (foundStepsReportPromise) {\n                return;\n            }\n            let extensionPromise;\n            if (++tickExtensionCount >= 10) {\n                tickExtensionCount = 0;\n                extensionPromise = new Promise((resolve) => setTimeout(resolve));\n            }\n            else {\n                extensionPromise = (0, promises_js_1.resolveAfterPending)();\n            }\n            foundStepsReportPromise = extensionPromise\n                /**\n                 * Ensure that we wait for this promise to resolve before continuing.\n                 *\n                 * The groups in which steps are reported can affect how we detect some\n                 * more complex determinism issues like parallel indexing. This promise\n                 * can represent middleware hooks being run early, in the middle of\n                 * ingesting steps to report.\n                 *\n                 * Because of this, it's important we wait for this middleware to resolve\n                 * before continuing to report steps to ensure that all steps have a\n                 * chance to be reported throughout this asynchronous action.\n                 */\n                .then(() => beforeExecHooksPromise)\n                .then(() => {\n                var _a;\n                foundStepsReportPromise = undefined;\n                for (let i = 0; i < remainingStepCompletionOrder.length; i++) {\n                    const nextStepId = remainingStepCompletionOrder[i];\n                    if (!nextStepId) {\n                        // Strange - skip this empty index\n                        continue;\n                    }\n                    const handled = (_a = unhandledFoundStepsToReport\n                        .get(nextStepId)) === null || _a === void 0 ? void 0 : _a.handle();\n                    if (handled) {\n                        remainingStepCompletionOrder.splice(i, 1);\n                        unhandledFoundStepsToReport.delete(nextStepId);\n                        return void reportNextTick();\n                    }\n                }\n                // If we've handled no steps in this \"tick,\" roll up everything we've\n                // found and report it.\n                const steps = [...foundStepsToReport.values()];\n                foundStepsToReport.clear();\n                unhandledFoundStepsToReport.clear();\n                return void this.state.setCheckpoint({\n                    type: \"steps-found\",\n                    steps: steps,\n                });\n            });\n        };\n        /**\n         * A helper used to push a step to the list of steps to report.\n         */\n        const pushStepToReport = (step) => {\n            foundStepsToReport.set(step.id, step);\n            unhandledFoundStepsToReport.set(step.hashedId, step);\n            reportNextTick();\n        };\n        const stepHandler = async ({ args, matchOp, opts, }) => {\n            var _a, _b, _c, _d;\n            await beforeExecHooksPromise;\n            const stepOptions = (0, InngestStepTools_js_1.getStepOptions)(args[0]);\n            const opId = matchOp(stepOptions, ...args.slice(1));\n            if (this.state.executingStep) {\n                /**\n                 * If a step is found after asynchronous actions during another step's\n                 * execution, everything is fine. The problem here is if we've found\n                 * that a step nested inside another a step, which is something we don't\n                 * support at the time of writing.\n                 *\n                 * In this case, we could use something like Async Hooks to understand\n                 * how the step is being triggered, though this isn't available in all\n                 * environments.\n                 *\n                 * Therefore, we'll only show a warning here to indicate that this is\n                 * potentially an issue.\n                 */\n                console.warn((0, errors_js_1.prettyError)({\n                    whatHappened: `We detected that you have nested \\`step.*\\` tooling in \\`${(_a = opId.displayName) !== null && _a !== void 0 ? _a : opId.id}\\``,\n                    consequences: \"Nesting `step.*` tooling is not supported.\",\n                    type: \"warn\",\n                    reassurance: \"It's possible to see this warning if steps are separated by regular asynchronous calls, which is fine.\",\n                    stack: true,\n                    toFixNow: \"Make sure you're not using `step.*` tooling inside of other `step.*` tooling. If you need to compose steps together, you can create a new async function and call it from within your step function, or use promise chaining.\",\n                    code: errors_js_1.ErrCode.NESTING_STEPS,\n                }));\n            }\n            if (this.state.steps.has(opId.id)) {\n                const originalId = opId.id;\n                maybeWarnOfParallelIndexing(originalId);\n                const expectedNextIndex = (_b = expectedNextStepIndexes.get(originalId)) !== null && _b !== void 0 ? _b : 1;\n                for (let i = expectedNextIndex;; i++) {\n                    const newId = originalId + InngestStepTools_js_1.STEP_INDEXING_SUFFIX + i;\n                    if (!this.state.steps.has(newId)) {\n                        expectedNextStepIndexes.set(originalId, i + 1);\n                        opId.id = newId;\n                        break;\n                    }\n                }\n            }\n            const { promise, resolve, reject } = (0, promises_js_1.createDeferredPromise)();\n            const hashedId = exports._internals.hashId(opId.id);\n            const stepState = this.state.stepState[hashedId];\n            let isFulfilled = false;\n            if (stepState) {\n                stepState.seen = true;\n                this.state.remainingStepsToBeSeen.delete(hashedId);\n                if (typeof stepState.input === \"undefined\") {\n                    isFulfilled = true;\n                }\n            }\n            let extraOpts;\n            let fnArgs = [...args];\n            if (typeof (stepState === null || stepState === void 0 ? void 0 : stepState.input) !== \"undefined\" &&\n                Array.isArray(stepState.input)) {\n                switch (opId.op) {\n                    // `step.run()` has its function input affected\n                    case types_js_1.StepOpCode.StepPlanned: {\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        fnArgs = [...args.slice(0, 2), ...stepState.input];\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        extraOpts = { input: [...stepState.input] };\n                        break;\n                    }\n                    // `step.ai.infer()` has its body affected\n                    case types_js_1.StepOpCode.AiGateway: {\n                        extraOpts = {\n                            body: Object.assign(Object.assign({}, (typeof ((_c = opId.opts) === null || _c === void 0 ? void 0 : _c.body) === \"object\"\n                                ? Object.assign({}, opId.opts.body) : {})), stepState.input[0]),\n                        };\n                        break;\n                    }\n                }\n            }\n            const step = Object.assign(Object.assign({}, opId), { opts: Object.assign(Object.assign({}, opId.opts), extraOpts), rawArgs: fnArgs, // TODO What is the right value here? Should this be raw args without affected input?\n                hashedId, input: stepState === null || stepState === void 0 ? void 0 : stepState.input, \n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                fn: (opts === null || opts === void 0 ? void 0 : opts.fn) ? () => { var _a; return (_a = opts.fn) === null || _a === void 0 ? void 0 : _a.call(opts, ...fnArgs); } : undefined, promise, fulfilled: isFulfilled, hasStepState: Boolean(stepState), displayName: (_d = opId.displayName) !== null && _d !== void 0 ? _d : opId.id, handled: false, handle: () => {\n                    if (step.handled) {\n                        return false;\n                    }\n                    step.handled = true;\n                    if (isFulfilled && stepState) {\n                        stepState.fulfilled = true;\n                        // For some execution scenarios such as testing, `data`, `error`,\n                        // and `input` may be `Promises`. This could also be the case for\n                        // future middleware applications. For this reason, we'll make sure\n                        // the values are fully resolved before continuing.\n                        void Promise.all([\n                            stepState.data,\n                            stepState.error,\n                            stepState.input,\n                        ]).then(() => {\n                            if (typeof stepState.data !== \"undefined\") {\n                                resolve(stepState.data);\n                            }\n                            else {\n                                this.state.recentlyRejectedStepError = new StepError_js_1.StepError(opId.id, stepState.error);\n                                reject(this.state.recentlyRejectedStepError);\n                            }\n                        });\n                    }\n                    return true;\n                } });\n            this.state.steps.set(opId.id, step);\n            this.state.hasSteps = true;\n            pushStepToReport(step);\n            /**\n             * If this is the last piece of state we had, we've now finished\n             * memoizing.\n             */\n            if (!beforeExecHooksPromise && this.state.allStateUsed()) {\n                await (beforeExecHooksPromise = (async () => {\n                    var _a, _b, _c, _d;\n                    await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n                    await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n                })());\n            }\n            return promise;\n        };\n        return (0, InngestStepTools_js_1.createStepTools)(this.options.client, this, stepHandler);\n    }\n    getUserFnToRun() {\n        if (!this.options.isFailureHandler) {\n            return this.options.fn[\"fn\"];\n        }\n        if (!this.options.fn[\"onFailureFn\"]) {\n            /**\n             * Somehow, we've ended up detecting that this is a failure handler but\n             * doesn't have an `onFailure` function. This should never happen.\n             */\n            throw new Error(\"Cannot find function `onFailure` handler\");\n        }\n        return this.options.fn[\"onFailureFn\"];\n    }\n    initializeTimer(state) {\n        if (!this.options.requestedRunStep) {\n            return;\n        }\n        this.timeout = (0, promises_js_1.createTimeoutPromise)(this.timeoutDuration);\n        void this.timeout.then(async () => {\n            var _a, _b, _c, _d, _e, _f;\n            await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n            await ((_f = (_e = this.state.hooks) === null || _e === void 0 ? void 0 : _e.afterExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n            state.setCheckpoint({\n                type: \"step-not-found\",\n                step: {\n                    id: this.options.requestedRunStep,\n                    op: types_js_1.StepOpCode.StepNotFound,\n                },\n            });\n        });\n    }\n    async initializeMiddleware() {\n        const ctx = this.options.data;\n        const hooks = await (0, InngestMiddleware_js_1.getHookStack)(this.options.fn[\"middleware\"], \"onFunctionRun\", {\n            ctx,\n            fn: this.options.fn,\n            steps: Object.values(this.options.stepState),\n            reqArgs: this.options.reqArgs,\n        }, {\n            transformInput: (prev, output) => {\n                return {\n                    ctx: Object.assign(Object.assign({}, prev.ctx), output === null || output === void 0 ? void 0 : output.ctx),\n                    fn: this.options.fn,\n                    steps: prev.steps.map((step, i) => {\n                        var _a;\n                        return (Object.assign(Object.assign({}, step), (_a = output === null || output === void 0 ? void 0 : output.steps) === null || _a === void 0 ? void 0 : _a[i]));\n                    }),\n                    reqArgs: prev.reqArgs,\n                };\n            },\n            transformOutput: (prev, output) => {\n                return {\n                    result: Object.assign(Object.assign({}, prev.result), output === null || output === void 0 ? void 0 : output.result),\n                    step: prev.step,\n                };\n            },\n        });\n        return hooks;\n    }\n}\nconst hashId = (id) => {\n    return (0, hash_js_1.sha1)().update(id).digest(\"hex\");\n};\nconst hashOp = (op) => {\n    return Object.assign(Object.assign({}, op), { id: hashId(op.id) });\n};\n/**\n * Exported for testing.\n */\nexports._internals = { hashOp, hashId };\n//# sourceMappingURL=v1.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/v1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/components/execution/v2.js":
/*!*********************************************************!*\
  !*** ./node_modules/inngest/components/execution/v2.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._internals = exports.createV2InngestExecution = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/@opentelemetry/api/build/esm/index.js\");\nconst hash_js_1 = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst consts_js_1 = __webpack_require__(/*! ../../helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../helpers/errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\nconst functions_js_1 = __webpack_require__(/*! ../../helpers/functions.js */ \"(rsc)/./node_modules/inngest/helpers/functions.js\");\nconst promises_js_1 = __webpack_require__(/*! ../../helpers/promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\nconst types_js_1 = __webpack_require__(/*! ../../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst version_js_1 = __webpack_require__(/*! ../../version.js */ \"(rsc)/./node_modules/inngest/version.js\");\nconst InngestMiddleware_js_1 = __webpack_require__(/*! ../InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\nconst InngestStepTools_js_1 = __webpack_require__(/*! ../InngestStepTools.js */ \"(rsc)/./node_modules/inngest/components/InngestStepTools.js\");\nconst NonRetriableError_js_1 = __webpack_require__(/*! ../NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\nconst RetryAfterError_js_1 = __webpack_require__(/*! ../RetryAfterError.js */ \"(rsc)/./node_modules/inngest/components/RetryAfterError.js\");\nconst StepError_js_1 = __webpack_require__(/*! ../StepError.js */ \"(rsc)/./node_modules/inngest/components/StepError.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ./InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\nconst als_js_1 = __webpack_require__(/*! ./als.js */ \"(rsc)/./node_modules/inngest/components/execution/als.js\");\nconst access_js_1 = __webpack_require__(/*! ./otel/access.js */ \"(rsc)/./node_modules/inngest/components/execution/otel/access.js\");\nconst createV2InngestExecution = (options) => {\n    return new V2InngestExecution(options);\n};\nexports.createV2InngestExecution = createV2InngestExecution;\nclass V2InngestExecution extends InngestExecution_js_1.InngestExecution {\n    constructor(options) {\n        super(options);\n        this.timeoutDuration = 1000 * 10;\n        this.userFnToRun = this.getUserFnToRun();\n        this.state = this.createExecutionState();\n        this.fnArg = this.createFnArg();\n        this.checkpointHandlers = this.createCheckpointHandlers();\n        this.initializeTimer(this.state);\n        this.debug(\"created new V2 execution for run;\", this.options.requestedRunStep\n            ? `wanting to run step \"${this.options.requestedRunStep}\"`\n            : \"discovering steps\");\n        this.debug(\"existing state keys:\", Object.keys(this.state.stepState));\n    }\n    /**\n     * Idempotently start the execution of the user's function.\n     */\n    start() {\n        if (!this.execution) {\n            this.debug(\"starting V2 execution\");\n            const tracer = api_1.trace.getTracer(\"inngest\", version_js_1.version);\n            this.execution = (0, als_js_1.getAsyncLocalStorage)().then((als) => {\n                return als.run({ app: this.options.client, ctx: this.fnArg }, async () => {\n                    return tracer.startActiveSpan(\"inngest.execution\", (span) => {\n                        var _a;\n                        (_a = access_js_1.clientProcessorMap.get(this.options.client)) === null || _a === void 0 ? void 0 : _a.declareStartingSpan({\n                            span,\n                            runId: this.options.runId,\n                            traceparent: this.options.headers[consts_js_1.headerKeys.TraceParent],\n                            tracestate: this.options.headers[consts_js_1.headerKeys.TraceState],\n                        });\n                        return this._start()\n                            .then((result) => {\n                            this.debug(\"result:\", result);\n                            return result;\n                        })\n                            .finally(() => {\n                            span.end();\n                        });\n                    });\n                });\n            });\n        }\n        return this.execution;\n    }\n    /**\n     * Starts execution of the user's function and the core loop.\n     */\n    async _start() {\n        var _a, e_1, _b, _c;\n        var _d, _e;\n        try {\n            const allCheckpointHandler = this.getCheckpointHandler(\"\");\n            this.state.hooks = await this.initializeMiddleware();\n            await this.startExecution();\n            try {\n                for (var _f = true, _g = __asyncValues(this.state.loop), _h; _h = await _g.next(), _a = _h.done, !_a; _f = true) {\n                    _c = _h.value;\n                    _f = false;\n                    const checkpoint = _c;\n                    await allCheckpointHandler(checkpoint);\n                    const handler = this.getCheckpointHandler(checkpoint.type);\n                    const result = await handler(checkpoint);\n                    if (result) {\n                        return result;\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_f && !_a && (_b = _g.return)) await _b.call(_g);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n        catch (error) {\n            return await this.transformOutput({ error });\n        }\n        finally {\n            void this.state.loop.return();\n            await ((_e = (_d = this.state.hooks) === null || _d === void 0 ? void 0 : _d.beforeResponse) === null || _e === void 0 ? void 0 : _e.call(_d));\n        }\n        /**\n         * If we're here, the generator somehow finished without returning a value.\n         * This should never happen.\n         */\n        throw new Error(\"Core loop finished without returning a value\");\n    }\n    /**\n     * Creates a handler for every checkpoint type, defining what to do when we\n     * reach that checkpoint in the core loop.\n     */\n    createCheckpointHandlers() {\n        return {\n            /**\n             * Run for all checkpoints. Best used for logging or common actions.\n             * Use other handlers to return values and interrupt the core loop.\n             */\n            \"\": (checkpoint) => {\n                this.debug(\"checkpoint:\", checkpoint);\n            },\n            /**\n             * The user's function has completed and returned a value.\n             */\n            \"function-resolved\": async (checkpoint) => {\n                return await this.transformOutput({ data: checkpoint.data });\n            },\n            /**\n             * The user's function has thrown an error.\n             */\n            \"function-rejected\": async (checkpoint) => {\n                return await this.transformOutput({ error: checkpoint.error });\n            },\n            /**\n             * We've found one or more steps. Here we may want to run a step or report\n             * them back to Inngest.\n             */\n            \"steps-found\": async ({ steps }) => {\n                const stepResult = await this.tryExecuteStep(steps);\n                if (stepResult) {\n                    const transformResult = await this.transformOutput(stepResult);\n                    /**\n                     * Transforming output will always return either function rejection or\n                     * resolution. In most cases, this can be immediately returned, but in\n                     * this particular case we want to handle it differently.\n                     */\n                    if (transformResult.type === \"function-resolved\") {\n                        return {\n                            type: \"step-ran\",\n                            ctx: transformResult.ctx,\n                            ops: transformResult.ops,\n                            step: exports._internals.hashOp(Object.assign(Object.assign({}, stepResult), { data: transformResult.data })),\n                        };\n                    }\n                    else if (transformResult.type === \"function-rejected\") {\n                        return {\n                            type: \"step-ran\",\n                            ctx: transformResult.ctx,\n                            ops: transformResult.ops,\n                            step: exports._internals.hashOp(Object.assign(Object.assign({}, stepResult), { error: transformResult.error })),\n                            retriable: transformResult.retriable,\n                        };\n                    }\n                    return transformResult;\n                }\n                const newSteps = await this.filterNewSteps(Array.from(this.state.steps.values()));\n                if (newSteps) {\n                    return {\n                        type: \"steps-found\",\n                        ctx: this.fnArg,\n                        ops: this.ops,\n                        steps: newSteps,\n                    };\n                }\n            },\n            /**\n             * While trying to find a step that Inngest has told us to run, we've\n             * timed out or have otherwise decided that it doesn't exist.\n             */\n            \"step-not-found\": ({ step }) => {\n                return { type: \"step-not-found\", ctx: this.fnArg, ops: this.ops, step };\n            },\n        };\n    }\n    getCheckpointHandler(type) {\n        return this.checkpointHandlers[type];\n    }\n    async tryExecuteStep(steps) {\n        var _a;\n        const hashedStepIdToRun = this.options.requestedRunStep || this.getEarlyExecRunStep(steps);\n        if (!hashedStepIdToRun) {\n            return;\n        }\n        const step = steps.find((step) => step.hashedId === hashedStepIdToRun && step.fn);\n        if (step) {\n            return await this.executeStep(step);\n        }\n        /**\n         * Ensure we reset the timeout if we have a requested run step but couldn't\n         * find it, but also that we don't reset if we found and executed it.\n         */\n        void ((_a = this.timeout) === null || _a === void 0 ? void 0 : _a.reset());\n    }\n    /**\n     * Given a list of outgoing ops, decide if we can execute an op early and\n     * return the ID of the step to execute if we can.\n     */\n    getEarlyExecRunStep(steps) {\n        /**\n         * We may have been disabled due to parallelism, in which case we can't\n         * immediately execute unless explicitly requested.\n         */\n        if (this.options.disableImmediateExecution)\n            return;\n        const unfulfilledSteps = steps.filter((step) => !step.fulfilled);\n        if (unfulfilledSteps.length !== 1)\n            return;\n        const op = unfulfilledSteps[0];\n        if (op &&\n            op.op === types_js_1.StepOpCode.StepPlanned\n        // TODO We must individually check properties here that we do not want to\n        // execute on, such as retry counts. Nothing exists here that falls in to\n        // this case, but should be accounted for when we add them.\n        // && typeof op.opts === \"undefined\"\n        ) {\n            return op.hashedId;\n        }\n    }\n    async filterNewSteps(foundSteps) {\n        var _a, _b, _c, _d, _e, _f;\n        if (this.options.requestedRunStep) {\n            return;\n        }\n        /**\n         * Gather any steps that aren't memoized and report them.\n         */\n        const newSteps = foundSteps.filter((step) => !step.fulfilled);\n        if (!newSteps.length) {\n            return;\n        }\n        /**\n         * Warn if we've found new steps but haven't yet seen all previous\n         * steps. This may indicate that step presence isn't determinate.\n         */\n        let knownSteps = 0;\n        for (const step of foundSteps) {\n            if (step.fulfilled) {\n                knownSteps++;\n            }\n        }\n        const foundAllCompletedSteps = this.state.stepsToFulfill === knownSteps;\n        if (!foundAllCompletedSteps) {\n            // TODO Tag\n            console.warn((0, errors_js_1.prettyError)({\n                type: \"warn\",\n                whatHappened: \"Function may be indeterminate\",\n                why: \"We found new steps before seeing all previous steps, which may indicate that the function is non-deterministic.\",\n                consequences: \"This may cause unexpected behaviour as Inngest executes your function.\",\n                reassurance: \"This is expected if a function is updated in the middle of a run, but may indicate a bug if not.\",\n            }));\n        }\n        /**\n         * We're finishing up; let's trigger the last of the hooks.\n         */\n        await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n        await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n        await ((_f = (_e = this.state.hooks) === null || _e === void 0 ? void 0 : _e.afterExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n        const stepList = newSteps.map((step) => ({\n            displayName: step.displayName,\n            op: step.op,\n            id: step.hashedId,\n            name: step.name,\n            opts: step.opts,\n        }));\n        /**\n         * We also run `onSendEvent` middleware hooks against `step.invoke()` steps\n         * to ensure that their `data` is transformed correctly.\n         */\n        return await this.transformNewSteps(stepList);\n    }\n    /**\n     * Using middleware, transform any newly-found steps before returning them to\n     * an Inngest Server.\n     */\n    async transformNewSteps(steps) {\n        return Promise.all(steps.map(async (step) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (step.op !== types_js_1.StepOpCode.InvokeFunction) {\n                return step;\n            }\n            const onSendEventHooks = await (0, InngestMiddleware_js_1.getHookStack)(this.options.fn[\"middleware\"], \"onSendEvent\", undefined, {\n                transformInput: (prev, output) => {\n                    return Object.assign(Object.assign({}, prev), output);\n                },\n                transformOutput: (prev, output) => {\n                    return {\n                        result: Object.assign(Object.assign({}, prev.result), output === null || output === void 0 ? void 0 : output.result),\n                    };\n                },\n            });\n            /**\n             * For each event being sent, create a new `onSendEvent` hook stack to\n             * process it. We do this as middleware hooks are intended to run once\n             * during each lifecycle (onFunctionRun or onSendEvent) and here, a hook\n             * is run for every single event.\n             *\n             * This is done because a developer can use this hook to filter out\n             * events entirely; if we batch all of the events together, we can't\n             * tell which ones were filtered out if we're processing >1 invocation\n             * here.\n             */\n            const transformedPayload = await ((_a = onSendEventHooks.transformInput) === null || _a === void 0 ? void 0 : _a.call(onSendEventHooks, {\n                payloads: [\n                    Object.assign(Object.assign({}, ((_c = (_b = step.opts) === null || _b === void 0 ? void 0 : _b.payload) !== null && _c !== void 0 ? _c : {})), { name: consts_js_1.internalEvents.FunctionInvoked }),\n                ],\n            }));\n            const newPayload = InngestStepTools_js_1.invokePayloadSchema.parse((_e = (_d = transformedPayload === null || transformedPayload === void 0 ? void 0 : transformedPayload.payloads) === null || _d === void 0 ? void 0 : _d[0]) !== null && _e !== void 0 ? _e : {});\n            return Object.assign(Object.assign({}, step), { opts: Object.assign(Object.assign({}, step.opts), { payload: Object.assign(Object.assign({}, ((_g = (_f = step.opts) === null || _f === void 0 ? void 0 : _f.payload) !== null && _g !== void 0 ? _g : {})), newPayload) }) });\n        }));\n    }\n    async executeStep({ id, name, opts, fn, displayName, }) {\n        var _a, _b, _c, _d, _e;\n        (_a = this.timeout) === null || _a === void 0 ? void 0 : _a.clear();\n        await ((_c = (_b = this.state.hooks) === null || _b === void 0 ? void 0 : _b.afterMemoization) === null || _c === void 0 ? void 0 : _c.call(_b));\n        await ((_e = (_d = this.state.hooks) === null || _d === void 0 ? void 0 : _d.beforeExecution) === null || _e === void 0 ? void 0 : _e.call(_d));\n        const outgoingOp = {\n            id,\n            op: types_js_1.StepOpCode.StepRun,\n            name,\n            opts,\n            displayName,\n        };\n        this.state.executingStep = outgoingOp;\n        const store = await (0, als_js_1.getAsyncCtx)();\n        if (store) {\n            store.executingStep = {\n                id,\n                name: displayName,\n            };\n        }\n        this.debug(`executing step \"${id}\"`);\n        return ((0, promises_js_1.runAsPromise)(fn)\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            .finally(async () => {\n            var _a, _b;\n            if (store) {\n                delete store.executingStep;\n            }\n            await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterExecution) === null || _b === void 0 ? void 0 : _b.call(_a));\n        })\n            .then((data) => {\n            return Object.assign(Object.assign({}, outgoingOp), { data });\n        })\n            .catch((error) => {\n            return Object.assign(Object.assign({}, outgoingOp), { op: types_js_1.StepOpCode.StepError, \n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                error });\n        }));\n    }\n    /**\n     * Starts execution of the user's function, including triggering checkpoints\n     * and middleware hooks where appropriate.\n     */\n    async startExecution() {\n        var _a, _b, _c, _d, _e, _f, _g;\n        /**\n         * Mutate input as neccessary based on middleware.\n         */\n        await this.transformInput();\n        /**\n         * Start the timer to time out the run if needed.\n         */\n        void ((_a = this.timeout) === null || _a === void 0 ? void 0 : _a.start());\n        await ((_c = (_b = this.state.hooks) === null || _b === void 0 ? void 0 : _b.beforeMemoization) === null || _c === void 0 ? void 0 : _c.call(_b));\n        /**\n         * If we had no state to begin with, immediately end the memoization phase.\n         */\n        if (this.state.allStateUsed()) {\n            await ((_e = (_d = this.state.hooks) === null || _d === void 0 ? void 0 : _d.afterMemoization) === null || _e === void 0 ? void 0 : _e.call(_d));\n            await ((_g = (_f = this.state.hooks) === null || _f === void 0 ? void 0 : _f.beforeExecution) === null || _g === void 0 ? void 0 : _g.call(_f));\n        }\n        /**\n         * Trigger the user's function.\n         */\n        (0, promises_js_1.runAsPromise)(() => this.userFnToRun(this.fnArg))\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            .finally(async () => {\n            var _a, _b, _c, _d, _e, _f;\n            await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n            await ((_f = (_e = this.state.hooks) === null || _e === void 0 ? void 0 : _e.afterExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n        })\n            .then((data) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.state.setCheckpoint({ type: \"function-resolved\", data });\n        })\n            .catch((error) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            this.state.setCheckpoint({ type: \"function-rejected\", error });\n        });\n    }\n    /**\n     * Using middleware, transform input before running.\n     */\n    async transformInput() {\n        var _a, _b;\n        const inputMutations = await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.transformInput) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            ctx: Object.assign({}, this.fnArg),\n            steps: Object.values(this.state.stepState),\n            fn: this.options.fn,\n            reqArgs: this.options.reqArgs,\n        }));\n        if (inputMutations === null || inputMutations === void 0 ? void 0 : inputMutations.ctx) {\n            this.fnArg = inputMutations.ctx;\n        }\n        if (inputMutations === null || inputMutations === void 0 ? void 0 : inputMutations.steps) {\n            this.state.stepState = Object.fromEntries(inputMutations.steps.map((step) => [step.id, step]));\n        }\n    }\n    /**\n     * Using middleware, transform output before returning.\n     */\n    async transformOutput(dataOrError) {\n        var _a, _b, _c, _d;\n        const output = Object.assign({}, dataOrError);\n        /**\n         * If we've been given an error and it's one that we just threw from a step,\n         * we should return a `NonRetriableError` to stop execution.\n         */\n        if (typeof output.error !== \"undefined\") {\n            output.data = (0, errors_js_1.serializeError)(output.error);\n        }\n        const isStepExecution = Boolean(this.state.executingStep);\n        const transformedOutput = await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.transformOutput) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            result: Object.assign({}, output),\n            step: this.state.executingStep,\n        }));\n        const { data, error } = Object.assign(Object.assign({}, output), transformedOutput === null || transformedOutput === void 0 ? void 0 : transformedOutput.result);\n        if (!isStepExecution) {\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.finished) === null || _d === void 0 ? void 0 : _d.call(_c, {\n                result: Object.assign({}, (typeof error !== \"undefined\" ? { error } : { data })),\n            }));\n        }\n        if (typeof error !== \"undefined\") {\n            /**\n             * Ensure we give middleware the chance to decide on retriable behaviour\n             * by looking at the error returned from output transformation.\n             */\n            let retriable = !(error instanceof NonRetriableError_js_1.NonRetriableError || error instanceof StepError_js_1.StepError);\n            if (retriable && error instanceof RetryAfterError_js_1.RetryAfterError) {\n                retriable = error.retryAfter;\n            }\n            const serializedError = (0, errors_js_1.minifyPrettyError)((0, errors_js_1.serializeError)(error));\n            return {\n                type: \"function-rejected\",\n                ctx: this.fnArg,\n                ops: this.ops,\n                error: serializedError,\n                retriable,\n            };\n        }\n        return {\n            type: \"function-resolved\",\n            ctx: this.fnArg,\n            ops: this.ops,\n            data: (0, functions_js_1.undefinedToNull)(data),\n        };\n    }\n    createExecutionState() {\n        const d = (0, promises_js_1.createDeferredPromiseWithStack)();\n        let checkpointResolve = d.deferred.resolve;\n        const checkpointResults = d.results;\n        const loop = (function (cleanUp) {\n            return __asyncGenerator(this, arguments, function* () {\n                try {\n                    while (true) {\n                        const res = (yield __await(checkpointResults.next())).value;\n                        if (res) {\n                            yield yield __await(res);\n                        }\n                    }\n                }\n                finally {\n                    cleanUp === null || cleanUp === void 0 ? void 0 : cleanUp();\n                }\n            });\n        })(() => {\n            var _a;\n            (_a = this.timeout) === null || _a === void 0 ? void 0 : _a.clear();\n            void checkpointResults.return();\n        });\n        const stepsToFulfill = Object.keys(this.options.stepState).length;\n        const state = {\n            stepState: this.options.stepState,\n            stepsToFulfill,\n            steps: new Map(),\n            loop,\n            hasSteps: Boolean(stepsToFulfill),\n            stepCompletionOrder: [...this.options.stepCompletionOrder],\n            remainingStepsToBeSeen: new Set(this.options.stepCompletionOrder),\n            setCheckpoint: (checkpoint) => {\n                ({ resolve: checkpointResolve } = checkpointResolve(checkpoint));\n            },\n            allStateUsed: () => {\n                return this.state.remainingStepsToBeSeen.size === 0;\n            },\n        };\n        return state;\n    }\n    get ops() {\n        return Object.fromEntries(this.state.steps);\n    }\n    createFnArg() {\n        var _a, _b, _c, _d;\n        const step = this.createStepTools();\n        let fnArg = Object.assign(Object.assign({}, this.options.data), { step });\n        /**\n         * Handle use of the `onFailure` option by deserializing the error.\n         */\n        if (this.options.isFailureHandler) {\n            const eventData = zod_1.z\n                .object({ error: types_js_1.jsonErrorSchema })\n                .parse((_a = fnArg.event) === null || _a === void 0 ? void 0 : _a.data);\n            fnArg = Object.assign(Object.assign({}, fnArg), { error: (0, errors_js_1.deserializeError)(eventData.error) });\n        }\n        return (_d = (_c = (_b = this.options).transformCtx) === null || _c === void 0 ? void 0 : _c.call(_b, fnArg)) !== null && _d !== void 0 ? _d : fnArg;\n    }\n    createStepTools() {\n        /**\n         * A list of steps that have been found and are being rolled up before being\n         * reported to the core loop.\n         */\n        const foundStepsToReport = new Map();\n        /**\n         * A map of the subset of found steps to report that have not yet been\n         * handled. Used for fast access to steps that need to be handled in order.\n         */\n        const unhandledFoundStepsToReport = new Map();\n        /**\n         * A map of the latest sequential step indexes found for each step ID. Used\n         * to ensure that we don't index steps in parallel.\n         *\n         * Note that these must be sequential; if we've seen or assigned `a:1`,\n         * `a:2` and `a:4`, the latest sequential step index is `2`.\n         *\n         */\n        const expectedNextStepIndexes = new Map();\n        /**\n         * A promise that's used to ensure that step reporting cannot be run more than\n         * once in a given asynchronous time span.\n         */\n        let foundStepsReportPromise;\n        /**\n         * A promise that's used to represent middleware hooks running before\n         * execution.\n         */\n        let beforeExecHooksPromise;\n        /**\n         * A helper used to report steps to the core loop. Used after adding an item\n         * to `foundStepsToReport`.\n         */\n        const reportNextTick = () => {\n            // Being explicit instead of using `??=` to appease TypeScript.\n            if (foundStepsReportPromise) {\n                return;\n            }\n            foundStepsReportPromise = new Promise((resolve) => setImmediate(resolve))\n                /**\n                 * Ensure that we wait for this promise to resolve before continuing.\n                 *\n                 * The groups in which steps are reported can affect how we detect some\n                 * more complex determinism issues like parallel indexing. This promise\n                 * can represent middleware hooks being run early, in the middle of\n                 * ingesting steps to report.\n                 *\n                 * Because of this, it's important we wait for this middleware to resolve\n                 * before continuing to report steps to ensure that all steps have a\n                 * chance to be reported throughout this asynchronous action.\n                 */\n                .then(() => beforeExecHooksPromise)\n                .then(() => {\n                foundStepsReportPromise = undefined;\n                for (const [hashedId, step] of unhandledFoundStepsToReport) {\n                    if (step.handle()) {\n                        unhandledFoundStepsToReport.delete(hashedId);\n                        if (step.fulfilled) {\n                            foundStepsToReport.delete(step.id);\n                        }\n                    }\n                }\n                if (foundStepsToReport.size) {\n                    const steps = [...foundStepsToReport.values()];\n                    foundStepsToReport.clear();\n                    return void this.state.setCheckpoint({\n                        type: \"steps-found\",\n                        steps: steps,\n                    });\n                }\n            });\n        };\n        /**\n         * A helper used to push a step to the list of steps to report.\n         */\n        const pushStepToReport = (step) => {\n            foundStepsToReport.set(step.id, step);\n            unhandledFoundStepsToReport.set(step.hashedId, step);\n            reportNextTick();\n        };\n        const stepHandler = async ({ args, matchOp, opts, }) => {\n            var _a, _b, _c, _d;\n            await beforeExecHooksPromise;\n            const stepOptions = (0, InngestStepTools_js_1.getStepOptions)(args[0]);\n            const opId = matchOp(stepOptions, ...args.slice(1));\n            if (this.state.executingStep) {\n                /**\n                 * If a step is found after asynchronous actions during another step's\n                 * execution, everything is fine. The problem here is if we've found\n                 * that a step nested inside another a step, which is something we don't\n                 * support at the time of writing.\n                 *\n                 * In this case, we could use something like Async Hooks to understand\n                 * how the step is being triggered, though this isn't available in all\n                 * environments.\n                 *\n                 * Therefore, we'll only show a warning here to indicate that this is\n                 * potentially an issue.\n                 */\n                console.warn((0, errors_js_1.prettyError)({\n                    whatHappened: `We detected that you have nested \\`step.*\\` tooling in \\`${(_a = opId.displayName) !== null && _a !== void 0 ? _a : opId.id}\\``,\n                    consequences: \"Nesting `step.*` tooling is not supported.\",\n                    type: \"warn\",\n                    reassurance: \"It's possible to see this warning if steps are separated by regular asynchronous calls, which is fine.\",\n                    stack: true,\n                    toFixNow: \"Make sure you're not using `step.*` tooling inside of other `step.*` tooling. If you need to compose steps together, you can create a new async function and call it from within your step function, or use promise chaining.\",\n                    code: errors_js_1.ErrCode.NESTING_STEPS,\n                }));\n            }\n            if (this.state.steps.has(opId.id)) {\n                const originalId = opId.id;\n                const expectedNextIndex = (_b = expectedNextStepIndexes.get(originalId)) !== null && _b !== void 0 ? _b : 1;\n                for (let i = expectedNextIndex;; i++) {\n                    const newId = originalId + InngestStepTools_js_1.STEP_INDEXING_SUFFIX + i;\n                    if (!this.state.steps.has(newId)) {\n                        expectedNextStepIndexes.set(originalId, i + 1);\n                        opId.id = newId;\n                        break;\n                    }\n                }\n            }\n            const { promise, resolve, reject } = (0, promises_js_1.createDeferredPromise)();\n            const hashedId = exports._internals.hashId(opId.id);\n            const stepState = this.state.stepState[hashedId];\n            let isFulfilled = false;\n            if (stepState) {\n                stepState.seen = true;\n                this.state.remainingStepsToBeSeen.delete(hashedId);\n                if (typeof stepState.input === \"undefined\") {\n                    isFulfilled = true;\n                }\n            }\n            let extraOpts;\n            let fnArgs = [...args];\n            if (typeof (stepState === null || stepState === void 0 ? void 0 : stepState.input) !== \"undefined\" &&\n                Array.isArray(stepState.input)) {\n                switch (opId.op) {\n                    // `step.run()` has its function input affected\n                    case types_js_1.StepOpCode.StepPlanned: {\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        fnArgs = [...args.slice(0, 2), ...stepState.input];\n                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                        extraOpts = { input: [...stepState.input] };\n                        break;\n                    }\n                    // `step.ai.infer()` has its body affected\n                    case types_js_1.StepOpCode.AiGateway: {\n                        extraOpts = {\n                            body: Object.assign(Object.assign({}, (typeof ((_c = opId.opts) === null || _c === void 0 ? void 0 : _c.body) === \"object\"\n                                ? Object.assign({}, opId.opts.body) : {})), stepState.input[0]),\n                        };\n                        break;\n                    }\n                }\n            }\n            const step = Object.assign(Object.assign({}, opId), { opts: Object.assign(Object.assign({}, opId.opts), extraOpts), rawArgs: fnArgs, // TODO What is the right value here? Should this be raw args without affected input?\n                hashedId, input: stepState === null || stepState === void 0 ? void 0 : stepState.input, \n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                fn: (opts === null || opts === void 0 ? void 0 : opts.fn) ? () => { var _a; return (_a = opts.fn) === null || _a === void 0 ? void 0 : _a.call(opts, ...fnArgs); } : undefined, promise, fulfilled: isFulfilled, hasStepState: Boolean(stepState), displayName: (_d = opId.displayName) !== null && _d !== void 0 ? _d : opId.id, handled: false, handle: () => {\n                    if (step.handled) {\n                        return false;\n                    }\n                    step.handled = true;\n                    if (isFulfilled && stepState) {\n                        stepState.fulfilled = true;\n                        // For some execution scenarios such as testing, `data`, `error`,\n                        // and `input` may be `Promises`. This could also be the case for\n                        // future middleware applications. For this reason, we'll make sure\n                        // the values are fully resolved before continuing.\n                        void Promise.all([\n                            stepState.data,\n                            stepState.error,\n                            stepState.input,\n                        ]).then(() => {\n                            if (typeof stepState.data !== \"undefined\") {\n                                resolve(stepState.data);\n                            }\n                            else {\n                                this.state.recentlyRejectedStepError = new StepError_js_1.StepError(opId.id, stepState.error);\n                                reject(this.state.recentlyRejectedStepError);\n                            }\n                        });\n                    }\n                    return true;\n                } });\n            this.state.steps.set(opId.id, step);\n            this.state.hasSteps = true;\n            pushStepToReport(step);\n            /**\n             * If this is the last piece of state we had, we've now finished\n             * memoizing.\n             */\n            if (!beforeExecHooksPromise && this.state.allStateUsed()) {\n                await (beforeExecHooksPromise = (async () => {\n                    var _a, _b, _c, _d;\n                    await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n                    await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n                })());\n            }\n            return promise;\n        };\n        return (0, InngestStepTools_js_1.createStepTools)(this.options.client, this, stepHandler);\n    }\n    getUserFnToRun() {\n        if (!this.options.isFailureHandler) {\n            return this.options.fn[\"fn\"];\n        }\n        if (!this.options.fn[\"onFailureFn\"]) {\n            /**\n             * Somehow, we've ended up detecting that this is a failure handler but\n             * doesn't have an `onFailure` function. This should never happen.\n             */\n            throw new Error(\"Cannot find function `onFailure` handler\");\n        }\n        return this.options.fn[\"onFailureFn\"];\n    }\n    initializeTimer(state) {\n        if (!this.options.requestedRunStep) {\n            return;\n        }\n        this.timeout = (0, promises_js_1.createTimeoutPromise)(this.timeoutDuration);\n        void this.timeout.then(async () => {\n            var _a, _b, _c, _d, _e, _f;\n            await ((_b = (_a = this.state.hooks) === null || _a === void 0 ? void 0 : _a.afterMemoization) === null || _b === void 0 ? void 0 : _b.call(_a));\n            await ((_d = (_c = this.state.hooks) === null || _c === void 0 ? void 0 : _c.beforeExecution) === null || _d === void 0 ? void 0 : _d.call(_c));\n            await ((_f = (_e = this.state.hooks) === null || _e === void 0 ? void 0 : _e.afterExecution) === null || _f === void 0 ? void 0 : _f.call(_e));\n            state.setCheckpoint({\n                type: \"step-not-found\",\n                step: {\n                    id: this.options.requestedRunStep,\n                    op: types_js_1.StepOpCode.StepNotFound,\n                },\n            });\n        });\n    }\n    async initializeMiddleware() {\n        const ctx = this.options.data;\n        const hooks = await (0, InngestMiddleware_js_1.getHookStack)(this.options.fn[\"middleware\"], \"onFunctionRun\", {\n            ctx,\n            fn: this.options.fn,\n            steps: Object.values(this.options.stepState),\n            reqArgs: this.options.reqArgs,\n        }, {\n            transformInput: (prev, output) => {\n                return {\n                    ctx: Object.assign(Object.assign({}, prev.ctx), output === null || output === void 0 ? void 0 : output.ctx),\n                    fn: this.options.fn,\n                    steps: prev.steps.map((step, i) => {\n                        var _a;\n                        return (Object.assign(Object.assign({}, step), (_a = output === null || output === void 0 ? void 0 : output.steps) === null || _a === void 0 ? void 0 : _a[i]));\n                    }),\n                    reqArgs: prev.reqArgs,\n                };\n            },\n            transformOutput: (prev, output) => {\n                return {\n                    result: Object.assign(Object.assign({}, prev.result), output === null || output === void 0 ? void 0 : output.result),\n                    step: prev.step,\n                };\n            },\n        });\n        return hooks;\n    }\n}\nconst hashId = (id) => {\n    return (0, hash_js_1.sha1)().update(id).digest(\"hex\");\n};\nconst hashOp = (op) => {\n    return Object.assign(Object.assign({}, op), { id: hashId(op.id) });\n};\n/**\n * Exported for testing.\n */\nexports._internals = { hashOp, hashId };\n//# sourceMappingURL=v2.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/components/execution/v2.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/ServerTiming.js":
/*!******************************************************!*\
  !*** ./node_modules/inngest/helpers/ServerTiming.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerTiming = void 0;\nconst promises_js_1 = __webpack_require__(/*! ./promises.js */ \"(rsc)/./node_modules/inngest/helpers/promises.js\");\n/**\n * A class to manage timing functions and arbitrary periods of time before\n * generating a `Server-Timing` header for use in HTTP responses.\n *\n * This is a very simple implementation that does not support nested timings or\n * fractions of a millisecond.\n */\nclass ServerTiming {\n    constructor() {\n        this.timings = {};\n    }\n    /**\n     * Start a timing. Returns a function that, when called, will stop the timing\n     * and add it to the header.\n     */\n    start(name, description) {\n        if (!this.timings[name]) {\n            this.timings[name] = {\n                description: description !== null && description !== void 0 ? description : \"\",\n                timers: [],\n            };\n        }\n        const index = this.timings[name].timers.push({ start: Date.now() }) - 1;\n        return () => {\n            const target = this.timings[name];\n            if (!target) {\n                return console.warn(`Timing \"${name}\" does not exist`);\n            }\n            const timer = target.timers[index];\n            if (!timer) {\n                return console.warn(`Timer ${index} for timing \"${name}\" does not exist`);\n            }\n            timer.end = Date.now();\n        };\n    }\n    /**\n     * Add a piece of arbitrary, untimed information to the header. Common use\n     * cases would be cache misses.\n     *\n     * @example\n     * ```\n     * timer.append(\"cache\", \"miss\");\n     * ```\n     */\n    append(key, value) {\n        this.timings[key] = {\n            description: value,\n            timers: [],\n        };\n    }\n    /**\n     * Wrap a function in a timing. The timing will be stopped and added to the\n     * header when the function resolves or rejects.\n     *\n     * The return value of the function will be returned from this function.\n     */\n    async wrap(name, fn, description) {\n        const stop = this.start(name, description);\n        try {\n            return (await (0, promises_js_1.runAsPromise)(fn));\n        }\n        finally {\n            stop();\n        }\n    }\n    /**\n     * Generate the `Server-Timing` header.\n     */\n    getHeader() {\n        const entries = Object.entries(this.timings).reduce((acc, [name, { description, timers }]) => {\n            /**\n             * Ignore timers that had no end.\n             */\n            const hasTimersWithEnd = timers.some((timer) => timer.end);\n            if (!hasTimersWithEnd) {\n                return acc;\n            }\n            const dur = timers.reduce((acc, { start, end }) => {\n                if (!start || !end)\n                    return acc;\n                return acc + (end - start);\n            }, 0);\n            const entry = [\n                name,\n                description ? `desc=\"${description}\"` : \"\",\n                dur ? `dur=${dur}` : \"\",\n            ]\n                .filter(Boolean)\n                .join(\";\");\n            return [...acc, entry];\n        }, []);\n        return entries.join(\", \");\n    }\n}\nexports.ServerTiming = ServerTiming;\n//# sourceMappingURL=ServerTiming.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL1NlcnZlclRpbWluZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsc0JBQXNCLG1CQUFPLENBQUMsdUVBQWU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsbUJBQW1CO0FBQzFFO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxLQUFLO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxPQUFPLGNBQWMsS0FBSztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFLHFCQUFxQjtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxZQUFZO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsdUNBQXVDLFlBQVk7QUFDbkQsNkJBQTZCLElBQUk7QUFDakM7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9haGFycGVyL2lubmdlc3QvaW5uZ2VzdC1zYW5kYm94L3RzLW5leHQvbm9kZV9tb2R1bGVzL2lubmdlc3QvaGVscGVycy9TZXJ2ZXJUaW1pbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlcnZlclRpbWluZyA9IHZvaWQgMDtcbmNvbnN0IHByb21pc2VzX2pzXzEgPSByZXF1aXJlKFwiLi9wcm9taXNlcy5qc1wiKTtcbi8qKlxuICogQSBjbGFzcyB0byBtYW5hZ2UgdGltaW5nIGZ1bmN0aW9ucyBhbmQgYXJiaXRyYXJ5IHBlcmlvZHMgb2YgdGltZSBiZWZvcmVcbiAqIGdlbmVyYXRpbmcgYSBgU2VydmVyLVRpbWluZ2AgaGVhZGVyIGZvciB1c2UgaW4gSFRUUCByZXNwb25zZXMuXG4gKlxuICogVGhpcyBpcyBhIHZlcnkgc2ltcGxlIGltcGxlbWVudGF0aW9uIHRoYXQgZG9lcyBub3Qgc3VwcG9ydCBuZXN0ZWQgdGltaW5ncyBvclxuICogZnJhY3Rpb25zIG9mIGEgbWlsbGlzZWNvbmQuXG4gKi9cbmNsYXNzIFNlcnZlclRpbWluZyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudGltaW5ncyA9IHt9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydCBhIHRpbWluZy4gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLCB3aWxsIHN0b3AgdGhlIHRpbWluZ1xuICAgICAqIGFuZCBhZGQgaXQgdG8gdGhlIGhlYWRlci5cbiAgICAgKi9cbiAgICBzdGFydChuYW1lLCBkZXNjcmlwdGlvbikge1xuICAgICAgICBpZiAoIXRoaXMudGltaW5nc1tuYW1lXSkge1xuICAgICAgICAgICAgdGhpcy50aW1pbmdzW25hbWVdID0ge1xuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiAhPT0gbnVsbCAmJiBkZXNjcmlwdGlvbiAhPT0gdm9pZCAwID8gZGVzY3JpcHRpb24gOiBcIlwiLFxuICAgICAgICAgICAgICAgIHRpbWVyczogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy50aW1pbmdzW25hbWVdLnRpbWVycy5wdXNoKHsgc3RhcnQ6IERhdGUubm93KCkgfSkgLSAxO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy50aW1pbmdzW25hbWVdO1xuICAgICAgICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKGBUaW1pbmcgXCIke25hbWV9XCIgZG9lcyBub3QgZXhpc3RgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gdGFyZ2V0LnRpbWVyc1tpbmRleF07XG4gICAgICAgICAgICBpZiAoIXRpbWVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihgVGltZXIgJHtpbmRleH0gZm9yIHRpbWluZyBcIiR7bmFtZX1cIiBkb2VzIG5vdCBleGlzdGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGltZXIuZW5kID0gRGF0ZS5ub3coKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIGEgcGllY2Ugb2YgYXJiaXRyYXJ5LCB1bnRpbWVkIGluZm9ybWF0aW9uIHRvIHRoZSBoZWFkZXIuIENvbW1vbiB1c2VcbiAgICAgKiBjYXNlcyB3b3VsZCBiZSBjYWNoZSBtaXNzZXMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYFxuICAgICAqIHRpbWVyLmFwcGVuZChcImNhY2hlXCIsIFwibWlzc1wiKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBhcHBlbmQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLnRpbWluZ3Nba2V5XSA9IHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB2YWx1ZSxcbiAgICAgICAgICAgIHRpbWVyczogW10sXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyYXAgYSBmdW5jdGlvbiBpbiBhIHRpbWluZy4gVGhlIHRpbWluZyB3aWxsIGJlIHN0b3BwZWQgYW5kIGFkZGVkIHRvIHRoZVxuICAgICAqIGhlYWRlciB3aGVuIHRoZSBmdW5jdGlvbiByZXNvbHZlcyBvciByZWplY3RzLlxuICAgICAqXG4gICAgICogVGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gd2lsbCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgYXN5bmMgd3JhcChuYW1lLCBmbiwgZGVzY3JpcHRpb24pIHtcbiAgICAgICAgY29uc3Qgc3RvcCA9IHRoaXMuc3RhcnQobmFtZSwgZGVzY3JpcHRpb24pO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIChhd2FpdCAoMCwgcHJvbWlzZXNfanNfMS5ydW5Bc1Byb21pc2UpKGZuKSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBzdG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgdGhlIGBTZXJ2ZXItVGltaW5nYCBoZWFkZXIuXG4gICAgICovXG4gICAgZ2V0SGVhZGVyKCkge1xuICAgICAgICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXModGhpcy50aW1pbmdzKS5yZWR1Y2UoKGFjYywgW25hbWUsIHsgZGVzY3JpcHRpb24sIHRpbWVycyB9XSkgPT4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBJZ25vcmUgdGltZXJzIHRoYXQgaGFkIG5vIGVuZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgaGFzVGltZXJzV2l0aEVuZCA9IHRpbWVycy5zb21lKCh0aW1lcikgPT4gdGltZXIuZW5kKTtcbiAgICAgICAgICAgIGlmICghaGFzVGltZXJzV2l0aEVuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkdXIgPSB0aW1lcnMucmVkdWNlKChhY2MsIHsgc3RhcnQsIGVuZCB9KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFzdGFydCB8fCAhZW5kKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgICAgIHJldHVybiBhY2MgKyAoZW5kIC0gc3RhcnQpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IFtcbiAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uID8gYGRlc2M9XCIke2Rlc2NyaXB0aW9ufVwiYCA6IFwiXCIsXG4gICAgICAgICAgICAgICAgZHVyID8gYGR1cj0ke2R1cn1gIDogXCJcIixcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgICAgICAgICAgICAgLmpvaW4oXCI7XCIpO1xuICAgICAgICAgICAgcmV0dXJuIFsuLi5hY2MsIGVudHJ5XTtcbiAgICAgICAgfSwgW10pO1xuICAgICAgICByZXR1cm4gZW50cmllcy5qb2luKFwiLCBcIik7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJUaW1pbmcgPSBTZXJ2ZXJUaW1pbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXJ2ZXJUaW1pbmcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/ServerTiming.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/consts.js":
/*!************************************************!*\
  !*** ./node_modules/inngest/helpers/consts.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.syncKind = exports.serverKind = exports.dummyEventKey = exports.debugPrefix = exports.logPrefix = exports.internalEvents = exports.defaultDevServerHost = exports.defaultInngestEventBaseUrl = exports.defaultInngestApiBaseUrl = exports.headerKeys = exports.envKeys = exports.probe = exports.queryKeys = void 0;\nconst chalk_1 = __importDefault(__webpack_require__(/*! chalk */ \"(rsc)/./node_modules/chalk/source/index.js\"));\n/**\n * Keys for accessing query parameters included in requests from Inngest to run\n * functions.\n *\n * Used internally to create handlers using `InngestCommHandler`, but can be\n * imported to be used if creating a custom handler outside of the package.\n *\n * @public\n */\nvar queryKeys;\n(function (queryKeys) {\n    queryKeys[\"DeployId\"] = \"deployId\";\n    queryKeys[\"FnId\"] = \"fnId\";\n    queryKeys[\"Probe\"] = \"probe\";\n    queryKeys[\"StepId\"] = \"stepId\";\n})(queryKeys || (exports.queryKeys = queryKeys = {}));\nvar probe;\n(function (probe) {\n    probe[\"Trust\"] = \"trust\";\n})(probe || (exports.probe = probe = {}));\nvar envKeys;\n(function (envKeys) {\n    envKeys[\"InngestSigningKey\"] = \"INNGEST_SIGNING_KEY\";\n    envKeys[\"InngestSigningKeyFallback\"] = \"INNGEST_SIGNING_KEY_FALLBACK\";\n    envKeys[\"InngestEventKey\"] = \"INNGEST_EVENT_KEY\";\n    /**\n     * @deprecated Removed in v3. Use {@link InngestBaseUrl} instead.\n     */\n    envKeys[\"InngestDevServerUrl\"] = \"INNGEST_DEVSERVER_URL\";\n    envKeys[\"InngestEnvironment\"] = \"INNGEST_ENV\";\n    envKeys[\"InngestBaseUrl\"] = \"INNGEST_BASE_URL\";\n    envKeys[\"InngestEventApiBaseUrl\"] = \"INNGEST_EVENT_API_BASE_URL\";\n    envKeys[\"InngestApiBaseUrl\"] = \"INNGEST_API_BASE_URL\";\n    envKeys[\"InngestServeHost\"] = \"INNGEST_SERVE_HOST\";\n    envKeys[\"InngestServePath\"] = \"INNGEST_SERVE_PATH\";\n    envKeys[\"InngestLogLevel\"] = \"INNGEST_LOG_LEVEL\";\n    envKeys[\"InngestStreaming\"] = \"INNGEST_STREAMING\";\n    envKeys[\"InngestDevMode\"] = \"INNGEST_DEV\";\n    envKeys[\"InngestAllowInBandSync\"] = \"INNGEST_ALLOW_IN_BAND_SYNC\";\n    /**\n     * @deprecated It's unknown what this env var was used for, but we do not\n     * provide explicit support for it. Prefer using `INNGEST_ENV` instead.\n     */\n    envKeys[\"BranchName\"] = \"BRANCH_NAME\";\n    /**\n     * The git branch of the commit the deployment was triggered by. Example:\n     * `improve-about-page`.\n     *\n     * {@link https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables}\n     */\n    envKeys[\"VercelBranch\"] = \"VERCEL_GIT_COMMIT_REF\";\n    /**\n     * Expected to be `\"1\"` if defined.\n     */\n    envKeys[\"IsVercel\"] = \"VERCEL\";\n    /**\n     * The branch name of the current deployment. May only be accessible at build\n     * time, but included here just in case.\n     *\n     * {@link https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables}\n     */\n    envKeys[\"CloudflarePagesBranch\"] = \"CF_PAGES_BRANCH\";\n    /**\n     * Expected to be `\"1\"` if defined.\n     */\n    envKeys[\"IsCloudflarePages\"] = \"CF_PAGES\";\n    /**\n     * The branch name of the deployment from Git to Netlify, if available.\n     *\n     * {@link https://docs.netlify.com/configure-builds/environment-variables/#git-metadata}\n     */\n    envKeys[\"NetlifyBranch\"] = \"BRANCH\";\n    /**\n     * Expected to be `\"true\"` if defined.\n     */\n    envKeys[\"IsNetlify\"] = \"NETLIFY\";\n    /**\n     * The Git branch for a service or deploy.\n     *\n     * {@link https://render.com/docs/environment-variables#all-services}\n     */\n    envKeys[\"RenderBranch\"] = \"RENDER_GIT_BRANCH\";\n    /**\n     * Expected to be `\"true\"` if defined.\n     */\n    envKeys[\"IsRender\"] = \"RENDER\";\n    /**\n     * The branch that triggered the deployment. Example: `main`\n     *\n     * {@link https://docs.railway.app/develop/variables#railway-provided-variables}\n     */\n    envKeys[\"RailwayBranch\"] = \"RAILWAY_GIT_BRANCH\";\n    /**\n     * The railway environment for the deployment. Example: `production`\n     *\n     * {@link https://docs.railway.app/develop/variables#railway-provided-variables}\n     */\n    envKeys[\"RailwayEnvironment\"] = \"RAILWAY_ENVIRONMENT\";\n    envKeys[\"VercelEnvKey\"] = \"VERCEL_ENV\";\n    envKeys[\"OpenAiApiKey\"] = \"OPENAI_API_KEY\";\n    envKeys[\"GeminiApiKey\"] = \"GEMINI_API_KEY\";\n    envKeys[\"AnthropicApiKey\"] = \"ANTHROPIC_API_KEY\";\n})(envKeys || (exports.envKeys = envKeys = {}));\n/**\n * Keys for accessing headers included in requests from Inngest to run\n * functions.\n *\n * Used internally to create handlers using `InngestCommHandler`, but can be\n * imported to be used if creating a custom handler outside of the package.\n *\n * @public\n */\nvar headerKeys;\n(function (headerKeys) {\n    headerKeys[\"ContentLength\"] = \"content-length\";\n    headerKeys[\"Signature\"] = \"x-inngest-signature\";\n    headerKeys[\"SdkVersion\"] = \"x-inngest-sdk\";\n    headerKeys[\"Environment\"] = \"x-inngest-env\";\n    headerKeys[\"Platform\"] = \"x-inngest-platform\";\n    headerKeys[\"Framework\"] = \"x-inngest-framework\";\n    headerKeys[\"NoRetry\"] = \"x-inngest-no-retry\";\n    headerKeys[\"RequestVersion\"] = \"x-inngest-req-version\";\n    headerKeys[\"RetryAfter\"] = \"retry-after\";\n    headerKeys[\"InngestServerKind\"] = \"x-inngest-server-kind\";\n    headerKeys[\"InngestExpectedServerKind\"] = \"x-inngest-expected-server-kind\";\n    headerKeys[\"InngestSyncKind\"] = \"x-inngest-sync-kind\";\n    headerKeys[\"EventIdSeed\"] = \"x-inngest-event-id-seed\";\n    headerKeys[\"TraceParent\"] = \"traceparent\";\n    headerKeys[\"TraceState\"] = \"tracestate\";\n})(headerKeys || (exports.headerKeys = headerKeys = {}));\nexports.defaultInngestApiBaseUrl = \"https://api.inngest.com/\";\nexports.defaultInngestEventBaseUrl = \"https://inn.gs/\";\nexports.defaultDevServerHost = \"http://localhost:8288/\";\n/**\n * Events that Inngest may send internally that can be used to trigger\n * functions.\n *\n * @public\n */\nvar internalEvents;\n(function (internalEvents) {\n    /**\n     * A function has failed after exhausting all available retries. This event\n     * will contain the original event and the error that caused the failure.\n     */\n    internalEvents[\"FunctionFailed\"] = \"inngest/function.failed\";\n    internalEvents[\"FunctionInvoked\"] = \"inngest/function.invoked\";\n    internalEvents[\"FunctionFinished\"] = \"inngest/function.finished\";\n    internalEvents[\"FunctionCancelled\"] = \"inngest/function.cancelled\";\n    internalEvents[\"ScheduledTimer\"] = \"inngest/scheduled.timer\";\n})(internalEvents || (exports.internalEvents = internalEvents = {}));\nexports.logPrefix = chalk_1.default.magenta.bold(\"[Inngest]\");\nexports.debugPrefix = \"inngest\";\nexports.dummyEventKey = \"NO_EVENT_KEY_SET\";\nvar serverKind;\n(function (serverKind) {\n    serverKind[\"Dev\"] = \"dev\";\n    serverKind[\"Cloud\"] = \"cloud\";\n})(serverKind || (exports.serverKind = serverKind = {}));\nvar syncKind;\n(function (syncKind) {\n    syncKind[\"InBand\"] = \"in_band\";\n    syncKind[\"OutOfBand\"] = \"out_of_band\";\n})(syncKind || (exports.syncKind = syncKind = {}));\n//# sourceMappingURL=consts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/consts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/crypto.js":
/*!************************************************!*\
  !*** ./node_modules/inngest/helpers/crypto.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createEntropy = createEntropy;\n/**\n * Create a cryptographically secure random value.\n *\n * @throws {Error} If the crypto module is not available.\n */\nfunction createEntropy(byteLength) {\n    const bytes = new Uint8Array(byteLength);\n    // https://developer.mozilla.org/en-US/docs/Web/API/Crypto#browser_compatibility\n    const { crypto } = globalThis;\n    if (!crypto) {\n        // This should only happen in Node <19.\n        throw new Error(\"missing crypto module\");\n    }\n    if (!crypto.getRandomValues) {\n        throw new Error(\"missing crypto.getRandomValues\");\n    }\n    crypto.getRandomValues(bytes);\n    return bytes;\n}\n//# sourceMappingURL=crypto.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2NyeXB0by5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9haGFycGVyL2lubmdlc3QvaW5uZ2VzdC1zYW5kYm94L3RzLW5leHQvbm9kZV9tb2R1bGVzL2lubmdlc3QvaGVscGVycy9jcnlwdG8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUVudHJvcHkgPSBjcmVhdGVFbnRyb3B5O1xuLyoqXG4gKiBDcmVhdGUgYSBjcnlwdG9ncmFwaGljYWxseSBzZWN1cmUgcmFuZG9tIHZhbHVlLlxuICpcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgY3J5cHRvIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVFbnRyb3B5KGJ5dGVMZW5ndGgpIHtcbiAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ5dGVMZW5ndGgpO1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DcnlwdG8jYnJvd3Nlcl9jb21wYXRpYmlsaXR5XG4gICAgY29uc3QgeyBjcnlwdG8gfSA9IGdsb2JhbFRoaXM7XG4gICAgaWYgKCFjcnlwdG8pIHtcbiAgICAgICAgLy8gVGhpcyBzaG91bGQgb25seSBoYXBwZW4gaW4gTm9kZSA8MTkuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgY3J5cHRvIG1vZHVsZVwiKTtcbiAgICB9XG4gICAgaWYgKCFjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgY3J5cHRvLmdldFJhbmRvbVZhbHVlc1wiKTtcbiAgICB9XG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlcyk7XG4gICAgcmV0dXJuIGJ5dGVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3J5cHRvLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/crypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/devserver.js":
/*!***************************************************!*\
  !*** ./node_modules/inngest/helpers/devserver.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.devServerHost = exports.devServerUrl = exports.devServerAvailable = void 0;\nconst consts_js_1 = __webpack_require__(/*! ./consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst env_js_1 = __webpack_require__(/*! ./env.js */ \"(rsc)/./node_modules/inngest/helpers/env.js\");\n/**\n * Attempts to contact the dev server, returning a boolean indicating whether or\n * not it was successful.\n *\n * @example devServerUrl(process.env[envKeys.DevServerUrl], \"/your-path\")\n */\nconst devServerAvailable = async (\n/**\n * The host of the dev server. You should pass in an environment variable as\n * this parameter.\n */\nhost = consts_js_1.defaultDevServerHost, \n/**\n * The fetch implementation to use to communicate with the dev server.\n */\nfetch) => {\n    try {\n        const url = (0, exports.devServerUrl)(host, \"/dev\");\n        const result = await fetch(url.toString());\n        await result.json();\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\nexports.devServerAvailable = devServerAvailable;\n/**\n * devServerUrl returns a full URL for the given path name.\n *\n * Because Cloudflare/V8 platforms don't allow process.env, you are expected\n * to pass in the host from the dev server env key:\n *\n * @example devServerUrl(processEnv(envKeys.DevServerUrl), \"/your-path\")\n * @example devServerUrl(\"http://localhost:8288/\", \"/your-path\")\n */\nconst devServerUrl = (host = (0, exports.devServerHost)(), pathname = \"\") => {\n    return new URL(pathname, host.includes(\"://\") ? host : `http://${host}`);\n};\nexports.devServerUrl = devServerUrl;\n/**\n * devServerHost exports the development server's domain by inspecting env\n * variables, or returns the default development server URL.\n *\n * This guarantees a specific URL as a string, as opposed to the env export\n * which only returns a value of the env var is set.\n */\nconst devServerHost = () => (0, env_js_1.devServerHost)() || consts_js_1.defaultDevServerHost;\nexports.devServerHost = devServerHost;\n//# sourceMappingURL=devserver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2RldnNlcnZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUIsR0FBRyxvQkFBb0IsR0FBRywwQkFBMEI7QUFDekUsb0JBQW9CLG1CQUFPLENBQUMsbUVBQWE7QUFDekMsaUJBQWlCLG1CQUFPLENBQUMsNkRBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxLQUFLO0FBQzFFO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9haGFycGVyL2lubmdlc3QvaW5uZ2VzdC1zYW5kYm94L3RzLW5leHQvbm9kZV9tb2R1bGVzL2lubmdlc3QvaGVscGVycy9kZXZzZXJ2ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRldlNlcnZlckhvc3QgPSBleHBvcnRzLmRldlNlcnZlclVybCA9IGV4cG9ydHMuZGV2U2VydmVyQXZhaWxhYmxlID0gdm9pZCAwO1xuY29uc3QgY29uc3RzX2pzXzEgPSByZXF1aXJlKFwiLi9jb25zdHMuanNcIik7XG5jb25zdCBlbnZfanNfMSA9IHJlcXVpcmUoXCIuL2Vudi5qc1wiKTtcbi8qKlxuICogQXR0ZW1wdHMgdG8gY29udGFjdCB0aGUgZGV2IHNlcnZlciwgcmV0dXJuaW5nIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgb3JcbiAqIG5vdCBpdCB3YXMgc3VjY2Vzc2Z1bC5cbiAqXG4gKiBAZXhhbXBsZSBkZXZTZXJ2ZXJVcmwocHJvY2Vzcy5lbnZbZW52S2V5cy5EZXZTZXJ2ZXJVcmxdLCBcIi95b3VyLXBhdGhcIilcbiAqL1xuY29uc3QgZGV2U2VydmVyQXZhaWxhYmxlID0gYXN5bmMgKFxuLyoqXG4gKiBUaGUgaG9zdCBvZiB0aGUgZGV2IHNlcnZlci4gWW91IHNob3VsZCBwYXNzIGluIGFuIGVudmlyb25tZW50IHZhcmlhYmxlIGFzXG4gKiB0aGlzIHBhcmFtZXRlci5cbiAqL1xuaG9zdCA9IGNvbnN0c19qc18xLmRlZmF1bHREZXZTZXJ2ZXJIb3N0LCBcbi8qKlxuICogVGhlIGZldGNoIGltcGxlbWVudGF0aW9uIHRvIHVzZSB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBkZXYgc2VydmVyLlxuICovXG5mZXRjaCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVybCA9ICgwLCBleHBvcnRzLmRldlNlcnZlclVybCkoaG9zdCwgXCIvZGV2XCIpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaCh1cmwudG9TdHJpbmcoKSk7XG4gICAgICAgIGF3YWl0IHJlc3VsdC5qc29uKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcbmV4cG9ydHMuZGV2U2VydmVyQXZhaWxhYmxlID0gZGV2U2VydmVyQXZhaWxhYmxlO1xuLyoqXG4gKiBkZXZTZXJ2ZXJVcmwgcmV0dXJucyBhIGZ1bGwgVVJMIGZvciB0aGUgZ2l2ZW4gcGF0aCBuYW1lLlxuICpcbiAqIEJlY2F1c2UgQ2xvdWRmbGFyZS9WOCBwbGF0Zm9ybXMgZG9uJ3QgYWxsb3cgcHJvY2Vzcy5lbnYsIHlvdSBhcmUgZXhwZWN0ZWRcbiAqIHRvIHBhc3MgaW4gdGhlIGhvc3QgZnJvbSB0aGUgZGV2IHNlcnZlciBlbnYga2V5OlxuICpcbiAqIEBleGFtcGxlIGRldlNlcnZlclVybChwcm9jZXNzRW52KGVudktleXMuRGV2U2VydmVyVXJsKSwgXCIveW91ci1wYXRoXCIpXG4gKiBAZXhhbXBsZSBkZXZTZXJ2ZXJVcmwoXCJodHRwOi8vbG9jYWxob3N0OjgyODgvXCIsIFwiL3lvdXItcGF0aFwiKVxuICovXG5jb25zdCBkZXZTZXJ2ZXJVcmwgPSAoaG9zdCA9ICgwLCBleHBvcnRzLmRldlNlcnZlckhvc3QpKCksIHBhdGhuYW1lID0gXCJcIikgPT4ge1xuICAgIHJldHVybiBuZXcgVVJMKHBhdGhuYW1lLCBob3N0LmluY2x1ZGVzKFwiOi8vXCIpID8gaG9zdCA6IGBodHRwOi8vJHtob3N0fWApO1xufTtcbmV4cG9ydHMuZGV2U2VydmVyVXJsID0gZGV2U2VydmVyVXJsO1xuLyoqXG4gKiBkZXZTZXJ2ZXJIb3N0IGV4cG9ydHMgdGhlIGRldmVsb3BtZW50IHNlcnZlcidzIGRvbWFpbiBieSBpbnNwZWN0aW5nIGVudlxuICogdmFyaWFibGVzLCBvciByZXR1cm5zIHRoZSBkZWZhdWx0IGRldmVsb3BtZW50IHNlcnZlciBVUkwuXG4gKlxuICogVGhpcyBndWFyYW50ZWVzIGEgc3BlY2lmaWMgVVJMIGFzIGEgc3RyaW5nLCBhcyBvcHBvc2VkIHRvIHRoZSBlbnYgZXhwb3J0XG4gKiB3aGljaCBvbmx5IHJldHVybnMgYSB2YWx1ZSBvZiB0aGUgZW52IHZhciBpcyBzZXQuXG4gKi9cbmNvbnN0IGRldlNlcnZlckhvc3QgPSAoKSA9PiAoMCwgZW52X2pzXzEuZGV2U2VydmVySG9zdCkoKSB8fCBjb25zdHNfanNfMS5kZWZhdWx0RGV2U2VydmVySG9zdDtcbmV4cG9ydHMuZGV2U2VydmVySG9zdCA9IGRldlNlcnZlckhvc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXZzZXJ2ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/devserver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/enum.js":
/*!**********************************************!*\
  !*** ./node_modules/inngest/helpers/enum.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.enumFromValue = void 0;\n/**\n * Returns the value of an enum from a string value.\n *\n * If the value given is not a value from the enum, `undefined` is returned.\n */\nconst enumFromValue = (enumType, value) => {\n    if (Object.values(enumType).includes(value)) {\n        return value;\n    }\n};\nexports.enumFromValue = enumFromValue;\n//# sourceMappingURL=enum.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL2VudW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyIvVXNlcnMvYWhhcnBlci9pbm5nZXN0L2lubmdlc3Qtc2FuZGJveC90cy1uZXh0L25vZGVfbW9kdWxlcy9pbm5nZXN0L2hlbHBlcnMvZW51bS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZW51bUZyb21WYWx1ZSA9IHZvaWQgMDtcbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgYW4gZW51bSBmcm9tIGEgc3RyaW5nIHZhbHVlLlxuICpcbiAqIElmIHRoZSB2YWx1ZSBnaXZlbiBpcyBub3QgYSB2YWx1ZSBmcm9tIHRoZSBlbnVtLCBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAqL1xuY29uc3QgZW51bUZyb21WYWx1ZSA9IChlbnVtVHlwZSwgdmFsdWUpID0+IHtcbiAgICBpZiAoT2JqZWN0LnZhbHVlcyhlbnVtVHlwZSkuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59O1xuZXhwb3J0cy5lbnVtRnJvbVZhbHVlID0gZW51bUZyb21WYWx1ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudW0uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/enum.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/env.js":
/*!*********************************************!*\
  !*** ./node_modules/inngest/helpers/env.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// This file exists to help normalize process.env amongst the backend\n// and frontend.  Many frontends (eg. Next, CRA) utilize webpack's DefinePlugin\n// along with prefixes, meaning we have to explicitly use the full `process.env.FOO`\n// string in order to read variables.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseAsBoolean = exports.getResponse = exports.getFetch = exports.platformSupportsStreaming = exports.getPlatformName = exports.inngestHeaders = exports.allProcessEnv = exports.processEnv = exports.getEnvironmentName = exports.getMode = exports.Mode = exports.devServerHost = void 0;\nconst version_js_1 = __webpack_require__(/*! ../version.js */ \"(rsc)/./node_modules/inngest/version.js\");\nconst consts_js_1 = __webpack_require__(/*! ./consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nconst strings_js_1 = __webpack_require__(/*! ./strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\n/**\n * devServerHost returns the dev server host by searching for the INNGEST_DEVSERVER_URL\n * environment variable (plus project prefixces for eg. react, such as REACT_APP_INNGEST_DEVSERVER_URL).\n *\n * If not found this returns undefined, indicating that the env var has not been set.\n *\n * @example devServerHost()\n */\nconst devServerHost = (env = (0, exports.allProcessEnv)()) => {\n    // devServerKeys are the env keys we search for to discover the dev server\n    // URL.  This includes the standard key first, then includes prefixed keys\n    // for use within common frameworks (eg. CRA, next).\n    //\n    // We have to fully write these using process.env as they're typically\n    // processed using webpack's DefinePlugin, which is dumb and does a straight\n    // text replacement instead of actually understanding the AST, despite webpack\n    // being fully capable of understanding the AST.\n    const prefixes = [\"REACT_APP_\", \"NEXT_PUBLIC_\"];\n    const keys = [consts_js_1.envKeys.InngestBaseUrl, consts_js_1.envKeys.InngestDevMode];\n    const values = keys.flatMap((key) => {\n        return prefixes.map((prefix) => {\n            return env[prefix + key];\n        });\n    });\n    return values.find((v) => {\n        if (!v) {\n            return;\n        }\n        try {\n            return Boolean(new URL(v));\n        }\n        catch (_a) {\n            // no-op\n        }\n    });\n};\nexports.devServerHost = devServerHost;\nconst checkFns = ((checks) => checks)({\n    equals: (actual, expected) => actual === expected,\n    \"starts with\": (actual, expected) => { var _a; return expected ? (_a = actual === null || actual === void 0 ? void 0 : actual.startsWith(expected)) !== null && _a !== void 0 ? _a : false : false; },\n    \"is truthy\": (actual) => Boolean(actual),\n    \"is truthy but not\": (actual, expected) => Boolean(actual) && actual !== expected,\n});\nconst prodChecks = [\n    [\"CF_PAGES\", \"equals\", \"1\"],\n    [\"CONTEXT\", \"starts with\", \"prod\"],\n    [\"ENVIRONMENT\", \"starts with\", \"prod\"],\n    [\"NODE_ENV\", \"starts with\", \"prod\"],\n    [\"VERCEL_ENV\", \"starts with\", \"prod\"],\n    [\"DENO_DEPLOYMENT_ID\", \"is truthy\"],\n    [consts_js_1.envKeys.VercelEnvKey, \"is truthy but not\", \"development\"],\n    [consts_js_1.envKeys.IsNetlify, \"is truthy\"],\n    [consts_js_1.envKeys.IsRender, \"is truthy\"],\n    [consts_js_1.envKeys.RailwayBranch, \"is truthy\"],\n    [consts_js_1.envKeys.IsCloudflarePages, \"is truthy\"],\n];\nclass Mode {\n    constructor({ type, isExplicit, explicitDevUrl, env = (0, exports.allProcessEnv)(), }) {\n        this.env = env;\n        this.type = type;\n        this.isExplicit = isExplicit || Boolean(explicitDevUrl);\n        this.explicitDevUrl = explicitDevUrl;\n    }\n    get isDev() {\n        return this.type === \"dev\";\n    }\n    get isCloud() {\n        return this.type === \"cloud\";\n    }\n    get isInferred() {\n        return !this.isExplicit;\n    }\n    /**\n     * If we are explicitly in a particular mode, retrieve the URL that we are\n     * sure we should be using, not considering any environment variables or other\n     * influences.\n     */\n    getExplicitUrl(defaultCloudUrl) {\n        if (!this.isExplicit) {\n            return undefined;\n        }\n        if (this.explicitDevUrl) {\n            return this.explicitDevUrl.href;\n        }\n        if (this.isCloud) {\n            return defaultCloudUrl;\n        }\n        if (this.isDev) {\n            return consts_js_1.defaultDevServerHost;\n        }\n        return undefined;\n    }\n}\nexports.Mode = Mode;\n/**\n * Returns the mode of the current environment, based off of either passed\n * environment variables or `process.env`, or explicit settings.\n */\nconst getMode = ({ env = (0, exports.allProcessEnv)(), client, explicitMode, } = {}) => {\n    if (explicitMode) {\n        return new Mode({ type: explicitMode, isExplicit: true, env });\n    }\n    if (client === null || client === void 0 ? void 0 : client[\"mode\"].isExplicit) {\n        return client[\"mode\"];\n    }\n    if (consts_js_1.envKeys.InngestDevMode in env) {\n        if (typeof env[consts_js_1.envKeys.InngestDevMode] === \"string\") {\n            try {\n                const explicitDevUrl = new URL(env[consts_js_1.envKeys.InngestDevMode]);\n                return new Mode({ type: \"dev\", isExplicit: true, explicitDevUrl, env });\n            }\n            catch (_a) {\n                // no-op\n            }\n        }\n        const envIsDev = (0, exports.parseAsBoolean)(env[consts_js_1.envKeys.InngestDevMode]);\n        if (typeof envIsDev === \"boolean\") {\n            return new Mode({\n                type: envIsDev ? \"dev\" : \"cloud\",\n                isExplicit: true,\n                env,\n            });\n        }\n    }\n    const isProd = prodChecks.some(([key, checkKey, expected]) => {\n        return checkFns[checkKey]((0, strings_js_1.stringifyUnknown)(env[key]), expected);\n    });\n    return new Mode({ type: isProd ? \"cloud\" : \"dev\", isExplicit: false, env });\n};\nexports.getMode = getMode;\n/**\n * getEnvironmentName returns the suspected branch name for this environment by\n * searching through a set of common environment variables.\n *\n * This could be used to determine if we're on a branch deploy or not, though it\n * should be noted that we don't know if this is the default branch or not.\n */\nconst getEnvironmentName = (env = (0, exports.allProcessEnv)()) => {\n    /**\n     * Order is important; more than one of these env vars may be set, so ensure\n     * that we check the most specific, most reliable env vars first.\n     */\n    return (env[consts_js_1.envKeys.InngestEnvironment] ||\n        env[consts_js_1.envKeys.BranchName] ||\n        env[consts_js_1.envKeys.VercelBranch] ||\n        env[consts_js_1.envKeys.NetlifyBranch] ||\n        env[consts_js_1.envKeys.CloudflarePagesBranch] ||\n        env[consts_js_1.envKeys.RenderBranch] ||\n        env[consts_js_1.envKeys.RailwayBranch]);\n};\nexports.getEnvironmentName = getEnvironmentName;\nconst processEnv = (key) => {\n    return (0, exports.allProcessEnv)()[key];\n};\nexports.processEnv = processEnv;\n/**\n * allProcessEnv returns the current process environment variables, or an empty\n * object if they cannot be read, making sure we support environments other than\n * Node such as Deno, too.\n *\n * Using this ensures we don't dangerously access `process.env` in environments\n * where it may not be defined, such as Deno or the browser.\n */\nconst allProcessEnv = () => {\n    // Node, or Node-like environments\n    try {\n        // eslint-disable-next-line @inngest/internal/process-warn\n        if (process.env) {\n            // eslint-disable-next-line @inngest/internal/process-warn\n            return process.env;\n        }\n    }\n    catch (_err) {\n        // noop\n    }\n    // Deno\n    try {\n        const env = Deno.env.toObject();\n        if (env) {\n            return env;\n        }\n    }\n    catch (_err) {\n        // noop\n    }\n    // Netlify\n    try {\n        const env = Netlify.env.toObject();\n        if (env) {\n            return env;\n        }\n    }\n    catch (_err) {\n        // noop\n    }\n    return {};\n};\nexports.allProcessEnv = allProcessEnv;\n/**\n * Generate a standardised set of headers based on input and environment\n * variables.\n *\n *\n */\nconst inngestHeaders = (opts) => {\n    var _a;\n    const sdkVersion = `inngest-js:v${version_js_1.version}`;\n    const headers = {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": sdkVersion,\n        [consts_js_1.headerKeys.SdkVersion]: sdkVersion,\n    };\n    if (opts === null || opts === void 0 ? void 0 : opts.framework) {\n        headers[consts_js_1.headerKeys.Framework] = opts.framework;\n    }\n    if (opts === null || opts === void 0 ? void 0 : opts.expectedServerKind) {\n        headers[consts_js_1.headerKeys.InngestExpectedServerKind] = opts.expectedServerKind;\n    }\n    const env = Object.assign(Object.assign({}, (0, exports.allProcessEnv)()), opts === null || opts === void 0 ? void 0 : opts.env);\n    const inngestEnv = (opts === null || opts === void 0 ? void 0 : opts.inngestEnv) || (0, exports.getEnvironmentName)(env);\n    if (inngestEnv) {\n        headers[consts_js_1.headerKeys.Environment] = inngestEnv;\n    }\n    const platform = (0, exports.getPlatformName)(env);\n    if (platform) {\n        headers[consts_js_1.headerKeys.Platform] = platform;\n    }\n    return Object.assign(Object.assign(Object.assign({}, headers), (_a = opts === null || opts === void 0 ? void 0 : opts.client) === null || _a === void 0 ? void 0 : _a[\"headers\"]), opts === null || opts === void 0 ? void 0 : opts.extras);\n};\nexports.inngestHeaders = inngestHeaders;\n/**\n * A set of checks that, given an environment, will return `true` if the current\n * environment is running on the platform with the given name.\n */\nconst platformChecks = {\n    /**\n     * Vercel Edge Functions don't have access to environment variables unless\n     * they are explicitly referenced in the top level code, but they do have a\n     * global `EdgeRuntime` variable set that we can use to detect this.\n     */\n    vercel: (env) => env[consts_js_1.envKeys.IsVercel] === \"1\" || typeof EdgeRuntime === \"string\",\n    netlify: (env) => env[consts_js_1.envKeys.IsNetlify] === \"true\",\n    \"cloudflare-pages\": (env) => env[consts_js_1.envKeys.IsCloudflarePages] === \"1\",\n    render: (env) => env[consts_js_1.envKeys.IsRender] === \"true\",\n    railway: (env) => Boolean(env[consts_js_1.envKeys.RailwayEnvironment]),\n};\n/**\n * A set of checks that, given an environment, will return `true` if the current\n * environment and platform supports streaming responses back to Inngest.\n *\n * Streaming capability is both framework and platform-based. Frameworks are\n * supported in serve handlers, and platforms are checked here.\n *\n * As such, this record declares which platforms we explicitly support for\n * streaming and is used by {@link platformSupportsStreaming}.\n */\nconst streamingChecks = {\n    /**\n     * \"Vercel supports streaming for Serverless Functions, Edge Functions, and\n     * React Server Components in Next.js projects.\"\n     *\n     * In practice, however, there are many reports of streaming not working as\n     * expected on Serverless Functions, so we resort to only allowing streaming\n     * for Edge Functions here.\n     *\n     * See {@link https://vercel.com/docs/frameworks/nextjs#streaming}\n     */\n    vercel: (_framework, _env) => typeof EdgeRuntime === \"string\",\n    \"cloudflare-pages\": () => true,\n};\nconst getPlatformName = (env) => {\n    return Object.keys(platformChecks).find((key) => {\n        return platformChecks[key](env);\n    });\n};\nexports.getPlatformName = getPlatformName;\n/**\n * Returns `true` if we believe the current environment supports streaming\n * responses back to Inngest.\n *\n * We run a check directly related to the platform we believe we're running on,\n * usually based on environment variables.\n */\nconst platformSupportsStreaming = (framework, env = (0, exports.allProcessEnv)()) => {\n    var _a, _b;\n    return ((_b = (_a = streamingChecks[(0, exports.getPlatformName)(env)]) === null || _a === void 0 ? void 0 : _a.call(streamingChecks, framework, env)) !== null && _b !== void 0 ? _b : false);\n};\nexports.platformSupportsStreaming = platformSupportsStreaming;\n/**\n * A unique symbol used to mark a custom fetch implementation. We wrap the\n * implementations to provide some extra control when handling errors.\n */\nconst CUSTOM_FETCH_MARKER = Symbol(\"Custom fetch implementation\");\n/**\n * Given a potential fetch function, return the fetch function to use based on\n * this and the environment.\n */\nconst getFetch = (givenFetch) => {\n    /**\n     * If we've explicitly been given a fetch function, use that.\n     */\n    if (givenFetch) {\n        if (CUSTOM_FETCH_MARKER in givenFetch) {\n            return givenFetch;\n        }\n        /**\n         * We wrap the given fetch function to provide some extra control when\n         * handling errors.\n         */\n        const customFetch = async (...args) => {\n            var _a;\n            try {\n                return await givenFetch(...args);\n            }\n            catch (err) {\n                /**\n                 * Capture warnings that are not simple fetch failures and highlight\n                 * them for the user.\n                 *\n                 * We also use this opportunity to log the causing error, as code higher\n                 * up the stack will likely abstract this.\n                 */\n                if (!(err instanceof Error) ||\n                    !((_a = err.message) === null || _a === void 0 ? void 0 : _a.startsWith(\"fetch failed\"))) {\n                    console.warn(\"A request failed when using a custom fetch implementation; this may be a misconfiguration. Make sure that your fetch client is correctly bound to the global scope.\");\n                    console.error(err);\n                }\n                throw err;\n            }\n        };\n        /**\n         * Mark the custom fetch implementation so that we can identify it later, in\n         * addition to adding some runtime properties to it to make it seem as much\n         * like the original fetch as possible.\n         */\n        Object.defineProperties(customFetch, {\n            [CUSTOM_FETCH_MARKER]: {},\n            name: { value: givenFetch.name },\n            length: { value: givenFetch.length },\n        });\n        return customFetch;\n    }\n    /**\n     * Browser or Node 18+\n     */\n    try {\n        if (typeof globalThis !== \"undefined\" && \"fetch\" in globalThis) {\n            return fetch.bind(globalThis);\n        }\n    }\n    catch (err) {\n        // no-op\n    }\n    /**\n     * Existing polyfilled fetch\n     */\n    if (typeof fetch !== \"undefined\") {\n        return fetch;\n    }\n    /**\n     * Environments where fetch cannot be found and must be polyfilled\n     */\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    return __webpack_require__(/*! cross-fetch */ \"(rsc)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n};\nexports.getFetch = getFetch;\n/**\n * If `Response` isn't included in this environment, it's probably an earlier\n * Node env that isn't already polyfilling. This function returns either the\n * native `Response` or a polyfilled one.\n */\nconst getResponse = () => {\n    if (typeof Response !== \"undefined\") {\n        return Response;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-var-requires\n    return (__webpack_require__(/*! cross-fetch */ \"(rsc)/./node_modules/cross-fetch/dist/node-ponyfill.js\").Response);\n};\nexports.getResponse = getResponse;\n/**\n * Given an unknown value, try to parse it as a `boolean`. Useful for parsing\n * environment variables that could be a selection of different values such as\n * `\"true\"`, `\"1\"`.\n *\n * If the value could not be confidently parsed as a `boolean` or was seen to be\n * `undefined`, this function returns `undefined`.\n */\nconst parseAsBoolean = (value) => {\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    if (typeof value === \"number\") {\n        return Boolean(value);\n    }\n    if (typeof value === \"string\") {\n        const trimmed = value.trim().toLowerCase();\n        if (trimmed === \"undefined\") {\n            return undefined;\n        }\n        if ([\"true\", \"1\"].includes(trimmed)) {\n            return true;\n        }\n        return false;\n    }\n    return undefined;\n};\nexports.parseAsBoolean = parseAsBoolean;\n//# sourceMappingURL=env.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/errors.js":
/*!************************************************!*\
  !*** ./node_modules/inngest/helpers/errors.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.functionStoppedRunningErr = exports.rethrowError = exports.OutgoingResultError = exports.fixEventKeyMissingSteps = exports.prettyError = exports.getErrorMessage = exports.minifyPrettyError = exports.prettyErrorSplitter = exports.ErrCode = exports.deserializeError = exports.isSerializedError = exports.serializeError = void 0;\nconst chalk_1 = __importDefault(__webpack_require__(/*! chalk */ \"(rsc)/./node_modules/chalk/source/index.js\"));\nconst json_stringify_safe_1 = __importDefault(__webpack_require__(/*! json-stringify-safe */ \"(rsc)/./node_modules/json-stringify-safe/stringify.js\"));\nconst serialize_error_cjs_1 = __webpack_require__(/*! serialize-error-cjs */ \"(rsc)/./node_modules/serialize-error-cjs/dist/index.js\");\nconst strip_ansi_1 = __importDefault(__webpack_require__(/*! strip-ansi */ \"(rsc)/./node_modules/strip-ansi/index.js\"));\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst NonRetriableError_js_1 = __webpack_require__(/*! ../components/NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\nconst SERIALIZED_KEY = \"__serialized\";\nconst SERIALIZED_VALUE = true;\n/**\n * Add first-class support for certain errors that we control, in addition to\n * built-in errors such as `TypeError`.\n *\n * Adding these allows these non-standard errors to be correctly serialized,\n * sent to Inngest, then deserialized back into the correct error type for users\n * to react to correctly.\n *\n * Note that these errors only support `message?: string | undefined` as the\n * input; more custom errors are not supported with this current strategy.\n */\nserialize_error_cjs_1.errorConstructors.set(\"NonRetriableError\", NonRetriableError_js_1.NonRetriableError);\n/**\n * Serialise an error to a serialized JSON string.\n *\n * Errors do not serialise nicely to JSON, so we use this function to convert\n * them to a serialized JSON string. Doing this is also non-trivial for some\n * errors, so we use the `serialize-error` package to do it for us.\n *\n * See {@link https://www.npmjs.com/package/serialize-error}\n *\n * This function is a small wrapper around that package to also add a `type`\n * property to the serialised error, so that we can distinguish between\n * serialised errors and other objects.\n *\n * Will not reserialise existing serialised errors.\n */\nconst serializeError = (\n/**\n * The suspected error to serialize.\n */\nsubject, \n/**\n * If `true` and the error is not serializable, will return the original value\n * as `unknown` instead of coercing it to a serialized error.\n */\nallowUnknown = false) => {\n    try {\n        // Try to understand if this is already done.\n        // Will handle stringified errors.\n        const existingSerializedError = (0, exports.isSerializedError)(subject);\n        if (existingSerializedError) {\n            return existingSerializedError;\n        }\n        if (typeof subject === \"object\" && subject !== null) {\n            // Is an object, so let's try and serialize it.\n            const serializedErr = (0, serialize_error_cjs_1.serializeError)(subject);\n            // Not a proper error was caught, so give us a chance to return `unknown`.\n            if (!serializedErr.name && allowUnknown) {\n                return subject;\n            }\n            // Serialization can succeed but assign no name or message, so we'll\n            // map over the result here to ensure we have everything.\n            // We'll just stringify the entire subject for the message, as this at\n            // least provides some context for the user.\n            const ret = Object.assign(Object.assign({}, serializedErr), { name: serializedErr.name || \"Error\", message: serializedErr.message ||\n                    (0, json_stringify_safe_1.default)(subject) ||\n                    \"Unknown error; error serialization could not find a message.\", stack: serializedErr.stack || \"\", [SERIALIZED_KEY]: SERIALIZED_VALUE });\n            // If we have a cause, make sure we recursively serialize them too. We are\n            // lighter with causes though; attempt to recursively serialize them, but\n            // stop if we find something that doesn't work and just return `unknown`.\n            let target = ret;\n            const maxDepth = 5;\n            for (let i = 0; i < maxDepth; i++) {\n                if (typeof target === \"object\" &&\n                    target !== null &&\n                    \"cause\" in target &&\n                    target.cause) {\n                    target = target.cause = (0, exports.serializeError)(target.cause, true);\n                    continue;\n                }\n                break;\n            }\n            return ret;\n        }\n        // If it's not an object, it's hard to parse this as an Error. In this case,\n        // we'll throw an error to start attempting backup strategies.\n        throw new Error(\"Error is not an object; strange throw value.\");\n    }\n    catch (err) {\n        if (allowUnknown) {\n            // If we are allowed to return unknown, we'll just return the original\n            // value.\n            return subject;\n        }\n        try {\n            // If serialization fails, fall back to a regular Error and use the\n            // original object as the message for an Error. We don't know what this\n            // object looks like, so we can't do anything else with it.\n            return Object.assign(Object.assign({}, (0, exports.serializeError)(new Error(typeof subject === \"string\" ? subject : (0, json_stringify_safe_1.default)(subject)), false)), { \n                // Remove the stack; it's not relevant here\n                stack: \"\", [SERIALIZED_KEY]: SERIALIZED_VALUE });\n        }\n        catch (err) {\n            // If this failed, then stringifying the object also failed, so we'll just\n            // return a completely generic error.\n            // Failing to stringify the object is very unlikely.\n            return {\n                name: \"Could not serialize source error\",\n                message: \"Serializing the source error failed.\",\n                stack: \"\",\n                [SERIALIZED_KEY]: SERIALIZED_VALUE,\n            };\n        }\n    }\n};\nexports.serializeError = serializeError;\n/**\n * Check if an object or a string is a serialised error created by\n * {@link serializeError}.\n */\nconst isSerializedError = (value) => {\n    try {\n        if (typeof value === \"string\") {\n            const parsed = zod_1.z\n                .object({\n                [SERIALIZED_KEY]: zod_1.z.literal(SERIALIZED_VALUE),\n                name: zod_1.z.enum([...Array.from(serialize_error_cjs_1.errorConstructors.keys())]),\n                message: zod_1.z.string(),\n                stack: zod_1.z.string(),\n            })\n                .passthrough()\n                .safeParse(JSON.parse(value));\n            if (parsed.success) {\n                return parsed.data;\n            }\n        }\n        if (typeof value === \"object\" && value !== null) {\n            const objIsSerializedErr = Object.prototype.hasOwnProperty.call(value, SERIALIZED_KEY) &&\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n                value[SERIALIZED_KEY] ===\n                    SERIALIZED_VALUE;\n            if (objIsSerializedErr) {\n                return value;\n            }\n        }\n    }\n    catch (_a) {\n        // no-op; we'll return undefined if parsing failed, as it isn't a serialized\n        // error\n    }\n};\nexports.isSerializedError = isSerializedError;\n/**\n * Deserialise an error created by {@link serializeError}.\n *\n * Ensures we only deserialise errors that meet a minimum level of\n * applicability, inclusive of error handling to ensure that badly serialized\n * errors are still handled.\n */\nconst deserializeError = (subject, allowUnknown = false) => {\n    const requiredFields = [\"name\", \"message\"];\n    try {\n        const hasRequiredFields = requiredFields.every((field) => {\n            return Object.prototype.hasOwnProperty.call(subject, field);\n        });\n        if (!hasRequiredFields) {\n            throw new Error();\n        }\n        const deserializedErr = (0, serialize_error_cjs_1.deserializeError)(subject);\n        if (\"cause\" in deserializedErr) {\n            deserializedErr.cause = (0, exports.deserializeError)(deserializedErr.cause, true);\n        }\n        return deserializedErr;\n    }\n    catch (_a) {\n        if (allowUnknown) {\n            // If we are allowed to return unknown, we'll just return the original\n            // value.\n            return subject;\n        }\n        const err = new Error(\"Unknown error; could not reserialize\");\n        /**\n         * Remove the stack so that it's not misleadingly shown as the Inngest\n         * internals.\n         */\n        err.stack = undefined;\n        return err;\n    }\n};\nexports.deserializeError = deserializeError;\nvar ErrCode;\n(function (ErrCode) {\n    ErrCode[\"NESTING_STEPS\"] = \"NESTING_STEPS\";\n    /**\n     * Legacy v0 execution error code for when a function has changed and no\n     * longer matches its in-progress state.\n     *\n     * @deprecated Not for use in latest execution method.\n     */\n    ErrCode[\"NON_DETERMINISTIC_FUNCTION\"] = \"NON_DETERMINISTIC_FUNCTION\";\n    /**\n     * Legacy v0 execution error code for when a function is found to be using\n     * async actions after memoziation has occurred, which v0 doesn't support.\n     *\n     * @deprecated Not for use in latest execution method.\n     */\n    ErrCode[\"ASYNC_DETECTED_AFTER_MEMOIZATION\"] = \"ASYNC_DETECTED_AFTER_MEMOIZATION\";\n    /**\n     * Legacy v0 execution error code for when a function is found to be using\n     * steps after a non-step async action has occurred.\n     *\n     * @deprecated Not for use in latest execution method.\n     */\n    ErrCode[\"STEP_USED_AFTER_ASYNC\"] = \"STEP_USED_AFTER_ASYNC\";\n    ErrCode[\"AUTOMATIC_PARALLEL_INDEXING\"] = \"AUTOMATIC_PARALLEL_INDEXING\";\n})(ErrCode || (exports.ErrCode = ErrCode = {}));\nexports.prettyErrorSplitter = \"=================================================\";\n/**\n * Given an unknown `err`, mutate it to minify any pretty errors that it\n * contains.\n */\nconst minifyPrettyError = (err) => {\n    var _a, _b, _c, _d;\n    try {\n        if (!isError(err)) {\n            return err;\n        }\n        const isPrettyError = err.message.includes(exports.prettyErrorSplitter);\n        if (!isPrettyError) {\n            return err;\n        }\n        const sanitizedMessage = (0, strip_ansi_1.default)(err.message);\n        const message = ((_b = (_a = sanitizedMessage.split(\"  \")[1]) === null || _a === void 0 ? void 0 : _a.split(\"\\n\")[0]) === null || _b === void 0 ? void 0 : _b.trim()) || err.message;\n        const code = ((_d = (_c = sanitizedMessage.split(\"\\n\\nCode: \")[1]) === null || _c === void 0 ? void 0 : _c.split(\"\\n\\n\")[0]) === null || _d === void 0 ? void 0 : _d.trim()) ||\n            undefined;\n        err.message = [code, message].filter(Boolean).join(\" - \");\n        if (err.stack) {\n            const sanitizedStack = (0, strip_ansi_1.default)(err.stack);\n            const stackRest = sanitizedStack\n                .split(`${exports.prettyErrorSplitter}\\n`)\n                .slice(2)\n                .join(\"\\n\");\n            err.stack = `${err.name}: ${err.message}\\n${stackRest}`;\n        }\n        return err;\n    }\n    catch (noopErr) {\n        return err;\n    }\n};\nexports.minifyPrettyError = minifyPrettyError;\n/**\n * Given an `err`, return a boolean representing whether it is in the shape of\n * an `Error` or not.\n */\nconst isError = (err) => {\n    try {\n        if (err instanceof Error) {\n            return true;\n        }\n        const hasName = Object.prototype.hasOwnProperty.call(err, \"name\");\n        const hasMessage = Object.prototype.hasOwnProperty.call(err, \"message\");\n        return hasName && hasMessage;\n    }\n    catch (noopErr) {\n        return false;\n    }\n};\n/**\n * Given an `unknown` object, retrieve the `message` property from it, or fall\n * back to the `fallback` string if it doesn't exist or is empty.\n */\nconst getErrorMessage = (err, fallback) => {\n    const { message } = zod_1.z\n        .object({ message: zod_1.z.string().min(1) })\n        .catch({ message: fallback })\n        .parse(err);\n    return message;\n};\nexports.getErrorMessage = getErrorMessage;\n/**\n * Given a {@link PrettyError}, return a nicely-formatted string ready to log\n * or throw.\n *\n * Useful for ensuring that errors are logged in a consistent, helpful format\n * across the SDK by prompting for key pieces of information.\n */\nconst prettyError = ({ type = \"error\", whatHappened, otherwise, reassurance, toFixNow, why, consequences, stack, code, }) => {\n    var _a, _b;\n    const { icon, colorFn } = {\n        error: { icon: \"❌\", colorFn: chalk_1.default.red },\n        warn: { icon: \"⚠️\", colorFn: chalk_1.default.yellow },\n    }[type];\n    let header = `${icon}  ${chalk_1.default.bold.underline(whatHappened.trim())}`;\n    if (stack) {\n        header +=\n            \"\\n\" +\n                [...(((_a = new Error().stack) === null || _a === void 0 ? void 0 : _a.split(\"\\n\").slice(1).filter(Boolean)) || [])].join(\"\\n\");\n    }\n    let toFixNowStr = (_b = (Array.isArray(toFixNow)\n        ? toFixNow\n            .map((s) => s.trim())\n            .filter(Boolean)\n            .map((s, i) => `\\t${i + 1}. ${s}`)\n            .join(\"\\n\")\n        : toFixNow === null || toFixNow === void 0 ? void 0 : toFixNow.trim())) !== null && _b !== void 0 ? _b : \"\";\n    if (Array.isArray(toFixNow) && toFixNowStr) {\n        toFixNowStr = `To fix this, you can take one of the following courses of action:\\n\\n${toFixNowStr}`;\n    }\n    let body = [reassurance === null || reassurance === void 0 ? void 0 : reassurance.trim(), why === null || why === void 0 ? void 0 : why.trim(), consequences === null || consequences === void 0 ? void 0 : consequences.trim()]\n        .filter(Boolean)\n        .join(\" \");\n    body += body ? `\\n\\n${toFixNowStr}` : toFixNowStr;\n    const trailer = [otherwise === null || otherwise === void 0 ? void 0 : otherwise.trim()].filter(Boolean).join(\" \");\n    const message = [\n        exports.prettyErrorSplitter,\n        header,\n        body,\n        trailer,\n        code ? `Code: ${code}` : \"\",\n        exports.prettyErrorSplitter,\n    ]\n        .filter(Boolean)\n        .join(\"\\n\\n\");\n    return colorFn(message);\n};\nexports.prettyError = prettyError;\nexports.fixEventKeyMissingSteps = [\n    \"Set the `INNGEST_EVENT_KEY` environment variable\",\n    `Pass a key to the \\`new Inngest()\\` constructor using the \\`${\"eventKey\"}\\` option`,\n    `Use \\`inngest.${\"setEventKey\"}()\\` at runtime`,\n];\n/**\n * An error that, when thrown, indicates internally that an outgoing operation\n * contains an error.\n *\n * We use this because serialized `data` sent back to Inngest may differ from\n * the error instance itself due to middleware.\n *\n * @internal\n */\nclass OutgoingResultError extends Error {\n    constructor(result) {\n        super(\"OutgoingOpError\");\n        this.result = result;\n    }\n}\nexports.OutgoingResultError = OutgoingResultError;\n/**\n * Create a function that will rethrow an error with a prefix added to the\n * message.\n *\n * Useful for adding context to errors that are rethrown.\n *\n * @example\n * ```ts\n * await doSomeAction().catch(rethrowError(\"Failed to do some action\"));\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst rethrowError = (prefix) => {\n    return (err) => {\n        try {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/restrict-template-expressions\n            err.message && (err.message = `${prefix}; ${err.message}`);\n        }\n        catch (noopErr) {\n            // no-op\n        }\n        finally {\n            // eslint-disable-next-line no-unsafe-finally\n            throw err;\n        }\n    };\n};\nexports.rethrowError = rethrowError;\n/**\n * Legacy v0 execution error for functions that don't support mixing steps and\n * regular async actions.\n */\nconst functionStoppedRunningErr = (code) => {\n    return (0, exports.prettyError)({\n        whatHappened: \"Your function was stopped from running\",\n        why: \"We detected a mix of asynchronous logic, some using step tooling and some not.\",\n        consequences: \"This can cause unexpected behaviour when a function is paused and resumed and is therefore strongly discouraged; we stopped your function to ensure nothing unexpected happened!\",\n        stack: true,\n        toFixNow: \"Ensure that your function is either entirely step-based or entirely non-step-based, by either wrapping all asynchronous logic in `step.run()` calls or by removing all `step.*()` calls.\",\n        otherwise: \"For more information on why step functions work in this manner, see https://www.inngest.com/docs/functions/multi-step#gotchas\",\n        code,\n    });\n};\nexports.functionStoppedRunningErr = functionStoppedRunningErr;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/functions.js":
/*!***************************************************!*\
  !*** ./node_modules/inngest/helpers/functions.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetchAllFnData = exports.parseFnData = exports.undefinedToNull = exports.waterfall = exports.cacheFn = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst schema_js_1 = __webpack_require__(/*! ../api/schema.js */ \"(rsc)/./node_modules/inngest/api/schema.js\");\nconst InngestExecution_js_1 = __webpack_require__(/*! ../components/execution/InngestExecution.js */ \"(rsc)/./node_modules/inngest/components/execution/InngestExecution.js\");\nconst types_js_1 = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/inngest/types.js\");\nconst errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/inngest/helpers/errors.js\");\n/**\n * Wraps a function with a cache. When the returned function is run, it will\n * cache the result and return it on subsequent calls.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst cacheFn = (fn) => {\n    const key = \"value\";\n    const cache = new Map();\n    return ((...args) => {\n        if (!cache.has(key)) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            cache.set(key, fn(...args));\n        }\n        return cache.get(key);\n    });\n};\nexports.cacheFn = cacheFn;\n/**\n * Given an array of functions, return a new function that will run each\n * function in series and return the result of the final function. Regardless of\n * if the functions are synchronous or asynchronous, they'll be made into an\n * async promise chain.\n *\n * If an error is thrown, the waterfall will stop and return the error.\n *\n * Because this needs to support both sync and async functions, it only allows\n * functions that accept a single argument.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst waterfall = (fns, \n/**\n * A function that transforms the result of each function in the waterfall,\n * ready for the next function.\n *\n * Will not be called on the final function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransform) => {\n    return (...args) => {\n        const chain = fns.reduce(async (acc, fn) => {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const prev = await acc;\n            const output = (await fn(prev));\n            if (transform) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return await transform(prev, output);\n            }\n            if (typeof output === \"undefined\") {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return prev;\n            }\n            return output;\n        }, Promise.resolve(args[0]));\n        return chain;\n    };\n};\nexports.waterfall = waterfall;\n/**\n * Given a value `v`, return `v` if it's not undefined, otherwise return `null`.\n */\nconst undefinedToNull = (v) => {\n    const isUndefined = typeof v === \"undefined\";\n    return isUndefined ? null : v;\n};\nexports.undefinedToNull = undefinedToNull;\nconst fnDataVersionSchema = zod_1.z.object({\n    version: zod_1.z\n        .literal(-1)\n        .or(zod_1.z.literal(0))\n        .or(zod_1.z.literal(1))\n        .or(zod_1.z.literal(2))\n        .optional()\n        .transform((v) => {\n        if (typeof v === \"undefined\") {\n            console.debug(`No request version specified by executor; defaulting to v${InngestExecution_js_1.PREFERRED_EXECUTION_VERSION}`);\n            return InngestExecution_js_1.PREFERRED_EXECUTION_VERSION;\n        }\n        return v === -1 ? InngestExecution_js_1.PREFERRED_EXECUTION_VERSION : v;\n    }),\n});\nconst parseFnData = (data) => {\n    let version;\n    try {\n        ({ version } = fnDataVersionSchema.parse(data));\n        const versionHandlers = {\n            [InngestExecution_js_1.ExecutionVersion.V0]: () => (Object.assign({ version: InngestExecution_js_1.ExecutionVersion.V0 }, zod_1.z\n                .object({\n                event: zod_1.z.record(zod_1.z.any()),\n                events: zod_1.z.array(zod_1.z.record(zod_1.z.any())).default([]),\n                steps: schema_js_1.stepsSchemas[InngestExecution_js_1.ExecutionVersion.V0],\n                ctx: zod_1.z\n                    .object({\n                    run_id: zod_1.z.string(),\n                    attempt: zod_1.z.number().default(0),\n                    stack: zod_1.z\n                        .object({\n                        stack: zod_1.z\n                            .array(zod_1.z.string())\n                            .nullable()\n                            .transform((v) => (Array.isArray(v) ? v : [])),\n                        current: zod_1.z.number(),\n                    })\n                        .passthrough()\n                        .optional()\n                        .nullable(),\n                })\n                    .optional()\n                    .nullable(),\n                use_api: zod_1.z.boolean().default(false),\n            })\n                .parse(data))),\n            [InngestExecution_js_1.ExecutionVersion.V1]: () => (Object.assign({ version: InngestExecution_js_1.ExecutionVersion.V1 }, zod_1.z\n                .object({\n                event: zod_1.z.record(zod_1.z.any()),\n                events: zod_1.z.array(zod_1.z.record(zod_1.z.any())).default([]),\n                steps: schema_js_1.stepsSchemas[InngestExecution_js_1.ExecutionVersion.V1],\n                ctx: zod_1.z\n                    .object({\n                    run_id: zod_1.z.string(),\n                    attempt: zod_1.z.number().default(0),\n                    disable_immediate_execution: zod_1.z.boolean().default(false),\n                    use_api: zod_1.z.boolean().default(false),\n                    stack: zod_1.z\n                        .object({\n                        stack: zod_1.z\n                            .array(zod_1.z.string())\n                            .nullable()\n                            .transform((v) => (Array.isArray(v) ? v : [])),\n                        current: zod_1.z.number(),\n                    })\n                        .passthrough()\n                        .optional()\n                        .nullable(),\n                })\n                    .optional()\n                    .nullable(),\n            })\n                .parse(data))),\n            [InngestExecution_js_1.ExecutionVersion.V2]: () => (Object.assign({ version: InngestExecution_js_1.ExecutionVersion.V2 }, zod_1.z\n                .object({\n                event: zod_1.z.record(zod_1.z.any()),\n                events: zod_1.z.array(zod_1.z.record(zod_1.z.any())).default([]),\n                steps: schema_js_1.stepsSchemas[InngestExecution_js_1.ExecutionVersion.V2],\n                ctx: zod_1.z\n                    .object({\n                    run_id: zod_1.z.string(),\n                    attempt: zod_1.z.number().default(0),\n                    disable_immediate_execution: zod_1.z.boolean().default(false),\n                    use_api: zod_1.z.boolean().default(false),\n                    stack: zod_1.z\n                        .object({\n                        stack: zod_1.z\n                            .array(zod_1.z.string())\n                            .nullable()\n                            .transform((v) => (Array.isArray(v) ? v : [])),\n                        current: zod_1.z.number(),\n                    })\n                        .passthrough()\n                        .optional()\n                        .nullable(),\n                })\n                    .optional()\n                    .nullable(),\n            })\n                .parse(data))),\n        };\n        return versionHandlers[version]();\n    }\n    catch (err) {\n        throw new Error(parseFailureErr(err));\n    }\n};\nexports.parseFnData = parseFnData;\nconst fetchAllFnData = async ({ data, api, version, }) => {\n    var _a, _b, _c, _d;\n    const result = Object.assign({}, data);\n    try {\n        if ((result.version === InngestExecution_js_1.ExecutionVersion.V0 && result.use_api) ||\n            (result.version === InngestExecution_js_1.ExecutionVersion.V1 && ((_a = result.ctx) === null || _a === void 0 ? void 0 : _a.use_api))) {\n            if (!((_b = result.ctx) === null || _b === void 0 ? void 0 : _b.run_id)) {\n                return (0, types_js_1.err)((0, errors_js_1.prettyError)({\n                    whatHappened: \"failed to attempt retrieving data from API\",\n                    consequences: \"function execution can't continue\",\n                    why: \"run_id is missing from context\",\n                    stack: true,\n                }));\n            }\n            const [evtResp, stepResp] = await Promise.all([\n                api.getRunBatch(result.ctx.run_id),\n                api.getRunSteps(result.ctx.run_id, version),\n            ]);\n            if (evtResp.ok) {\n                result.events = evtResp.value;\n            }\n            else {\n                return (0, types_js_1.err)((0, errors_js_1.prettyError)({\n                    whatHappened: \"failed to retrieve list of events\",\n                    consequences: \"function execution can't continue\",\n                    why: (_c = evtResp.error) === null || _c === void 0 ? void 0 : _c.error,\n                    stack: true,\n                }));\n            }\n            if (stepResp.ok) {\n                result.steps = stepResp.value;\n            }\n            else {\n                return (0, types_js_1.err)((0, errors_js_1.prettyError)({\n                    whatHappened: \"failed to retrieve steps for function run\",\n                    consequences: \"function execution can't continue\",\n                    why: (_d = stepResp.error) === null || _d === void 0 ? void 0 : _d.error,\n                    stack: true,\n                }));\n            }\n        }\n        return (0, types_js_1.ok)(result);\n    }\n    catch (error) {\n        // print it out for now.\n        // move to something like protobuf so we don't have to deal with this\n        console.error(error);\n        return (0, types_js_1.err)(parseFailureErr(error));\n    }\n};\nexports.fetchAllFnData = fetchAllFnData;\nconst parseFailureErr = (err) => {\n    let why;\n    if (err instanceof zod_1.ZodError) {\n        why = err.toString();\n    }\n    return (0, errors_js_1.prettyError)({\n        whatHappened: \"Failed to parse data from executor.\",\n        consequences: \"Function execution can't continue.\",\n        toFixNow: \"Make sure that your API is set up to parse incoming request bodies as JSON, like body-parser for Express (https://expressjs.com/en/resources/middleware/body-parser.html).\",\n        stack: true,\n        why,\n    });\n};\n//# sourceMappingURL=functions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/functions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/net.js":
/*!*********************************************!*\
  !*** ./node_modules/inngest/helpers/net.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fetchWithAuthFallback = fetchWithAuthFallback;\nexports.signDataWithKey = signDataWithKey;\nconst canonicalize_1 = __importDefault(__webpack_require__(/*! canonicalize */ \"(rsc)/./node_modules/canonicalize/lib/canonicalize.js\"));\nconst hash_js_1 = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\n/**\n * Send an HTTP request with the given signing key. If the response is a 401 or\n * 403, then try again with the fallback signing key\n */\nasync function fetchWithAuthFallback({ authToken, authTokenFallback, fetch, options, url, }) {\n    let res = await fetch(url, Object.assign(Object.assign({}, options), { headers: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.headers), { Authorization: `Bearer ${authToken}` }) }));\n    if ([401, 403].includes(res.status) && authTokenFallback) {\n        res = await fetch(url, Object.assign(Object.assign({}, options), { headers: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.headers), { Authorization: `Bearer ${authTokenFallback}` }) }));\n    }\n    return res;\n}\nfunction signDataWithKey(data, signingKey, ts) {\n    // Calculate the HMAC of the request body ourselves.\n    // We make the assumption here that a stringified body is the same as the\n    // raw bytes; it may be pertinent in the future to always parse, then\n    // canonicalize the body to ensure it's consistent.\n    const encoded = typeof data === \"string\" ? data : (0, canonicalize_1.default)(data);\n    // Remove the `/signkey-[test|prod]-/` prefix from our signing key to calculate the HMAC.\n    const key = signingKey.replace(/signkey-\\w+-/, \"\");\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-explicit-any\n    const mac = (0, hash_js_1.hmac)(hash_js_1.sha256, key)\n        .update(encoded)\n        .update(ts)\n        .digest(\"hex\");\n    return mac;\n}\n//# sourceMappingURL=net.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL25ldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3Qix1QkFBdUI7QUFDdkIsdUNBQXVDLG1CQUFPLENBQUMsMkVBQWM7QUFDN0Qsa0JBQWtCLG1CQUFPLENBQUMseURBQVM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsb0RBQW9EO0FBQzNGLDZEQUE2RCxjQUFjLHVDQUF1Qyx3RUFBd0UseUJBQXlCLFVBQVUsR0FBRyxHQUFHO0FBQ25PO0FBQ0EsNkRBQTZELGNBQWMsdUNBQXVDLHdFQUF3RSx5QkFBeUIsa0JBQWtCLEdBQUcsR0FBRztBQUMzTztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvYWhhcnBlci9pbm5nZXN0L2lubmdlc3Qtc2FuZGJveC90cy1uZXh0L25vZGVfbW9kdWxlcy9pbm5nZXN0L2hlbHBlcnMvbmV0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mZXRjaFdpdGhBdXRoRmFsbGJhY2sgPSBmZXRjaFdpdGhBdXRoRmFsbGJhY2s7XG5leHBvcnRzLnNpZ25EYXRhV2l0aEtleSA9IHNpZ25EYXRhV2l0aEtleTtcbmNvbnN0IGNhbm9uaWNhbGl6ZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjYW5vbmljYWxpemVcIikpO1xuY29uc3QgaGFzaF9qc18xID0gcmVxdWlyZShcImhhc2guanNcIik7XG4vKipcbiAqIFNlbmQgYW4gSFRUUCByZXF1ZXN0IHdpdGggdGhlIGdpdmVuIHNpZ25pbmcga2V5LiBJZiB0aGUgcmVzcG9uc2UgaXMgYSA0MDEgb3JcbiAqIDQwMywgdGhlbiB0cnkgYWdhaW4gd2l0aCB0aGUgZmFsbGJhY2sgc2lnbmluZyBrZXlcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmV0Y2hXaXRoQXV0aEZhbGxiYWNrKHsgYXV0aFRva2VuLCBhdXRoVG9rZW5GYWxsYmFjaywgZmV0Y2gsIG9wdGlvbnMsIHVybCwgfSkge1xuICAgIGxldCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgaGVhZGVyczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVhZGVycyksIHsgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke2F1dGhUb2tlbn1gIH0pIH0pKTtcbiAgICBpZiAoWzQwMSwgNDAzXS5pbmNsdWRlcyhyZXMuc3RhdHVzKSAmJiBhdXRoVG9rZW5GYWxsYmFjaykge1xuICAgICAgICByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgaGVhZGVyczogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVhZGVycyksIHsgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke2F1dGhUb2tlbkZhbGxiYWNrfWAgfSkgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gc2lnbkRhdGFXaXRoS2V5KGRhdGEsIHNpZ25pbmdLZXksIHRzKSB7XG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBITUFDIG9mIHRoZSByZXF1ZXN0IGJvZHkgb3Vyc2VsdmVzLlxuICAgIC8vIFdlIG1ha2UgdGhlIGFzc3VtcHRpb24gaGVyZSB0aGF0IGEgc3RyaW5naWZpZWQgYm9keSBpcyB0aGUgc2FtZSBhcyB0aGVcbiAgICAvLyByYXcgYnl0ZXM7IGl0IG1heSBiZSBwZXJ0aW5lbnQgaW4gdGhlIGZ1dHVyZSB0byBhbHdheXMgcGFyc2UsIHRoZW5cbiAgICAvLyBjYW5vbmljYWxpemUgdGhlIGJvZHkgdG8gZW5zdXJlIGl0J3MgY29uc2lzdGVudC5cbiAgICBjb25zdCBlbmNvZGVkID0gdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgPyBkYXRhIDogKDAsIGNhbm9uaWNhbGl6ZV8xLmRlZmF1bHQpKGRhdGEpO1xuICAgIC8vIFJlbW92ZSB0aGUgYC9zaWdua2V5LVt0ZXN0fHByb2RdLS9gIHByZWZpeCBmcm9tIG91ciBzaWduaW5nIGtleSB0byBjYWxjdWxhdGUgdGhlIEhNQUMuXG4gICAgY29uc3Qga2V5ID0gc2lnbmluZ0tleS5yZXBsYWNlKC9zaWdua2V5LVxcdystLywgXCJcIik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnQsIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBtYWMgPSAoMCwgaGFzaF9qc18xLmhtYWMpKGhhc2hfanNfMS5zaGEyNTYsIGtleSlcbiAgICAgICAgLnVwZGF0ZShlbmNvZGVkKVxuICAgICAgICAudXBkYXRlKHRzKVxuICAgICAgICAuZGlnZXN0KFwiaGV4XCIpO1xuICAgIHJldHVybiBtYWM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/net.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/promises.js":
/*!**************************************************!*\
  !*** ./node_modules/inngest/helpers/promises.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nvar __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }\nvar __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n    function fulfill(value) { resume(\"next\", value); }\n    function reject(value) { resume(\"throw\", value); }\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.retryWithBackoff = exports.resolveNextTick = exports.runAsPromise = exports.createTimeoutPromise = exports.createDeferredPromiseWithStack = exports.createDeferredPromise = exports.resolveAfterPending = exports.createFrozenPromise = void 0;\n/**\n * Some environments don't allow access to the global queueMicrotask(). While we\n * had assumed this was only true for those powered by earlier versions of Node\n * (<14) that we don't officially support, Vercel's Edge Functions also obscure\n * the function in dev, even though the platform it's based on (Cloudflare\n * Workers) appropriately exposes it. Even worse, production Vercel Edge\n * Functions can see the function, but it immediately blows up the function when\n * used.\n *\n * Therefore, we can fall back to a reasonable alternative of\n * `Promise.resolve().then(fn)` instead. This _may_ be slightly slower in modern\n * environments, but at least we can still work in these environments.\n */\nconst shimQueueMicrotask = (callback) => {\n    void Promise.resolve().then(callback);\n};\n/**\n * A helper function to create a `Promise` that will never settle.\n *\n * It purposefully creates no references to `resolve` or `reject` so that the\n * returned `Promise` will remain unsettled until it falls out of scope and is\n * garbage collected.\n *\n * This should be used within transient closures to fake asynchronous action, so\n * long as it's guaranteed that they will fall out of scope.\n */\nconst createFrozenPromise = () => {\n    return new Promise(() => undefined);\n};\nexports.createFrozenPromise = createFrozenPromise;\n/**\n * Returns a Promise that resolves after the current event loop's microtasks\n * have finished, but before the next event loop tick.\n */\nconst resolveAfterPending = (count = 100) => {\n    /**\n     * This uses a brute force implementation that will continue to enqueue\n     * microtasks 10 times before resolving. This is to ensure that the microtask\n     * queue is drained, even if the microtask queue is being manipulated by other\n     * code.\n     *\n     * While this still doesn't guarantee that the microtask queue is drained,\n     * it's our best bet for giving other non-controlled promises a chance to\n     * resolve before we continue without resorting to falling in to the next\n     * tick.\n     */\n    return new Promise((resolve) => {\n        let i = 0;\n        const iterate = () => {\n            shimQueueMicrotask(() => {\n                if (i++ > count) {\n                    return resolve();\n                }\n                iterate();\n            });\n        };\n        iterate();\n    });\n};\nexports.resolveAfterPending = resolveAfterPending;\n/**\n * Creates and returns Promise that can be resolved or rejected with the\n * returned `resolve` and `reject` functions.\n *\n * Resolving or rejecting the function will return a new set of Promise control\n * functions. These can be ignored if the original Promise is all that's needed.\n */\nconst createDeferredPromise = () => {\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject) => {\n        resolve = (value) => {\n            _resolve(value);\n            return (0, exports.createDeferredPromise)();\n        };\n        reject = (reason) => {\n            _reject(reason);\n            return (0, exports.createDeferredPromise)();\n        };\n    });\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return { promise, resolve: resolve, reject: reject };\n};\nexports.createDeferredPromise = createDeferredPromise;\n/**\n * Creates and returns a deferred Promise that can be resolved or rejected with\n * the returned `resolve` and `reject` functions.\n *\n * For each Promise resolved or rejected this way, this will also keep a stack\n * of all unhandled Promises, resolved or rejected.\n *\n * Once a Promise is read, it is removed from the stack.\n */\nconst createDeferredPromiseWithStack = () => {\n    const settledPromises = [];\n    let rotateQueue = () => { };\n    const results = (function () {\n        return __asyncGenerator(this, arguments, function* () {\n            while (true) {\n                const next = settledPromises.shift();\n                if (next) {\n                    yield yield __await(next);\n                }\n                else {\n                    yield __await(new Promise((resolve) => {\n                        rotateQueue = resolve;\n                    }));\n                }\n            }\n        });\n    })();\n    const shimDeferredPromise = (deferred) => {\n        const originalResolve = deferred.resolve;\n        const originalReject = deferred.reject;\n        deferred.resolve = (value) => {\n            settledPromises.push(deferred.promise);\n            rotateQueue();\n            return shimDeferredPromise(originalResolve(value));\n        };\n        deferred.reject = (reason) => {\n            settledPromises.push(deferred.promise);\n            rotateQueue();\n            return shimDeferredPromise(originalReject(reason));\n        };\n        return deferred;\n    };\n    const deferred = shimDeferredPromise((0, exports.createDeferredPromise)());\n    return { deferred, results };\n};\nexports.createDeferredPromiseWithStack = createDeferredPromiseWithStack;\n/**\n * Creates a Promise that will resolve after the given duration, along with\n * methods to start, clear, and reset the timeout.\n */\nconst createTimeoutPromise = (duration) => {\n    const { promise, resolve } = (0, exports.createDeferredPromise)();\n    let timeout;\n    // eslint-disable-next-line prefer-const\n    let ret;\n    const start = () => {\n        if (timeout)\n            return ret;\n        timeout = setTimeout(() => {\n            resolve();\n        }, duration);\n        return ret;\n    };\n    const clear = () => {\n        clearTimeout(timeout);\n        timeout = undefined;\n    };\n    const reset = () => {\n        clear();\n        return start();\n    };\n    ret = Object.assign(promise, { start, clear, reset });\n    return ret;\n};\nexports.createTimeoutPromise = createTimeoutPromise;\n/**\n * Take any function and safely promisify such that both synchronous and\n * asynchronous errors are caught and returned as a rejected Promise.\n *\n * The passed `fn` can be undefined to support functions that may conditionally\n * be defined.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst runAsPromise = (fn\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return Promise.resolve().then(fn);\n};\nexports.runAsPromise = runAsPromise;\n/**\n * Returns a Promise that resolve after the current event loop tick.\n */\nconst resolveNextTick = () => {\n    return new Promise((resolve) => setTimeout(resolve));\n};\nexports.resolveNextTick = resolveNextTick;\nconst retryWithBackoff = async (fn, opts) => {\n    var _a;\n    const maxAttempts = (opts === null || opts === void 0 ? void 0 : opts.maxAttempts) || 5;\n    const baseDelay = (_a = opts === null || opts === void 0 ? void 0 : opts.baseDelay) !== null && _a !== void 0 ? _a : 100;\n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n        try {\n            return await fn();\n        }\n        catch (err) {\n            if (attempt >= maxAttempts) {\n                throw err;\n            }\n            const jitter = Math.random() * baseDelay;\n            const delay = baseDelay * Math.pow(2, attempt - 1) + jitter;\n            await new Promise((resolve) => setTimeout(resolve, delay));\n        }\n    }\n    throw new Error(\"Max retries reached; this should be unreachable.\");\n};\nexports.retryWithBackoff = retryWithBackoff;\n//# sourceMappingURL=promises.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/promises.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/stream.js":
/*!************************************************!*\
  !*** ./node_modules/inngest/helpers/stream.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createStream = void 0;\nconst strings_js_1 = __webpack_require__(/*! ./strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\n/**\n * Creates a {@link ReadableStream} that sends a `value` every `interval`\n * milliseconds as a heartbeat, intended to keep a stream open.\n *\n * Returns the `stream` itself and a `finalize` function that can be used to\n * close the stream and send a final value.\n */\nconst createStream = (opts) => {\n    var _a, _b;\n    /**\n     * We need to resolve this promise with both the stream and the `finalize`\n     * function, but having them both instantiated synchronously is difficult, as\n     * we need access to the stream's internals too.\n     *\n     * We create this cheeky deferred promise to grab the internal `finalize`\n     * value. Be warned that simpler solutions may appear to compile, but fail at\n     * runtime due to variables not being assigned; make sure to test your code!\n     */\n    let passFinalize;\n    const finalizeP = new Promise((resolve) => {\n        passFinalize = resolve;\n    });\n    const interval = (_a = opts === null || opts === void 0 ? void 0 : opts.interval) !== null && _a !== void 0 ? _a : 3000;\n    const value = (_b = opts === null || opts === void 0 ? void 0 : opts.value) !== null && _b !== void 0 ? _b : \" \";\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises, no-async-promise-executor\n    return new Promise(async (resolve, reject) => {\n        try {\n            const stream = new ReadableStream({\n                start(controller) {\n                    const encoder = new TextEncoder();\n                    const heartbeat = setInterval(() => {\n                        controller.enqueue(encoder.encode(value));\n                    }, interval);\n                    const finalize = (data) => {\n                        clearInterval(heartbeat);\n                        // `data` may be a `Promise`. If it is, we need to wait for it to\n                        // resolve before sending it. To support this elegantly we'll always\n                        // assume it's a promise and handle that case.\n                        void Promise.resolve(data).then((resolvedData) => {\n                            controller.enqueue(encoder.encode((0, strings_js_1.stringify)(resolvedData)));\n                            controller.close();\n                        });\n                    };\n                    passFinalize(finalize);\n                },\n            });\n            resolve({ stream, finalize: await finalizeP });\n        }\n        catch (err) {\n            reject(err);\n        }\n    });\n};\nexports.createStream = createStream;\n//# sourceMappingURL=stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIscUJBQXFCLG1CQUFPLENBQUMscUVBQWM7QUFDM0M7QUFDQSxjQUFjLHNCQUFzQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2Isc0JBQXNCLG1DQUFtQztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsiL1VzZXJzL2FoYXJwZXIvaW5uZ2VzdC9pbm5nZXN0LXNhbmRib3gvdHMtbmV4dC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3N0cmVhbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlU3RyZWFtID0gdm9pZCAwO1xuY29uc3Qgc3RyaW5nc19qc18xID0gcmVxdWlyZShcIi4vc3RyaW5ncy5qc1wiKTtcbi8qKlxuICogQ3JlYXRlcyBhIHtAbGluayBSZWFkYWJsZVN0cmVhbX0gdGhhdCBzZW5kcyBhIGB2YWx1ZWAgZXZlcnkgYGludGVydmFsYFxuICogbWlsbGlzZWNvbmRzIGFzIGEgaGVhcnRiZWF0LCBpbnRlbmRlZCB0byBrZWVwIGEgc3RyZWFtIG9wZW4uXG4gKlxuICogUmV0dXJucyB0aGUgYHN0cmVhbWAgaXRzZWxmIGFuZCBhIGBmaW5hbGl6ZWAgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0b1xuICogY2xvc2UgdGhlIHN0cmVhbSBhbmQgc2VuZCBhIGZpbmFsIHZhbHVlLlxuICovXG5jb25zdCBjcmVhdGVTdHJlYW0gPSAob3B0cykgPT4ge1xuICAgIHZhciBfYSwgX2I7XG4gICAgLyoqXG4gICAgICogV2UgbmVlZCB0byByZXNvbHZlIHRoaXMgcHJvbWlzZSB3aXRoIGJvdGggdGhlIHN0cmVhbSBhbmQgdGhlIGBmaW5hbGl6ZWBcbiAgICAgKiBmdW5jdGlvbiwgYnV0IGhhdmluZyB0aGVtIGJvdGggaW5zdGFudGlhdGVkIHN5bmNocm9ub3VzbHkgaXMgZGlmZmljdWx0LCBhc1xuICAgICAqIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSBzdHJlYW0ncyBpbnRlcm5hbHMgdG9vLlxuICAgICAqXG4gICAgICogV2UgY3JlYXRlIHRoaXMgY2hlZWt5IGRlZmVycmVkIHByb21pc2UgdG8gZ3JhYiB0aGUgaW50ZXJuYWwgYGZpbmFsaXplYFxuICAgICAqIHZhbHVlLiBCZSB3YXJuZWQgdGhhdCBzaW1wbGVyIHNvbHV0aW9ucyBtYXkgYXBwZWFyIHRvIGNvbXBpbGUsIGJ1dCBmYWlsIGF0XG4gICAgICogcnVudGltZSBkdWUgdG8gdmFyaWFibGVzIG5vdCBiZWluZyBhc3NpZ25lZDsgbWFrZSBzdXJlIHRvIHRlc3QgeW91ciBjb2RlIVxuICAgICAqL1xuICAgIGxldCBwYXNzRmluYWxpemU7XG4gICAgY29uc3QgZmluYWxpemVQID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgcGFzc0ZpbmFsaXplID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgICBjb25zdCBpbnRlcnZhbCA9IChfYSA9IG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5pbnRlcnZhbCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMzAwMDtcbiAgICBjb25zdCB2YWx1ZSA9IChfYiA9IG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy52YWx1ZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogXCIgXCI7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1taXN1c2VkLXByb21pc2VzLCBuby1hc3luYy1wcm9taXNlLWV4ZWN1dG9yXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgICAgICAgICAgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYXJ0YmVhdCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShlbmNvZGVyLmVuY29kZSh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9LCBpbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbmFsaXplID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaGVhcnRiZWF0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGBkYXRhYCBtYXkgYmUgYSBgUHJvbWlzZWAuIElmIGl0IGlzLCB3ZSBuZWVkIHRvIHdhaXQgZm9yIGl0IHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXNvbHZlIGJlZm9yZSBzZW5kaW5nIGl0LiBUbyBzdXBwb3J0IHRoaXMgZWxlZ2FudGx5IHdlJ2xsIGFsd2F5c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXNzdW1lIGl0J3MgYSBwcm9taXNlIGFuZCBoYW5kbGUgdGhhdCBjYXNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCBQcm9taXNlLnJlc29sdmUoZGF0YSkudGhlbigocmVzb2x2ZWREYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGVuY29kZXIuZW5jb2RlKCgwLCBzdHJpbmdzX2pzXzEuc3RyaW5naWZ5KShyZXNvbHZlZERhdGEpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHBhc3NGaW5hbGl6ZShmaW5hbGl6ZSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzb2x2ZSh7IHN0cmVhbSwgZmluYWxpemU6IGF3YWl0IGZpbmFsaXplUCB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbmV4cG9ydHMuY3JlYXRlU3RyZWFtID0gY3JlYXRlU3RyZWFtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/strings.js":
/*!*************************************************!*\
  !*** ./node_modules/inngest/helpers/strings.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hashSigningKey = exports.hashEventKey = exports.stringifyUnknown = exports.timeStr = exports.slugify = exports.stringify = void 0;\nconst hash_js_1 = __webpack_require__(/*! hash.js */ \"(rsc)/./node_modules/hash.js/lib/hash.js\");\nconst json_stringify_safe_1 = __importDefault(__webpack_require__(/*! json-stringify-safe */ \"(rsc)/./node_modules/json-stringify-safe/stringify.js\"));\nconst ms_1 = __importDefault(__webpack_require__(/*! ms */ \"(rsc)/./node_modules/inngest/node_modules/ms/index.js\"));\n/**\n * Safely `JSON.stringify()` an `input`, handling circular refernences and\n * removing `BigInt` values.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst stringify = (input) => {\n    return (0, json_stringify_safe_1.default)(input, (key, value) => {\n        if (typeof value !== \"bigint\") {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            return value;\n        }\n    });\n};\nexports.stringify = stringify;\n/**\n * Returns a slugified string used to generate consistent IDs.\n *\n * This can be used to generate a consistent ID for a function when migrating\n * from v2 to v3 of the SDK.\n *\n * @public\n */\nconst slugify = (str) => {\n    const join = \"-\";\n    return str\n        .toLowerCase()\n        .replace(/[^a-z0-9-]+/g, join)\n        .replace(/-+/g, join)\n        .split(join)\n        .filter(Boolean)\n        .join(join);\n};\nexports.slugify = slugify;\nconst millisecond = 1;\nconst second = millisecond * 1000;\nconst minute = second * 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst week = day * 7;\n/**\n * A collection of periods in milliseconds and their suffixes used when creating\n * time strings.\n */\nconst periods = [\n    [\"w\", week],\n    [\"d\", day],\n    [\"h\", hour],\n    [\"m\", minute],\n    [\"s\", second],\n];\n/**\n * Convert a given `Date`, `number`, or `ms`-compatible `string` to a\n * Inngest sleep-compatible time string (e.g. `\"1d\"` or `\"2h3010s\"`).\n *\n * Can optionally provide a `now` date to use as the base for the calculation,\n * otherwise a new date will be created on invocation.\n */\nconst timeStr = (\n/**\n * The future date to use to convert to a time string.\n */\ninput) => {\n    if (input instanceof Date) {\n        return input.toISOString();\n    }\n    const milliseconds = typeof input === \"string\" ? (0, ms_1.default)(input) : input;\n    const [, timeStr] = periods.reduce(([num, str], [suffix, period]) => {\n        const numPeriods = Math.floor(num / period);\n        if (numPeriods > 0) {\n            return [num % period, `${str}${numPeriods}${suffix}`];\n        }\n        return [num, str];\n    }, [milliseconds, \"\"]);\n    return timeStr;\n};\nexports.timeStr = timeStr;\n/**\n * Given an unknown input, stringify it if it's a boolean, a number, or a\n * string, else return `undefined`.\n */\nconst stringifyUnknown = (input) => {\n    if (typeof input === \"boolean\" ||\n        typeof input === \"number\" ||\n        typeof input === \"string\") {\n        return input.toString();\n    }\n};\nexports.stringifyUnknown = stringifyUnknown;\nconst hashEventKey = (eventKey) => {\n    return (0, hash_js_1.sha256)().update(eventKey).digest(\"hex\");\n};\nexports.hashEventKey = hashEventKey;\nconst hashSigningKey = (signingKey) => {\n    var _a;\n    if (!signingKey) {\n        return \"\";\n    }\n    const prefix = ((_a = signingKey.match(/^signkey-[\\w]+-/)) === null || _a === void 0 ? void 0 : _a.shift()) || \"\";\n    const key = signingKey.replace(/^signkey-[\\w]+-/, \"\");\n    // Decode the key from its hex representation into a bytestream\n    return `${prefix}${(0, hash_js_1.sha256)().update(key, \"hex\").digest(\"hex\")}`;\n};\nexports.hashSigningKey = hashSigningKey;\n//# sourceMappingURL=strings.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3N0cmluZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxvQkFBb0IsR0FBRyx3QkFBd0IsR0FBRyxlQUFlLEdBQUcsZUFBZSxHQUFHLGlCQUFpQjtBQUNoSSxrQkFBa0IsbUJBQU8sQ0FBQyx5REFBUztBQUNuQyw4Q0FBOEMsbUJBQU8sQ0FBQyxrRkFBcUI7QUFDM0UsNkJBQTZCLG1CQUFPLENBQUMsaUVBQUk7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLElBQUksRUFBRSxXQUFXLEVBQUUsT0FBTztBQUMvRDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTyxFQUFFLHlEQUF5RDtBQUNoRjtBQUNBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsiL1VzZXJzL2FoYXJwZXIvaW5uZ2VzdC9pbm5nZXN0LXNhbmRib3gvdHMtbmV4dC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3N0cmluZ3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmhhc2hTaWduaW5nS2V5ID0gZXhwb3J0cy5oYXNoRXZlbnRLZXkgPSBleHBvcnRzLnN0cmluZ2lmeVVua25vd24gPSBleHBvcnRzLnRpbWVTdHIgPSBleHBvcnRzLnNsdWdpZnkgPSBleHBvcnRzLnN0cmluZ2lmeSA9IHZvaWQgMDtcbmNvbnN0IGhhc2hfanNfMSA9IHJlcXVpcmUoXCJoYXNoLmpzXCIpO1xuY29uc3QganNvbl9zdHJpbmdpZnlfc2FmZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJqc29uLXN0cmluZ2lmeS1zYWZlXCIpKTtcbmNvbnN0IG1zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm1zXCIpKTtcbi8qKlxuICogU2FmZWx5IGBKU09OLnN0cmluZ2lmeSgpYCBhbiBgaW5wdXRgLCBoYW5kbGluZyBjaXJjdWxhciByZWZlcm5lbmNlcyBhbmRcbiAqIHJlbW92aW5nIGBCaWdJbnRgIHZhbHVlcy5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmNvbnN0IHN0cmluZ2lmeSA9IChpbnB1dCkgPT4ge1xuICAgIHJldHVybiAoMCwganNvbl9zdHJpbmdpZnlfc2FmZV8xLmRlZmF1bHQpKGlucHV0LCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImJpZ2ludFwiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1yZXR1cm5cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbmV4cG9ydHMuc3RyaW5naWZ5ID0gc3RyaW5naWZ5O1xuLyoqXG4gKiBSZXR1cm5zIGEgc2x1Z2lmaWVkIHN0cmluZyB1c2VkIHRvIGdlbmVyYXRlIGNvbnNpc3RlbnQgSURzLlxuICpcbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gZ2VuZXJhdGUgYSBjb25zaXN0ZW50IElEIGZvciBhIGZ1bmN0aW9uIHdoZW4gbWlncmF0aW5nXG4gKiBmcm9tIHYyIHRvIHYzIG9mIHRoZSBTREsuXG4gKlxuICogQHB1YmxpY1xuICovXG5jb25zdCBzbHVnaWZ5ID0gKHN0cikgPT4ge1xuICAgIGNvbnN0IGpvaW4gPSBcIi1cIjtcbiAgICByZXR1cm4gc3RyXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAgIC5yZXBsYWNlKC9bXmEtejAtOS1dKy9nLCBqb2luKVxuICAgICAgICAucmVwbGFjZSgvLSsvZywgam9pbilcbiAgICAgICAgLnNwbGl0KGpvaW4pXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAgICAgLmpvaW4oam9pbik7XG59O1xuZXhwb3J0cy5zbHVnaWZ5ID0gc2x1Z2lmeTtcbmNvbnN0IG1pbGxpc2Vjb25kID0gMTtcbmNvbnN0IHNlY29uZCA9IG1pbGxpc2Vjb25kICogMTAwMDtcbmNvbnN0IG1pbnV0ZSA9IHNlY29uZCAqIDYwO1xuY29uc3QgaG91ciA9IG1pbnV0ZSAqIDYwO1xuY29uc3QgZGF5ID0gaG91ciAqIDI0O1xuY29uc3Qgd2VlayA9IGRheSAqIDc7XG4vKipcbiAqIEEgY29sbGVjdGlvbiBvZiBwZXJpb2RzIGluIG1pbGxpc2Vjb25kcyBhbmQgdGhlaXIgc3VmZml4ZXMgdXNlZCB3aGVuIGNyZWF0aW5nXG4gKiB0aW1lIHN0cmluZ3MuXG4gKi9cbmNvbnN0IHBlcmlvZHMgPSBbXG4gICAgW1wid1wiLCB3ZWVrXSxcbiAgICBbXCJkXCIsIGRheV0sXG4gICAgW1wiaFwiLCBob3VyXSxcbiAgICBbXCJtXCIsIG1pbnV0ZV0sXG4gICAgW1wic1wiLCBzZWNvbmRdLFxuXTtcbi8qKlxuICogQ29udmVydCBhIGdpdmVuIGBEYXRlYCwgYG51bWJlcmAsIG9yIGBtc2AtY29tcGF0aWJsZSBgc3RyaW5nYCB0byBhXG4gKiBJbm5nZXN0IHNsZWVwLWNvbXBhdGlibGUgdGltZSBzdHJpbmcgKGUuZy4gYFwiMWRcImAgb3IgYFwiMmgzMDEwc1wiYCkuXG4gKlxuICogQ2FuIG9wdGlvbmFsbHkgcHJvdmlkZSBhIGBub3dgIGRhdGUgdG8gdXNlIGFzIHRoZSBiYXNlIGZvciB0aGUgY2FsY3VsYXRpb24sXG4gKiBvdGhlcndpc2UgYSBuZXcgZGF0ZSB3aWxsIGJlIGNyZWF0ZWQgb24gaW52b2NhdGlvbi5cbiAqL1xuY29uc3QgdGltZVN0ciA9IChcbi8qKlxuICogVGhlIGZ1dHVyZSBkYXRlIHRvIHVzZSB0byBjb252ZXJ0IHRvIGEgdGltZSBzdHJpbmcuXG4gKi9cbmlucHV0KSA9PiB7XG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gaW5wdXQudG9JU09TdHJpbmcoKTtcbiAgICB9XG4gICAgY29uc3QgbWlsbGlzZWNvbmRzID0gdHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiID8gKDAsIG1zXzEuZGVmYXVsdCkoaW5wdXQpIDogaW5wdXQ7XG4gICAgY29uc3QgWywgdGltZVN0cl0gPSBwZXJpb2RzLnJlZHVjZSgoW251bSwgc3RyXSwgW3N1ZmZpeCwgcGVyaW9kXSkgPT4ge1xuICAgICAgICBjb25zdCBudW1QZXJpb2RzID0gTWF0aC5mbG9vcihudW0gLyBwZXJpb2QpO1xuICAgICAgICBpZiAobnVtUGVyaW9kcyA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbbnVtICUgcGVyaW9kLCBgJHtzdHJ9JHtudW1QZXJpb2RzfSR7c3VmZml4fWBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbnVtLCBzdHJdO1xuICAgIH0sIFttaWxsaXNlY29uZHMsIFwiXCJdKTtcbiAgICByZXR1cm4gdGltZVN0cjtcbn07XG5leHBvcnRzLnRpbWVTdHIgPSB0aW1lU3RyO1xuLyoqXG4gKiBHaXZlbiBhbiB1bmtub3duIGlucHV0LCBzdHJpbmdpZnkgaXQgaWYgaXQncyBhIGJvb2xlYW4sIGEgbnVtYmVyLCBvciBhXG4gKiBzdHJpbmcsIGVsc2UgcmV0dXJuIGB1bmRlZmluZWRgLlxuICovXG5jb25zdCBzdHJpbmdpZnlVbmtub3duID0gKGlucHV0KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJib29sZWFuXCIgfHxcbiAgICAgICAgdHlwZW9mIGlucHV0ID09PSBcIm51bWJlclwiIHx8XG4gICAgICAgIHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gaW5wdXQudG9TdHJpbmcoKTtcbiAgICB9XG59O1xuZXhwb3J0cy5zdHJpbmdpZnlVbmtub3duID0gc3RyaW5naWZ5VW5rbm93bjtcbmNvbnN0IGhhc2hFdmVudEtleSA9IChldmVudEtleSkgPT4ge1xuICAgIHJldHVybiAoMCwgaGFzaF9qc18xLnNoYTI1NikoKS51cGRhdGUoZXZlbnRLZXkpLmRpZ2VzdChcImhleFwiKTtcbn07XG5leHBvcnRzLmhhc2hFdmVudEtleSA9IGhhc2hFdmVudEtleTtcbmNvbnN0IGhhc2hTaWduaW5nS2V5ID0gKHNpZ25pbmdLZXkpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCFzaWduaW5nS2V5KSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBjb25zdCBwcmVmaXggPSAoKF9hID0gc2lnbmluZ0tleS5tYXRjaCgvXnNpZ25rZXktW1xcd10rLS8pKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2hpZnQoKSkgfHwgXCJcIjtcbiAgICBjb25zdCBrZXkgPSBzaWduaW5nS2V5LnJlcGxhY2UoL15zaWdua2V5LVtcXHddKy0vLCBcIlwiKTtcbiAgICAvLyBEZWNvZGUgdGhlIGtleSBmcm9tIGl0cyBoZXggcmVwcmVzZW50YXRpb24gaW50byBhIGJ5dGVzdHJlYW1cbiAgICByZXR1cm4gYCR7cHJlZml4fSR7KDAsIGhhc2hfanNfMS5zaGEyNTYpKCkudXBkYXRlKGtleSwgXCJoZXhcIikuZGlnZXN0KFwiaGV4XCIpfWA7XG59O1xuZXhwb3J0cy5oYXNoU2lnbmluZ0tleSA9IGhhc2hTaWduaW5nS2V5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaW5ncy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/strings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/helpers/temporal.js":
/*!**************************************************!*\
  !*** ./node_modules/inngest/helpers/temporal.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getISOString = exports.isTemporalZonedDateTime = exports.isTemporalInstant = exports.isTemporalDuration = void 0;\n/**\n * Asserts that the given `input` is a `Temporal.Duration` object.\n */\nconst isTemporalDuration = (\n/**\n * The input to check.\n */\ninput) => {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n        return input[Symbol.toStringTag] === \"Temporal.Duration\";\n    }\n    catch (_a) {\n        return false;\n    }\n};\nexports.isTemporalDuration = isTemporalDuration;\n/**\n * Asserts that the given `input` is a `Temporal.TimeZone` object.\n */\nconst isTemporalInstant = (\n/**\n * The input to check.\n */\ninput) => {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n        return input[Symbol.toStringTag] === \"Temporal.Instant\";\n    }\n    catch (_a) {\n        return false;\n    }\n};\nexports.isTemporalInstant = isTemporalInstant;\n/**\n * Asserts that the given `input` is a `Temporal.ZonedDateTime` object.\n */\nconst isTemporalZonedDateTime = (\n/**\n * The input to check.\n */\ninput) => {\n    try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n        return input[Symbol.toStringTag] === \"Temporal.ZonedDateTime\";\n    }\n    catch (_a) {\n        return false;\n    }\n};\nexports.isTemporalZonedDateTime = isTemporalZonedDateTime;\n/**\n * Converts a given `Date`, `string`, `Temporal.Instant`, or\n * `Temporal.ZonedDateTime` to an ISO 8601 string.\n */\nconst getISOString = (time) => {\n    if (typeof time === \"string\") {\n        return new Date(time).toISOString();\n    }\n    if (time instanceof Date) {\n        return time.toISOString();\n    }\n    if ((0, exports.isTemporalZonedDateTime)(time)) {\n        return time.toInstant().toString();\n    }\n    if ((0, exports.isTemporalInstant)(time)) {\n        return time.toString();\n    }\n    throw new TypeError(\"Invalid date input\");\n};\nexports.getISOString = getISOString;\n//# sourceMappingURL=temporal.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3RlbXBvcmFsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLCtCQUErQixHQUFHLHlCQUF5QixHQUFHLDBCQUEwQjtBQUMvRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsiL1VzZXJzL2FoYXJwZXIvaW5uZ2VzdC9pbm5nZXN0LXNhbmRib3gvdHMtbmV4dC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9oZWxwZXJzL3RlbXBvcmFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRJU09TdHJpbmcgPSBleHBvcnRzLmlzVGVtcG9yYWxab25lZERhdGVUaW1lID0gZXhwb3J0cy5pc1RlbXBvcmFsSW5zdGFudCA9IGV4cG9ydHMuaXNUZW1wb3JhbER1cmF0aW9uID0gdm9pZCAwO1xuLyoqXG4gKiBBc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGBpbnB1dGAgaXMgYSBgVGVtcG9yYWwuRHVyYXRpb25gIG9iamVjdC5cbiAqL1xuY29uc3QgaXNUZW1wb3JhbER1cmF0aW9uID0gKFxuLyoqXG4gKiBUaGUgaW5wdXQgdG8gY2hlY2suXG4gKi9cbmlucHV0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICByZXR1cm4gaW5wdXRbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gXCJUZW1wb3JhbC5EdXJhdGlvblwiO1xuICAgIH1cbiAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5leHBvcnRzLmlzVGVtcG9yYWxEdXJhdGlvbiA9IGlzVGVtcG9yYWxEdXJhdGlvbjtcbi8qKlxuICogQXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBgaW5wdXRgIGlzIGEgYFRlbXBvcmFsLlRpbWVab25lYCBvYmplY3QuXG4gKi9cbmNvbnN0IGlzVGVtcG9yYWxJbnN0YW50ID0gKFxuLyoqXG4gKiBUaGUgaW5wdXQgdG8gY2hlY2suXG4gKi9cbmlucHV0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICAgICAgICByZXR1cm4gaW5wdXRbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gXCJUZW1wb3JhbC5JbnN0YW50XCI7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcbmV4cG9ydHMuaXNUZW1wb3JhbEluc3RhbnQgPSBpc1RlbXBvcmFsSW5zdGFudDtcbi8qKlxuICogQXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBgaW5wdXRgIGlzIGEgYFRlbXBvcmFsLlpvbmVkRGF0ZVRpbWVgIG9iamVjdC5cbiAqL1xuY29uc3QgaXNUZW1wb3JhbFpvbmVkRGF0ZVRpbWUgPSAoXG4vKipcbiAqIFRoZSBpbnB1dCB0byBjaGVjay5cbiAqL1xuaW5wdXQpID0+IHtcbiAgICB0cnkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzXG4gICAgICAgIHJldHVybiBpbnB1dFtTeW1ib2wudG9TdHJpbmdUYWddID09PSBcIlRlbXBvcmFsLlpvbmVkRGF0ZVRpbWVcIjtcbiAgICB9XG4gICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuZXhwb3J0cy5pc1RlbXBvcmFsWm9uZWREYXRlVGltZSA9IGlzVGVtcG9yYWxab25lZERhdGVUaW1lO1xuLyoqXG4gKiBDb252ZXJ0cyBhIGdpdmVuIGBEYXRlYCwgYHN0cmluZ2AsIGBUZW1wb3JhbC5JbnN0YW50YCwgb3JcbiAqIGBUZW1wb3JhbC5ab25lZERhdGVUaW1lYCB0byBhbiBJU08gODYwMSBzdHJpbmcuXG4gKi9cbmNvbnN0IGdldElTT1N0cmluZyA9ICh0aW1lKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0aW1lID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aW1lKS50b0lTT1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodGltZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRpbWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKCgwLCBleHBvcnRzLmlzVGVtcG9yYWxab25lZERhdGVUaW1lKSh0aW1lKSkge1xuICAgICAgICByZXR1cm4gdGltZS50b0luc3RhbnQoKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAoKDAsIGV4cG9ydHMuaXNUZW1wb3JhbEluc3RhbnQpKHRpbWUpKSB7XG4gICAgICAgIHJldHVybiB0aW1lLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGRhdGUgaW5wdXRcIik7XG59O1xuZXhwb3J0cy5nZXRJU09TdHJpbmcgPSBnZXRJU09TdHJpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZW1wb3JhbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/helpers/temporal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/index.js":
/*!***************************************!*\
  !*** ./node_modules/inngest/index.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * The primary entrypoint for the Inngest SDK. This provides all the necessary\n * exports to create, run, and trigger Inngest functions.\n *\n * Typical usage involves creating a new Inngest client with `Inngest`, and then\n * using the client to create functions, middleware, and other tools.\n *\n * See {@link https://www.inngest.com/docs} for more information.\n *\n * @example Create an Inngest client\n * ```ts\n * const inngest = new Inngest({\n *   id: \"my-app-id\",\n * });\n * ```\n *\n * @example Create an Inngest function\n * ```ts\n * const myFn = inngest.createFunction({\n *  id: \"my-function\",\n * }, {\n *   event: \"user/created\",\n * }, async ({ event, step }) => {\n *   console.log(\"User created:\", event.data);\n * });\n * ```\n *\n * @example Send an event\n * ```ts\n * await inngest.send({\n *   name: \"user/created\",\n *   data: {\n *     id: \"123\",\n *   },\n * });\n * ```\n *\n * @module\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = exports.ProxyLogger = exports.dependencyInjectionMiddleware = exports.slugify = exports.queryKeys = exports.internalEvents = exports.headerKeys = exports.StepError = exports.RetryAfterError = exports.NonRetriableError = exports.InngestMiddleware = exports.referenceFunction = exports.InngestCommHandler = exports.Inngest = exports.EventSchemas = void 0;\n__exportStar(__webpack_require__(/*! @inngest/ai */ \"(rsc)/./node_modules/@inngest/ai/dist/index.js\"), exports);\nvar EventSchemas_js_1 = __webpack_require__(/*! ./components/EventSchemas.js */ \"(rsc)/./node_modules/inngest/components/EventSchemas.js\");\nObject.defineProperty(exports, \"EventSchemas\", ({ enumerable: true, get: function () { return EventSchemas_js_1.EventSchemas; } }));\nvar Fetch_js_1 = __webpack_require__(/*! ./components/Fetch.js */ \"(rsc)/./node_modules/inngest/components/Fetch.js\");\nObject.defineProperty(exports, \"fetch\", ({ enumerable: true, get: function () { return Fetch_js_1.fetch; } }));\nvar Inngest_js_1 = __webpack_require__(/*! ./components/Inngest.js */ \"(rsc)/./node_modules/inngest/components/Inngest.js\");\nObject.defineProperty(exports, \"Inngest\", ({ enumerable: true, get: function () { return Inngest_js_1.Inngest; } }));\nvar InngestCommHandler_js_1 = __webpack_require__(/*! ./components/InngestCommHandler.js */ \"(rsc)/./node_modules/inngest/components/InngestCommHandler.js\");\nObject.defineProperty(exports, \"InngestCommHandler\", ({ enumerable: true, get: function () { return InngestCommHandler_js_1.InngestCommHandler; } }));\nvar InngestFunctionReference_js_1 = __webpack_require__(/*! ./components/InngestFunctionReference.js */ \"(rsc)/./node_modules/inngest/components/InngestFunctionReference.js\");\nObject.defineProperty(exports, \"referenceFunction\", ({ enumerable: true, get: function () { return InngestFunctionReference_js_1.referenceFunction; } }));\nvar InngestMiddleware_js_1 = __webpack_require__(/*! ./components/InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\nObject.defineProperty(exports, \"InngestMiddleware\", ({ enumerable: true, get: function () { return InngestMiddleware_js_1.InngestMiddleware; } }));\nvar NonRetriableError_js_1 = __webpack_require__(/*! ./components/NonRetriableError.js */ \"(rsc)/./node_modules/inngest/components/NonRetriableError.js\");\nObject.defineProperty(exports, \"NonRetriableError\", ({ enumerable: true, get: function () { return NonRetriableError_js_1.NonRetriableError; } }));\nvar RetryAfterError_js_1 = __webpack_require__(/*! ./components/RetryAfterError.js */ \"(rsc)/./node_modules/inngest/components/RetryAfterError.js\");\nObject.defineProperty(exports, \"RetryAfterError\", ({ enumerable: true, get: function () { return RetryAfterError_js_1.RetryAfterError; } }));\nvar StepError_js_1 = __webpack_require__(/*! ./components/StepError.js */ \"(rsc)/./node_modules/inngest/components/StepError.js\");\nObject.defineProperty(exports, \"StepError\", ({ enumerable: true, get: function () { return StepError_js_1.StepError; } }));\nvar consts_js_1 = __webpack_require__(/*! ./helpers/consts.js */ \"(rsc)/./node_modules/inngest/helpers/consts.js\");\nObject.defineProperty(exports, \"headerKeys\", ({ enumerable: true, get: function () { return consts_js_1.headerKeys; } }));\nObject.defineProperty(exports, \"internalEvents\", ({ enumerable: true, get: function () { return consts_js_1.internalEvents; } }));\nObject.defineProperty(exports, \"queryKeys\", ({ enumerable: true, get: function () { return consts_js_1.queryKeys; } }));\nvar strings_js_1 = __webpack_require__(/*! ./helpers/strings.js */ \"(rsc)/./node_modules/inngest/helpers/strings.js\");\nObject.defineProperty(exports, \"slugify\", ({ enumerable: true, get: function () { return strings_js_1.slugify; } }));\nvar dependencyInjection_js_1 = __webpack_require__(/*! ./middleware/dependencyInjection.js */ \"(rsc)/./node_modules/inngest/middleware/dependencyInjection.js\");\nObject.defineProperty(exports, \"dependencyInjectionMiddleware\", ({ enumerable: true, get: function () { return dependencyInjection_js_1.dependencyInjectionMiddleware; } }));\nvar logger_js_1 = __webpack_require__(/*! ./middleware/logger.js */ \"(rsc)/./node_modules/inngest/middleware/logger.js\");\nObject.defineProperty(exports, \"ProxyLogger\", ({ enumerable: true, get: function () { return logger_js_1.ProxyLogger; } }));\nvar version_js_1 = __webpack_require__(/*! ./version.js */ \"(rsc)/./node_modules/inngest/version.js\");\nObject.defineProperty(exports, \"version\", ({ enumerable: true, get: function () { return version_js_1.version; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/middleware/dependencyInjection.js":
/*!****************************************************************!*\
  !*** ./node_modules/inngest/middleware/dependencyInjection.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.dependencyInjectionMiddleware = void 0;\nconst InngestMiddleware_js_1 = __webpack_require__(/*! ../components/InngestMiddleware.js */ \"(rsc)/./node_modules/inngest/components/InngestMiddleware.js\");\n/**\n * Adds properties to the function input for every function created using this\n * app.\n */\n// We can use `const` here yet due to TS constraints.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst dependencyInjectionMiddleware = (\n/**\n * The context to inject into the function input.\n */\nctx) => {\n    return new InngestMiddleware_js_1.InngestMiddleware({\n        name: \"Inngest: Dependency Injection\",\n        init() {\n            return {\n                onFunctionRun() {\n                    return {\n                        transformInput() {\n                            return {\n                                ctx,\n                            };\n                        },\n                    };\n                },\n            };\n        },\n    });\n};\nexports.dependencyInjectionMiddleware = dependencyInjectionMiddleware;\n//# sourceMappingURL=dependencyInjection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9taWRkbGV3YXJlL2RlcGVuZGVuY3lJbmplY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUNBQXFDO0FBQ3JDLCtCQUErQixtQkFBTyxDQUFDLHdHQUFvQztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EscUNBQXFDO0FBQ3JDIiwic291cmNlcyI6WyIvVXNlcnMvYWhhcnBlci9pbm5nZXN0L2lubmdlc3Qtc2FuZGJveC90cy1uZXh0L25vZGVfbW9kdWxlcy9pbm5nZXN0L21pZGRsZXdhcmUvZGVwZW5kZW5jeUluamVjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVwZW5kZW5jeUluamVjdGlvbk1pZGRsZXdhcmUgPSB2b2lkIDA7XG5jb25zdCBJbm5nZXN0TWlkZGxld2FyZV9qc18xID0gcmVxdWlyZShcIi4uL2NvbXBvbmVudHMvSW5uZ2VzdE1pZGRsZXdhcmUuanNcIik7XG4vKipcbiAqIEFkZHMgcHJvcGVydGllcyB0byB0aGUgZnVuY3Rpb24gaW5wdXQgZm9yIGV2ZXJ5IGZ1bmN0aW9uIGNyZWF0ZWQgdXNpbmcgdGhpc1xuICogYXBwLlxuICovXG4vLyBXZSBjYW4gdXNlIGBjb25zdGAgaGVyZSB5ZXQgZHVlIHRvIFRTIGNvbnN0cmFpbnRzLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmNvbnN0IGRlcGVuZGVuY3lJbmplY3Rpb25NaWRkbGV3YXJlID0gKFxuLyoqXG4gKiBUaGUgY29udGV4dCB0byBpbmplY3QgaW50byB0aGUgZnVuY3Rpb24gaW5wdXQuXG4gKi9cbmN0eCkgPT4ge1xuICAgIHJldHVybiBuZXcgSW5uZ2VzdE1pZGRsZXdhcmVfanNfMS5Jbm5nZXN0TWlkZGxld2FyZSh7XG4gICAgICAgIG5hbWU6IFwiSW5uZ2VzdDogRGVwZW5kZW5jeSBJbmplY3Rpb25cIixcbiAgICAgICAgaW5pdCgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb25GdW5jdGlvblJ1bigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybUlucHV0KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn07XG5leHBvcnRzLmRlcGVuZGVuY3lJbmplY3Rpb25NaWRkbGV3YXJlID0gZGVwZW5kZW5jeUluamVjdGlvbk1pZGRsZXdhcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXBlbmRlbmN5SW5qZWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/middleware/dependencyInjection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/middleware/logger.js":
/*!***************************************************!*\
  !*** ./node_modules/inngest/middleware/logger.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProxyLogger = exports.DefaultLogger = void 0;\nclass DefaultLogger {\n    info(...args) {\n        console.info(...args);\n    }\n    warn(...args) {\n        console.warn(...args);\n    }\n    error(...args) {\n        console.error(...args);\n    }\n    debug(...args) {\n        console.debug(...args);\n    }\n}\nexports.DefaultLogger = DefaultLogger;\n/**\n * ProxyLogger aims to provide a thin wrapper on user's provided logger.\n * It's expected to be turned on and off based on the function execution\n * context, so it doesn't result in duplicated logging.\n *\n * And also attempt to allow enough time for the logger to flush all logs.\n *\n * @public\n */\nclass ProxyLogger {\n    constructor(logger) {\n        this.enabled = false;\n        this.logger = logger;\n        // Return a Proxy to forward arbitrary property access to the underlying\n        // logger. For example, if the user provides a logger that has a `foo`\n        // method, they can call `foo` on the ProxyLogger and it will call the\n        // underlying logger's `foo` method.\n        return new Proxy(this, {\n            get(target, prop, receiver) {\n                // Handle ProxyLogger's own methods/properties.\n                if (prop in target) {\n                    return Reflect.get(target, prop, receiver);\n                }\n                // Forward property access to the underlying logger.\n                return Reflect.get(target.logger, prop, receiver);\n            },\n        });\n    }\n    info(...args) {\n        if (!this.enabled)\n            return;\n        this.logger.info(...args);\n    }\n    warn(...args) {\n        if (!this.enabled)\n            return;\n        this.logger.warn(...args);\n    }\n    error(...args) {\n        if (!this.enabled)\n            return;\n        this.logger.error(...args);\n    }\n    debug(...args) {\n        // there are loggers that don't implement \"debug\" by default\n        if (!this.enabled || !(typeof this.logger.debug === \"function\"))\n            return;\n        this.logger.debug(...args);\n    }\n    enable() {\n        this.enabled = true;\n    }\n    disable() {\n        this.enabled = false;\n    }\n    async flush() {\n        // Allow 1s for the provided logger to handle flushing since the ones that do\n        // flushing usually has some kind of timeout of up to 1s.\n        //\n        // TODO:\n        // This should only happen when using a serverless environment because it's very\n        // costly from the compute perspective.\n        // server runtimes should just let the logger do their thing since most of them\n        // should have already figured what to do in those environments, be it threading or\n        // something else.\n        if (this.logger.constructor.name !== DefaultLogger.name) {\n            await new Promise((resolve) => {\n                setTimeout(() => resolve(null), 1000);\n            });\n        }\n    }\n}\nexports.ProxyLogger = ProxyLogger;\n//# sourceMappingURL=logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9taWRkbGV3YXJlL2xvZ2dlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyxxQkFBcUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9haGFycGVyL2lubmdlc3QvaW5uZ2VzdC1zYW5kYm94L3RzLW5leHQvbm9kZV9tb2R1bGVzL2lubmdlc3QvbWlkZGxld2FyZS9sb2dnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlByb3h5TG9nZ2VyID0gZXhwb3J0cy5EZWZhdWx0TG9nZ2VyID0gdm9pZCAwO1xuY2xhc3MgRGVmYXVsdExvZ2dlciB7XG4gICAgaW5mbyguLi5hcmdzKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbyguLi5hcmdzKTtcbiAgICB9XG4gICAgd2FybiguLi5hcmdzKSB7XG4gICAgICAgIGNvbnNvbGUud2FybiguLi5hcmdzKTtcbiAgICB9XG4gICAgZXJyb3IoLi4uYXJncykge1xuICAgICAgICBjb25zb2xlLmVycm9yKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBkZWJ1ZyguLi5hcmdzKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoLi4uYXJncyk7XG4gICAgfVxufVxuZXhwb3J0cy5EZWZhdWx0TG9nZ2VyID0gRGVmYXVsdExvZ2dlcjtcbi8qKlxuICogUHJveHlMb2dnZXIgYWltcyB0byBwcm92aWRlIGEgdGhpbiB3cmFwcGVyIG9uIHVzZXIncyBwcm92aWRlZCBsb2dnZXIuXG4gKiBJdCdzIGV4cGVjdGVkIHRvIGJlIHR1cm5lZCBvbiBhbmQgb2ZmIGJhc2VkIG9uIHRoZSBmdW5jdGlvbiBleGVjdXRpb25cbiAqIGNvbnRleHQsIHNvIGl0IGRvZXNuJ3QgcmVzdWx0IGluIGR1cGxpY2F0ZWQgbG9nZ2luZy5cbiAqXG4gKiBBbmQgYWxzbyBhdHRlbXB0IHRvIGFsbG93IGVub3VnaCB0aW1lIGZvciB0aGUgbG9nZ2VyIHRvIGZsdXNoIGFsbCBsb2dzLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgUHJveHlMb2dnZXIge1xuICAgIGNvbnN0cnVjdG9yKGxvZ2dlcikge1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gICAgICAgIC8vIFJldHVybiBhIFByb3h5IHRvIGZvcndhcmQgYXJiaXRyYXJ5IHByb3BlcnR5IGFjY2VzcyB0byB0aGUgdW5kZXJseWluZ1xuICAgICAgICAvLyBsb2dnZXIuIEZvciBleGFtcGxlLCBpZiB0aGUgdXNlciBwcm92aWRlcyBhIGxvZ2dlciB0aGF0IGhhcyBhIGBmb29gXG4gICAgICAgIC8vIG1ldGhvZCwgdGhleSBjYW4gY2FsbCBgZm9vYCBvbiB0aGUgUHJveHlMb2dnZXIgYW5kIGl0IHdpbGwgY2FsbCB0aGVcbiAgICAgICAgLy8gdW5kZXJseWluZyBsb2dnZXIncyBgZm9vYCBtZXRob2QuXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGhpcywge1xuICAgICAgICAgICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgUHJveHlMb2dnZXIncyBvd24gbWV0aG9kcy9wcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICAgIGlmIChwcm9wIGluIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEZvcndhcmQgcHJvcGVydHkgYWNjZXNzIHRvIHRoZSB1bmRlcmx5aW5nIGxvZ2dlci5cbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LmxvZ2dlciwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluZm8oLi4uYXJncykge1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5sb2dnZXIuaW5mbyguLi5hcmdzKTtcbiAgICB9XG4gICAgd2FybiguLi5hcmdzKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBlcnJvciguLi5hcmdzKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvciguLi5hcmdzKTtcbiAgICB9XG4gICAgZGVidWcoLi4uYXJncykge1xuICAgICAgICAvLyB0aGVyZSBhcmUgbG9nZ2VycyB0aGF0IGRvbid0IGltcGxlbWVudCBcImRlYnVnXCIgYnkgZGVmYXVsdFxuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlZCB8fCAhKHR5cGVvZiB0aGlzLmxvZ2dlci5kZWJ1ZyA9PT0gXCJmdW5jdGlvblwiKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoLi4uYXJncyk7XG4gICAgfVxuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGFzeW5jIGZsdXNoKCkge1xuICAgICAgICAvLyBBbGxvdyAxcyBmb3IgdGhlIHByb3ZpZGVkIGxvZ2dlciB0byBoYW5kbGUgZmx1c2hpbmcgc2luY2UgdGhlIG9uZXMgdGhhdCBkb1xuICAgICAgICAvLyBmbHVzaGluZyB1c3VhbGx5IGhhcyBzb21lIGtpbmQgb2YgdGltZW91dCBvZiB1cCB0byAxcy5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVE9ETzpcbiAgICAgICAgLy8gVGhpcyBzaG91bGQgb25seSBoYXBwZW4gd2hlbiB1c2luZyBhIHNlcnZlcmxlc3MgZW52aXJvbm1lbnQgYmVjYXVzZSBpdCdzIHZlcnlcbiAgICAgICAgLy8gY29zdGx5IGZyb20gdGhlIGNvbXB1dGUgcGVyc3BlY3RpdmUuXG4gICAgICAgIC8vIHNlcnZlciBydW50aW1lcyBzaG91bGQganVzdCBsZXQgdGhlIGxvZ2dlciBkbyB0aGVpciB0aGluZyBzaW5jZSBtb3N0IG9mIHRoZW1cbiAgICAgICAgLy8gc2hvdWxkIGhhdmUgYWxyZWFkeSBmaWd1cmVkIHdoYXQgdG8gZG8gaW4gdGhvc2UgZW52aXJvbm1lbnRzLCBiZSBpdCB0aHJlYWRpbmcgb3JcbiAgICAgICAgLy8gc29tZXRoaW5nIGVsc2UuXG4gICAgICAgIGlmICh0aGlzLmxvZ2dlci5jb25zdHJ1Y3Rvci5uYW1lICE9PSBEZWZhdWx0TG9nZ2VyLm5hbWUpIHtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiByZXNvbHZlKG51bGwpLCAxMDAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Qcm94eUxvZ2dlciA9IFByb3h5TG9nZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/middleware/logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/next.js":
/*!**************************************!*\
  !*** ./node_modules/inngest/next.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * An adapter for Next.js to serve and register any declared functions with\n * Inngest, making them available to be triggered by events.\n *\n * Supports Next.js 12+, both serverless and edge.\n *\n * @example Next.js <=12 or the pages router can export the handler directly\n * ```ts\n * export default serve({ client: inngest, functions: [fn1, fn2] });\n * ```\n *\n * @example Next.js >=13 with the `app` dir must export individual methods\n * ```ts\n * export const { GET, POST, PUT } = serve({\n *            client: inngest,\n *            functions: [fn1, fn2],\n * });\n * ```\n *\n * @module\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serve = exports.frameworkName = void 0;\nconst InngestCommHandler_js_1 = __webpack_require__(/*! ./components/InngestCommHandler.js */ \"(rsc)/./node_modules/inngest/components/InngestCommHandler.js\");\nconst env_js_1 = __webpack_require__(/*! ./helpers/env.js */ \"(rsc)/./node_modules/inngest/helpers/env.js\");\n/**\n * The name of the framework, used to identify the framework in Inngest\n * dashboards and during testing.\n */\nexports.frameworkName = \"nextjs\";\nconst isRecord = (val) => {\n    return typeof val === \"object\" && val !== null;\n};\nconst isFunction = (val) => {\n    return typeof val === \"function\";\n};\nconst isNext12ApiResponse = (val) => {\n    return (isRecord(val) &&\n        isFunction(val.setHeader) &&\n        isFunction(val.status) &&\n        isFunction(val.send));\n};\n/**\n * In Next.js, serve and register any declared functions with Inngest, making\n * them available to be triggered by events.\n *\n * Supports Next.js 12+, both serverless and edge.\n *\n * @example Next.js <=12 or the pages router can export the handler directly\n * ```ts\n * export default serve({ client: inngest, functions: [fn1, fn2] });\n * ```\n *\n * @example Next.js >=13 with the `app` dir must export individual methods\n * ```ts\n * export const { GET, POST, PUT } = serve({\n *            client: inngest,\n *            functions: [fn1, fn2],\n * });\n * ```\n *\n * @public\n */\n// Has explicit return type to avoid JSR-defined \"slow types\"\nconst serve = (options) => {\n    const handler = new InngestCommHandler_js_1.InngestCommHandler(Object.assign(Object.assign({ frameworkName: exports.frameworkName }, options), { handler: (reqMethod, ...args) => {\n            const [expectedReq, res] = args;\n            const req = expectedReq;\n            const getHeader = (key) => {\n                const header = typeof req.headers.get === \"function\"\n                    ? req.headers.get(key)\n                    : req.headers[key];\n                return Array.isArray(header) ? header[0] : header;\n            };\n            return {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                body: () => (typeof req.json === \"function\" ? req.json() : req.body),\n                headers: getHeader,\n                method: () => {\n                    /**\n                     * `req.method`, though types say otherwise, is not available in Next.js\n                     * 13 {@link https://beta.nextjs.org/docs/routing/route-handlers Route Handlers}.\n                     *\n                     * Therefore, we must try to set the method ourselves where we know it.\n                     */\n                    const method = reqMethod || req.method || \"\";\n                    return method;\n                },\n                isProduction: () => {\n                    /**\n                     * Vercel Edge Functions do not allow dynamic access to environment\n                     * variables, so we'll manage production checks directly here.\n                     *\n                     * We try/catch to avoid situations where Next.js is being used in\n                     * environments where `process.env` is not accessible or polyfilled.\n                     */\n                    try {\n                        // eslint-disable-next-line @inngest/internal/process-warn\n                        const isProd = \"development\" === \"production\";\n                        return isProd;\n                    }\n                    catch (err) {\n                        // no-op\n                    }\n                },\n                queryString: (key, url) => {\n                    var _a;\n                    const qs = ((_a = req.query) === null || _a === void 0 ? void 0 : _a[key]) || url.searchParams.get(key);\n                    return Array.isArray(qs) ? qs[0] : qs;\n                },\n                url: () => {\n                    let absoluteUrl;\n                    try {\n                        absoluteUrl = new URL(req.url);\n                    }\n                    catch (_a) {\n                        // no-op\n                    }\n                    if (absoluteUrl) {\n                        /**\n                         * `req.url` here should may be the full URL, including query string.\n                         * There are some caveats, however, where Next.js will obfuscate\n                         * the host. For example, in the case of `host.docker.internal`,\n                         * Next.js will instead set the host here to `localhost`.\n                         *\n                         * To avoid this, we'll try to parse the URL from `req.url`, but\n                         * also use the `host` header if it's available.\n                         */\n                        const host = options.serveHost || getHeader(\"host\");\n                        if (host) {\n                            const hostWithProtocol = new URL(host.includes(\"://\") ? host : `${absoluteUrl.protocol}//${host}`);\n                            absoluteUrl.protocol = hostWithProtocol.protocol;\n                            absoluteUrl.host = hostWithProtocol.host;\n                            absoluteUrl.port = hostWithProtocol.port;\n                            absoluteUrl.username = hostWithProtocol.username;\n                            absoluteUrl.password = hostWithProtocol.password;\n                        }\n                        return absoluteUrl;\n                    }\n                    let scheme = \"https\";\n                    const host = options.serveHost || getHeader(\"host\") || \"\";\n                    try {\n                        // eslint-disable-next-line @inngest/internal/process-warn\n                        if (true) {\n                            scheme = \"http\";\n                        }\n                    }\n                    catch (err) {\n                        // no-op\n                    }\n                    const url = new URL(req.url, `${scheme}://${host}`);\n                    return url;\n                },\n                transformResponse: ({ body, headers, status }) => {\n                    /**\n                     * Carefully attempt to set headers and data on the response object\n                     * for Next.js 12 support.\n                     *\n                     * This also assumes that we're not using Next.js 15, where the `res`\n                     * object is repopulated as a `RouteContext` object. We expect these\n                     * methods to NOT be defined in Next.js 15.\n                     *\n                     * We could likely use `instanceof ServerResponse` to better check the\n                     * type of this, though Next.js 12 had issues with this due to not\n                     * instantiating the response correctly.\n                     */\n                    if (isNext12ApiResponse(res)) {\n                        for (const [key, value] of Object.entries(headers)) {\n                            res.setHeader(key, value);\n                        }\n                        res.status(status);\n                        res.send(body);\n                        /**\n                         * If we're here, we're in a serverless endpoint (not edge), so\n                         * we've correctly sent the response and can return `undefined`.\n                         *\n                         * Next.js 13 edge requires that the return value is typed as\n                         * `Response`, so we still enforce that as we cannot dynamically\n                         * adjust typing based on the environment.\n                         */\n                        return undefined;\n                    }\n                    /**\n                     * If we're here, we're in an edge environment and need to return a\n                     * `Response` object.\n                     *\n                     * We also don't know if the current environment has a native\n                     * `Response` object, so we'll grab that first.\n                     */\n                    const Res = (0, env_js_1.getResponse)();\n                    return new Res(body, { status, headers });\n                },\n                transformStreamingResponse: ({ body, headers, status }) => {\n                    return new Response(body, { status, headers });\n                },\n            };\n        } }));\n    /**\n     * Next.js 13 uses\n     * {@link https://beta.nextjs.org/docs/routing/route-handlers Route Handlers}\n     * to declare API routes instead of a generic catch-all method that was\n     * available using the `pages/api` directory.\n     *\n     * This means that users must now export a function for each method supported\n     * by the endpoint. For us, this means requiring a user explicitly exports\n     * `GET`, `POST`, and `PUT` functions.\n     *\n     * Because of this, we'll add circular references to those property names of\n     * the returned handler, meaning we can write some succinct code to export\n     * them. Thanks, @goodoldneon.\n     *\n     * @example\n     * ```ts\n     * export const { GET, POST, PUT } = serve(...);\n     * ```\n     *\n     * See {@link https://beta.nextjs.org/docs/routing/route-handlers}\n     */\n    const baseFn = handler.createHandler();\n    const fn = baseFn.bind(null, undefined);\n    /**\n     * Ensure we have a non-variadic length to avoid issues with forced type\n     * checking.\n     */\n    Object.defineProperty(fn, \"length\", { value: 1 });\n    const handlerFn = Object.defineProperties(fn, {\n        GET: { value: baseFn.bind(null, \"GET\") },\n        POST: { value: baseFn.bind(null, \"POST\") },\n        PUT: { value: baseFn.bind(null, \"PUT\") },\n    });\n    return handlerFn;\n};\nexports.serve = serve;\n//# sourceMappingURL=next.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/next.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/debug/src/browser.js":
/*!****************************************************************!*\
  !*** ./node_modules/inngest/node_modules/debug/src/browser.js ***!
  \****************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\tlet m;\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\t// eslint-disable-next-line no-return-assign\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug') || exports.storage.getItem('DEBUG') ;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/inngest/node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/debug/src/browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/debug/src/common.js":
/*!***************************************************************!*\
  !*** ./node_modules/inngest/node_modules/debug/src/common.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = __webpack_require__(/*! ms */ \"(rsc)/./node_modules/inngest/node_modules/ms/index.js\");\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '')\n\t\t\t.trim()\n\t\t\t.replace(/\\s+/g, ',')\n\t\t\t.split(',')\n\t\t\t.filter(Boolean);\n\n\t\tfor (const ns of split) {\n\t\t\tif (ns[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(ns.slice(1));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(ns);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given string matches a namespace template, honoring\n\t * asterisks as wildcards.\n\t *\n\t * @param {String} search\n\t * @param {String} template\n\t * @return {Boolean}\n\t */\n\tfunction matchesTemplate(search, template) {\n\t\tlet searchIndex = 0;\n\t\tlet templateIndex = 0;\n\t\tlet starIndex = -1;\n\t\tlet matchIndex = 0;\n\n\t\twhile (searchIndex < search.length) {\n\t\t\tif (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {\n\t\t\t\t// Match character or proceed with wildcard\n\t\t\t\tif (template[templateIndex] === '*') {\n\t\t\t\t\tstarIndex = templateIndex;\n\t\t\t\t\tmatchIndex = searchIndex;\n\t\t\t\t\ttemplateIndex++; // Skip the '*'\n\t\t\t\t} else {\n\t\t\t\t\tsearchIndex++;\n\t\t\t\t\ttemplateIndex++;\n\t\t\t\t}\n\t\t\t} else if (starIndex !== -1) { // eslint-disable-line no-negated-condition\n\t\t\t\t// Backtrack to the last '*' and try to match more characters\n\t\t\t\ttemplateIndex = starIndex + 1;\n\t\t\t\tmatchIndex++;\n\t\t\t\tsearchIndex = matchIndex;\n\t\t\t} else {\n\t\t\t\treturn false; // No match\n\t\t\t}\n\t\t}\n\n\t\t// Handle trailing '*' in template\n\t\twhile (templateIndex < template.length && template[templateIndex] === '*') {\n\t\t\ttemplateIndex++;\n\t\t}\n\n\t\treturn templateIndex === template.length;\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names,\n\t\t\t...createDebug.skips.map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tfor (const skip of createDebug.skips) {\n\t\t\tif (matchesTemplate(name, skip)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (const ns of createDebug.names) {\n\t\t\tif (matchesTemplate(name, ns)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/debug/src/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/debug/src/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/inngest/node_modules/debug/src/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || false === true || process.__nwjs) {\n\tmodule.exports = __webpack_require__(/*! ./browser.js */ \"(rsc)/./node_modules/inngest/node_modules/debug/src/browser.js\");\n} else {\n\tmodule.exports = __webpack_require__(/*! ./node.js */ \"(rsc)/./node_modules/inngest/node_modules/debug/src/node.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFFQUFxRSxLQUFlO0FBQ3BGLENBQUMsMEhBQXdDO0FBQ3pDLEVBQUU7QUFDRixDQUFDLG9IQUFxQztBQUN0QyIsInNvdXJjZXMiOlsiL1VzZXJzL2FoYXJwZXIvaW5uZ2VzdC9pbm5nZXN0LXNhbmRib3gvdHMtbmV4dC9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGV0ZWN0IEVsZWN0cm9uIHJlbmRlcmVyIC8gbndqcyBwcm9jZXNzLCB3aGljaCBpcyBub2RlLCBidXQgd2Ugc2hvdWxkXG4gKiB0cmVhdCBhcyBhIGJyb3dzZXIuXG4gKi9cblxuaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fCBwcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgcHJvY2Vzcy5icm93c2VyID09PSB0cnVlIHx8IHByb2Nlc3MuX19ud2pzKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9icm93c2VyLmpzJyk7XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbm9kZS5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/debug/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/debug/src/node.js":
/*!*************************************************************!*\
  !*** ./node_modules/inngest/node_modules/debug/src/node.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/**\n * Module dependencies.\n */\n\nconst tty = __webpack_require__(/*! tty */ \"tty\");\nconst util = __webpack_require__(/*! util */ \"util\");\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = __webpack_require__(/*! supports-color */ \"(rsc)/./node_modules/supports-color/index.js\");\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/inngest/node_modules/debug/src/common.js\")(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/debug/src/node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/node_modules/ms/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/inngest/node_modules/ms/index.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixXQUFXLFFBQVE7QUFDbkIsWUFBWSxPQUFPO0FBQ25CLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9haGFycGVyL2lubmdlc3QvaW5uZ2VzdC1zYW5kYm94L3RzLW5leHQvbm9kZV9tb2R1bGVzL2lubmdlc3Qvbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsKSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKFxuICAgIHN0clxuICApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSk7XG4gIHZhciB0eXBlID0gKG1hdGNoWzJdIHx8ICdtcycpLnRvTG93ZXJDYXNlKCk7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3llYXJzJzpcbiAgICBjYXNlICd5ZWFyJzpcbiAgICBjYXNlICd5cnMnOlxuICAgIGNhc2UgJ3lyJzpcbiAgICBjYXNlICd5JzpcbiAgICAgIHJldHVybiBuICogeTtcbiAgICBjYXNlICd3ZWVrcyc6XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgY2FzZSAndyc6XG4gICAgICByZXR1cm4gbiAqIHc7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJztcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gaCkgKyAnaCc7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG0pICsgJ20nO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJztcbiAgfVxuICByZXR1cm4gbXMgKyAnbXMnO1xufVxuXG4vKipcbiAqIExvbmcgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10TG9uZyhtcykge1xuICB2YXIgbXNBYnMgPSBNYXRoLmFicyhtcyk7XG4gIGlmIChtc0FicyA+PSBkKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGQsICdkYXknKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gaCkge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBoLCAnaG91cicpO1xuICB9XG4gIGlmIChtc0FicyA+PSBtKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIG0sICdtaW51dGUnKTtcbiAgfVxuICBpZiAobXNBYnMgPj0gcykge1xuICAgIHJldHVybiBwbHVyYWwobXMsIG1zQWJzLCBzLCAnc2Vjb25kJyk7XG4gIH1cbiAgcmV0dXJuIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBtc0FicywgbiwgbmFtZSkge1xuICB2YXIgaXNQbHVyYWwgPSBtc0FicyA+PSBuICogMS41O1xuICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIG4pICsgJyAnICsgbmFtZSArIChpc1BsdXJhbCA/ICdzJyA6ICcnKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/node_modules/ms/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/types.js":
/*!***************************************!*\
  !*** ./node_modules/inngest/types.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Internal types and schemas used throughout the Inngest SDK.\n *\n * Note that types intended to be imported and utilized in userland code will be\n * exported from the main entrypoint of the SDK, `inngest`; importing types\n * directly from this file may result in breaking changes in non-major bumps as\n * only those exported from `inngest` are considered stable.\n *\n * @module\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.inBandSyncRequestBodySchema = exports.err = exports.ok = exports.functionConfigSchema = exports.logLevels = exports.sendEventResponseSchema = exports.incomingOpSchema = exports.StepOpCode = exports.jsonErrorSchema = void 0;\nconst zod_1 = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.js\");\nconst baseJsonErrorSchema = zod_1.z.object({\n    name: zod_1.z.string().trim().optional(),\n    error: zod_1.z.string().trim().optional(),\n    message: zod_1.z.string().trim().optional(),\n    stack: zod_1.z.string().trim().optional(),\n});\nconst maybeJsonErrorSchema = zod_1.z.lazy(() => zod_1.z.object({\n    name: zod_1.z.string().trim(),\n    message: zod_1.z.string().trim(),\n    stack: zod_1.z.string().trim().optional(),\n    cause: zod_1.z.union([maybeJsonErrorSchema, zod_1.z.unknown()]).optional(),\n}));\nexports.jsonErrorSchema = baseJsonErrorSchema\n    .extend({\n    cause: zod_1.z.union([maybeJsonErrorSchema, zod_1.z.unknown()]).optional(),\n})\n    .passthrough()\n    .catch({})\n    .transform((val) => {\n    return Object.assign(Object.assign({}, val), { name: val.name || \"Error\", message: val.message || val.error || \"Unknown error\", stack: val.stack });\n});\n/**\n * Unique codes for the different types of operation that can be sent to Inngest\n * from SDK step functions.\n */\nvar StepOpCode;\n(function (StepOpCode) {\n    StepOpCode[\"WaitForSignal\"] = \"WaitForSignal\";\n    StepOpCode[\"WaitForEvent\"] = \"WaitForEvent\";\n    /**\n     * Legacy equivalent to `\"StepRun\"`. Has mixed data wrapping (e.g. `data` or\n     * `data.data` depending on SDK version), so this is phased out in favour of\n     * `\"StepRun\"`, which never wraps.\n     *\n     * Note that it is still used for v0 executions for backwards compatibility.\n     *\n     * @deprecated Only used for v0 executions; use `\"StepRun\"` instead.\n     */\n    StepOpCode[\"Step\"] = \"Step\";\n    StepOpCode[\"StepRun\"] = \"StepRun\";\n    StepOpCode[\"StepError\"] = \"StepError\";\n    StepOpCode[\"StepPlanned\"] = \"StepPlanned\";\n    StepOpCode[\"Sleep\"] = \"Sleep\";\n    /**\n     * Used to signify that the executor has requested that a step run, but we\n     * could not find that step.\n     *\n     * This is likely indicative that a step was renamed or removed from the\n     * function.\n     */\n    StepOpCode[\"StepNotFound\"] = \"StepNotFound\";\n    StepOpCode[\"InvokeFunction\"] = \"InvokeFunction\";\n    StepOpCode[\"AiGateway\"] = \"AIGateway\";\n    StepOpCode[\"Gateway\"] = \"Gateway\";\n})(StepOpCode || (exports.StepOpCode = StepOpCode = {}));\nexports.incomingOpSchema = zod_1.z.object({\n    id: zod_1.z.string().min(1),\n    data: zod_1.z.any().optional(),\n    error: zod_1.z.any().optional(),\n    input: zod_1.z.any().optional(),\n});\nexports.sendEventResponseSchema = zod_1.z.object({\n    /**\n     * Event IDs\n     */\n    ids: zod_1.z.array(zod_1.z.string()).default([]),\n    /**\n     * HTTP Status Code. Will be undefined if no request was sent.\n     */\n    status: zod_1.z.number().default(0),\n    /**\n     * Error message. Will be undefined if no error occurred.\n     */\n    error: zod_1.z.string().optional(),\n});\n/**\n * A set of log levels that can be used to control the amount of logging output\n * from various parts of the Inngest library.\n *\n * @public\n */\nexports.logLevels = [\n    \"fatal\",\n    \"error\",\n    \"warn\",\n    \"info\",\n    \"debug\",\n    \"silent\",\n];\n/**\n * This schema is used internally to share the shape of a concurrency option\n * when validating config. We cannot add comments to Zod fields, so we just use\n * an extra type check to ensure it matches our exported expectations.\n */\nconst concurrencyOptionSchema = zod_1.z.strictObject({\n    limit: zod_1.z.number(),\n    key: zod_1.z.string().optional(),\n    scope: zod_1.z.enum([\"fn\", \"env\", \"account\"]).optional(),\n});\nconst _checkConcurrencySchemaAligns = true;\n/**\n * The schema used to represent an individual function being synced with\n * Inngest.\n *\n * Note that this should only be used to validate the shape of a config object\n * and not used for feature compatibility, such as feature X being exclusive\n * with feature Y; these should be handled on the Inngest side.\n */\nexports.functionConfigSchema = zod_1.z.strictObject({\n    name: zod_1.z.string().optional(),\n    id: zod_1.z.string(),\n    triggers: zod_1.z.array(zod_1.z.union([\n        zod_1.z.strictObject({\n            event: zod_1.z.string(),\n            expression: zod_1.z.string().optional(),\n        }),\n        zod_1.z.strictObject({\n            cron: zod_1.z.string(),\n        }),\n    ])),\n    steps: zod_1.z.record(zod_1.z.strictObject({\n        id: zod_1.z.string(),\n        name: zod_1.z.string(),\n        runtime: zod_1.z.strictObject({\n            type: zod_1.z.union([zod_1.z.literal(\"http\"), zod_1.z.literal(\"ws\")]),\n            url: zod_1.z.string(),\n        }),\n        retries: zod_1.z\n            .strictObject({\n            attempts: zod_1.z.number().optional(),\n        })\n            .optional(),\n    })),\n    idempotency: zod_1.z.string().optional(),\n    batchEvents: zod_1.z\n        .strictObject({\n        maxSize: zod_1.z.number(),\n        timeout: zod_1.z.string(),\n        key: zod_1.z.string().optional(),\n    })\n        .optional(),\n    rateLimit: zod_1.z\n        .strictObject({\n        key: zod_1.z.string().optional(),\n        limit: zod_1.z.number(),\n        period: zod_1.z.string().transform((x) => x),\n    })\n        .optional(),\n    throttle: zod_1.z\n        .strictObject({\n        key: zod_1.z.string().optional(),\n        limit: zod_1.z.number(),\n        period: zod_1.z.string().transform((x) => x),\n        burst: zod_1.z.number().optional(),\n    })\n        .optional(),\n    singleton: zod_1.z\n        .strictObject({\n        key: zod_1.z.string().optional(),\n        mode: zod_1.z.enum([\"skip\", \"cancel\"]),\n    })\n        .optional(),\n    cancel: zod_1.z\n        .array(zod_1.z.strictObject({\n        event: zod_1.z.string(),\n        if: zod_1.z.string().optional(),\n        timeout: zod_1.z.string().optional(),\n    }))\n        .optional(),\n    debounce: zod_1.z\n        .strictObject({\n        key: zod_1.z.string().optional(),\n        period: zod_1.z.string().transform((x) => x),\n        timeout: zod_1.z\n            .string()\n            .transform((x) => x)\n            .optional(),\n    })\n        .optional(),\n    timeouts: zod_1.z\n        .strictObject({\n        start: zod_1.z\n            .string()\n            .transform((x) => x)\n            .optional(),\n        finish: zod_1.z\n            .string()\n            .transform((x) => x)\n            .optional(),\n    })\n        .optional(),\n    priority: zod_1.z\n        .strictObject({\n        run: zod_1.z.string().optional(),\n    })\n        .optional(),\n    concurrency: zod_1.z\n        .union([\n        zod_1.z.number(),\n        concurrencyOptionSchema.transform((x) => x),\n        zod_1.z\n            .array(concurrencyOptionSchema.transform((x) => x))\n            .min(1)\n            .max(2),\n    ])\n        .optional(),\n});\nconst ok = (data) => {\n    return { ok: true, value: data };\n};\nexports.ok = ok;\nconst err = (error) => {\n    return { ok: false, error };\n};\nexports.err = err;\nexports.inBandSyncRequestBodySchema = zod_1.z.strictObject({\n    url: zod_1.z.string(),\n});\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/inngest/version.js":
/*!*****************************************!*\
  !*** ./node_modules/inngest/version.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = void 0;\n// Generated by genversion.\nexports.version = \"3.40.0\";\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaW5uZ2VzdC92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZjtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL2FoYXJwZXIvaW5uZ2VzdC9pbm5nZXN0LXNhbmRib3gvdHMtbmV4dC9ub2RlX21vZHVsZXMvaW5uZ2VzdC92ZXJzaW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52ZXJzaW9uID0gdm9pZCAwO1xuLy8gR2VuZXJhdGVkIGJ5IGdlbnZlcnNpb24uXG5leHBvcnRzLnZlcnNpb24gPSBcIjMuNDAuMFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/inngest/version.js\n");

/***/ })

};
;